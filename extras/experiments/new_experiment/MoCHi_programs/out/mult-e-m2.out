/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 mult-e-m2.ml

parsed:
 let rec mult_1199 n_1200 m_1201 = if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1) in
 let main_1202 n_1203 m_1204 = assert (mult_1199 m_1204 m_1204 <= mult_1199 n_1203 n_1203) in
 ()


###set_main:
 let rec mult_1199 (n_1200:int) (m_1201:int) =
   if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1)
 in
 let main_1202 (n_1203:int) (m_1204:int) = assert (mult_1199 m_1204 m_1204 <= mult_1199 n_1203 n_1203) in
 (let arg1_2030 = rand_int () in
  let arg2_2032 = rand_int () in
  main_1202 arg1_2030 arg2_2032); ()

###Eliminate_redundant_arguments:
 let rec mult_1199 (n_1200:int) (m_1201:int) =
   if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1)
 in
 let main_1202 (n_1203:int) (m_1204:int) = assert (mult_1199 m_1204 m_1204 <= mult_1199 n_1203 n_1203) in
 (let arg1_2030 = rand_int () in
  let arg2_2032 = rand_int () in
  main_1202 arg1_2030 arg2_2032); ()

###CPS:
 (let rec mult_1199 (n_1200:int) (m_1201:int) (k_mult_2195:(int -> X)) =
    if n_1200 <= 0 || m_1201 <= 0
    then
      k_mult_2195 0
    else
      mult_1199 n_1200 (m_1201 - 1) (fun (x_2199:int) -> k_mult_2195 (n_1200 + x_2199))
  in
  let main_2034 (k_main_2267:(unit -> X)) =
    let arg1_2030 (k_main_arg1_2272:(int -> X)) = rand_int_cps () k_main_arg1_2272 in
    arg1_2030
      (fun (arg1_2302:int) ->
         let arg2_2032 (k_main_arg2_2284:(int -> X)) = rand_int_cps () k_main_arg2_2284 in
         arg2_2032
           (fun (arg2_2301:int) ->
              mult_1199
                arg2_2301 arg2_2301 
                (fun (x_2225:int) ->
                   mult_1199
                     arg1_2302 arg1_2302 
                     (fun (x_2226:int) -> if x_2225 <= x_2226 then k_main_2267 () else <|fail|> () k_main_2267))))
  in
  main_2034 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec mult_1199 (n_1200:int) (m_1201:int) (k_mult_2195:(int -> X)) =
    if n_1200 <= 0 || m_1201 <= 0
    then
      k_mult_2195 0
    else
      mult_1199 n_1200 (m_1201 - 1) (fun (x_2199:int) -> k_mult_2195 (n_1200 + x_2199))
  in
  let main_2034 (k_main_2267:(unit -> X)) =
    let arg1_2030 (k_main_arg1_2272:(int -> X)) = rand_int_cps () k_main_arg1_2272 in
    arg1_2030
      (fun (arg1_2302:int) ->
         let arg2_2032 (k_main_arg2_2284:(int -> X)) = rand_int_cps () k_main_arg2_2284 in
         arg2_2032
           (fun (arg2_2301:int) ->
              mult_1199
                arg2_2301 arg2_2301 
                (fun (x_2225:int) ->
                   mult_1199
                     arg1_2302 arg1_2302 
                     (fun (x_2226:int) -> if x_2225 <= x_2226 then k_main_2267 () else <|fail|> () k_main_2267))))
  in
  main_2034 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2467
  main_2467 -> (main_2034 f_2473).
  arg1_2030 k_main_arg1_2272 -> (rand_int k_main_arg1_2272).
  arg2_2032 arg1_2302 k_main_arg2_2284 -> (rand_int k_main_arg2_2284).
  f_2473 main_2303 -> end.
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when (x_2225 <= x_2226) -> (k_main_2267 ()).
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when 
      (not (x_2225 <= x_2226)) -> (fail_2474 true k_main_2267).
  f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267 x_2225 ->
      (mult_1199 arg1_2302 arg1_2302 (f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267)).
  f_f_main_2470 arg1_2302 k_main_2267 arg2_2301 ->
      (mult_1199 arg2_2301 arg2_2301 (f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267)).
  f_main_2469 k_main_2267 arg1_2302 -> (arg2_2032 arg1_2302 (f_f_main_2470 arg1_2302 k_main_2267)).
  f_mult_2468 m_1201 n_1200 k_mult_2195 x_2199 -> (k_mult_2195 (n_1200 + x_2199)).
  fail_2474 b k -> {fail} => (k ()).
  main_2034 k_main_2267 -> (arg1_2030 (f_main_2469 k_main_2267)).
  mult_1199 n_1200 m_1201 k_mult_2195 when ((n_1200 <= 0) || (m_1201 <= 0)) -> (k_mult_2195 0).
  mult_1199 n_1200 m_1201 k_mult_2195 when (not ((n_1200 <= 0) || (m_1201 <= 0))) ->
      (mult_1199 n_1200 (m_1201 - 1) (f_mult_2468 m_1201 n_1200 k_mult_2195)).
Types:
  main_2467 : X
  fail_2474 : (x_2:bool[x_2] -> (unit -> X) -> X)
  mult_1199 : (int -> int -> (int -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2467 ... --> 
  main_2034 ... --> 
  arg1_2030 ... --> 
  f_main_2469 ... --> 
  arg2_2032 ... --> 
  f_f_main_2470 ... --> 
  mult_1199 [1/2] ... --> 
  f_f_f_main_2471 ... --> 
  mult_1199 [1/2] ... --> 
  f_f_f_f_main_2472 [2/2] ... --> 
  fail_2474 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!

(1-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_2467
  main_2467 -> (main_2034 f_2473).
  arg1_2030 k_main_arg1_2272 -> (rand_int k_main_arg1_2272).
  arg2_2032 arg1_2302 k_main_arg2_2284 -> (rand_int k_main_arg2_2284).
  f_2473 main_2303 -> end.
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when (x_2225 <= x_2226) -> (k_main_2267 ()).
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when 
      (not (x_2225 <= x_2226)) -> (fail_2474 true k_main_2267).
  f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267 x_2225 ->
      (mult_1199 arg1_2302 arg1_2302 (f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267)).
  f_f_main_2470 arg1_2302 k_main_2267 arg2_2301 ->
      (mult_1199 arg2_2301 arg2_2301 (f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267)).
  f_main_2469 k_main_2267 arg1_2302 -> (arg2_2032 arg1_2302 (f_f_main_2470 arg1_2302 k_main_2267)).
  f_mult_2468 m_1201 n_1200 k_mult_2195 x_2199 -> (k_mult_2195 (n_1200 + x_2199)).
  fail_2474 b k -> {fail} => (k ()).
  main_2034 k_main_2267 -> (arg1_2030 (f_main_2469 k_main_2267)).
  mult_1199 n_1200 m_1201 k_mult_2195 when ((n_1200 <= 0) || (m_1201 <= 0)) -> (k_mult_2195 0).
  mult_1199 n_1200 m_1201 k_mult_2195 when (not ((n_1200 <= 0) || (m_1201 <= 0))) ->
      (mult_1199 n_1200 (m_1201 - 1) (f_mult_2468 m_1201 n_1200 k_mult_2195)).
Types:
  main_2467 : X
  fail_2474 : (x_2:bool[x_2] -> (unit -> X) -> X)
  mult_1199 : (int -> int -> (x_5:int[x_5 >= 0; x_5 <= 0] -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_2467 ... --> 
  main_2034 ... --> 
  arg1_2030 ... --> 
  f_main_2469 ... --> 
  arg2_2032 ... --> 
  f_f_main_2470 ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [1/2] ... --> 
  f_mult_2468 ... --> 
  f_f_f_main_2471 ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [1/2] ... --> 
  f_mult_2468 ... --> 
  f_f_f_f_main_2472 [2/2] ... --> 
  fail_2474 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counterexample ... DONE!

(2-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_2467
  main_2467 -> (main_2034 f_2473).
  arg1_2030 k_main_arg1_2272 -> (rand_int k_main_arg1_2272).
  arg2_2032 arg1_2302 k_main_arg2_2284 -> (rand_int k_main_arg2_2284).
  f_2473 main_2303 -> end.
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when (x_2225 <= x_2226) -> (k_main_2267 ()).
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when 
      (not (x_2225 <= x_2226)) -> (fail_2474 true k_main_2267).
  f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267 x_2225 ->
      (mult_1199 arg1_2302 arg1_2302 (f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267)).
  f_f_main_2470 arg1_2302 k_main_2267 arg2_2301 ->
      (mult_1199 arg2_2301 arg2_2301 (f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267)).
  f_main_2469 k_main_2267 arg1_2302 -> (arg2_2032 arg1_2302 (f_f_main_2470 arg1_2302 k_main_2267)).
  f_mult_2468 m_1201 n_1200 k_mult_2195 x_2199 -> (k_mult_2195 (n_1200 + x_2199)).
  fail_2474 b k -> {fail} => (k ()).
  main_2034 k_main_2267 -> (arg1_2030 (f_main_2469 k_main_2267)).
  mult_1199 n_1200 m_1201 k_mult_2195 when ((n_1200 <= 0) || (m_1201 <= 0)) -> (k_mult_2195 0).
  mult_1199 n_1200 m_1201 k_mult_2195 when (not ((n_1200 <= 0) || (m_1201 <= 0))) ->
      (mult_1199 n_1200 (m_1201 - 1) (f_mult_2468 m_1201 n_1200 k_mult_2195)).
Types:
  main_2467 : X
  fail_2474 : (x_2:bool[x_2] -> (unit -> X) -> X)
  mult_1199 : (x_2:int ->
               x_3:int[1 <= x_2; 1 >= x_2 - x_3; x_3 >= x_2] ->
               (x_5:int[1 <= x_2 + x_5; 1 <= x_5; 1 >= x_2 + x_5; 1 >= x_5; x_5 >= 0; x_5 <= 0] -> X) -> X)

(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_2467 ... --> 
  main_2034 ... --> 
  arg1_2030 ... --> 
  f_main_2469 ... --> 
  arg2_2032 ... --> 
  f_f_main_2470 ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [1/2] ... --> 
  f_mult_2468 ... --> 
  f_mult_2468 ... --> 
  f_mult_2468 ... --> 
  f_f_f_main_2471 ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [2/2] ... --> 
  mult_1199 [1/2] ... --> 
  f_mult_2468 ... --> 
  f_mult_2468 ... --> 
  f_mult_2468 ... --> 
  f_f_f_f_main_2472 [2/2] ... --> 
  fail_2474 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 1; 0

(3-3) Checking counterexample ... DONE!

(3-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_2467
  main_2467 -> (main_2034 f_2473).
  arg1_2030 k_main_arg1_2272 -> (rand_int k_main_arg1_2272).
  arg2_2032 arg1_2302 k_main_arg2_2284 -> (rand_int k_main_arg2_2284).
  f_2473 main_2303 -> end.
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when (x_2225 <= x_2226) -> (k_main_2267 ()).
  f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267 x_2226 when 
      (not (x_2225 <= x_2226)) -> (fail_2474 true k_main_2267).
  f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267 x_2225 ->
      (mult_1199 arg1_2302 arg1_2302 (f_f_f_f_main_2472 arg1_2302 arg2_2301 x_2225 k_main_2267)).
  f_f_main_2470 arg1_2302 k_main_2267 arg2_2301 ->
      (mult_1199 arg2_2301 arg2_2301 (f_f_f_main_2471 arg1_2302 arg2_2301 k_main_2267)).
  f_main_2469 k_main_2267 arg1_2302 -> (arg2_2032 arg1_2302 (f_f_main_2470 arg1_2302 k_main_2267)).
  f_mult_2468 m_1201 n_1200 k_mult_2195 x_2199 -> (k_mult_2195 (n_1200 + x_2199)).
  fail_2474 b k -> {fail} => (k ()).
  main_2034 k_main_2267 -> (arg1_2030 (f_main_2469 k_main_2267)).
  mult_1199 n_1200 m_1201 k_mult_2195 when ((n_1200 <= 0) || (m_1201 <= 0)) -> (k_mult_2195 0).
  mult_1199 n_1200 m_1201 k_mult_2195 when (not ((n_1200 <= 0) || (m_1201 <= 0))) ->
      (mult_1199 n_1200 (m_1201 - 1) (f_mult_2468 m_1201 n_1200 k_mult_2195)).
Types:
  main_2467 : X
  fail_2474 : (x_2:bool[x_2] -> (unit -> X) -> X)
  mult_1199 : (x_2:int ->
               x_3:int[3 <= x_2; 2 <= x_2 - x_3; 1 <= x_2 - x_3; x_3 <= x_2; 
                       3 >= x_2 - x_3; 2 >= x_2 - x_3; 1 <= x_2; 1 >= x_2 - x_3; 
                       x_3 >= x_2] ->
               (x_5:int[9 <= 3*x_2 + x_5; 9 <= 2*x_2 + x_5; 9 <= x_2 + x_5; 
                        9 <= x_5; 9 >= 3*x_2 + x_5; 9 >= 2*x_2 + x_5; 
                        9 >= x_2 + x_5; 9 >= x_5; 1 <= x_2 + x_5; 1 <= x_5; 
                        1 >= x_2 + x_5; 1 >= x_5; x_5 >= 0; x_5 <= 0] ->
               X) -> X)

(4-1) Abstracting ... 177.472

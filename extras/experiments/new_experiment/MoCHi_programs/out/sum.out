/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 sum.ml

parsed:
 let rec sum_1199 n_1200 = if n_1200 <= 0 then 0 else n_1200 + sum_1199 (n_1200 - 1) in
 let main_1201 n_1202 = assert (n_1202 <= sum_1199 n_1202) in
 ()


###set_main:
 let rec sum_1199 (n_1200:int) = if n_1200 <= 0 then 0 else n_1200 + sum_1199 (n_1200 - 1) in
 let main_1201 (n_1202:int) = assert (n_1202 <= sum_1199 n_1202) in
 (let arg1_2016 = rand_int () in
  main_1201 arg1_2016); ()

###CPS:
 (let rec sum_1199 (n_1200:int) (k_sum_2112:(int -> X)) =
    if n_1200 <= 0 then k_sum_2112 0 else sum_1199 (n_1200 - 1) (fun (x_2116:int) -> k_sum_2112 (n_1200 + x_2116))
  in
  let main_2018 (k_main_2169:(unit -> X)) =
    let arg1_2016 (k_main_arg1_2174:(int -> X)) = rand_int_cps () k_main_arg1_2174 in
    arg1_2016
      (fun (arg1_2190:int) ->
         sum_1199
           arg1_2190 
           (fun (x_2141:int) -> if arg1_2190 <= x_2141 then k_main_2169 () else <|fail|> () k_main_2169))
  in
  main_2018 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec sum_1199 (n_1200:int) (k_sum_2112:(int -> X)) =
    if n_1200 <= 0 then k_sum_2112 0 else sum_1199 (n_1200 - 1) (fun (x_2116:int) -> k_sum_2112 (n_1200 + x_2116))
  in
  let main_2018 (k_main_2169:(unit -> X)) =
    let arg1_2016 (k_main_arg1_2174:(int -> X)) = rand_int_cps () k_main_arg1_2174 in
    arg1_2016
      (fun (arg1_2190:int) ->
         sum_1199
           arg1_2190 
           (fun (x_2141:int) -> if arg1_2190 <= x_2141 then k_main_2169 () else <|fail|> () k_main_2169))
  in
  main_2018 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2296
  main_2296 -> (main_2018 f_2300).
  arg1_2016 k_main_arg1_2174 -> (rand_int k_main_arg1_2174).
  f_2300 main_2191 -> end.
  f_f_main_2299 arg1_2190 k_main_2169 x_2141 when (arg1_2190 <= x_2141) -> (k_main_2169 ()).
  f_f_main_2299 arg1_2190 k_main_2169 x_2141 when (not (arg1_2190 <= x_2141)) -> (fail_2301 true k_main_2169).
  f_main_2298 k_main_2169 arg1_2190 -> (sum_1199 arg1_2190 (f_f_main_2299 arg1_2190 k_main_2169)).
  f_sum_2297 n_1200 k_sum_2112 x_2116 -> (k_sum_2112 (n_1200 + x_2116)).
  fail_2301 b k -> {fail} => (k ()).
  main_2018 k_main_2169 -> (arg1_2016 (f_main_2298 k_main_2169)).
  sum_1199 n_1200 k_sum_2112 when (n_1200 <= 0) -> (k_sum_2112 0).
  sum_1199 n_1200 k_sum_2112 when (not (n_1200 <= 0)) -> (sum_1199 (n_1200 - 1) (f_sum_2297 n_1200 k_sum_2112)).
Types:
  main_2296 : X
  fail_2301 : (x_2:bool[x_2] -> (unit -> X) -> X)
  sum_1199 : (int -> (int -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2296 ... --> 
  main_2018 ... --> 
  arg1_2016 ... --> 
  f_main_2298 ... --> 
  sum_1199 [1/2] ... --> 
  f_f_main_2299 [2/2] ... --> 
  fail_2301 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!

(1-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_2296
  main_2296 -> (main_2018 f_2300).
  arg1_2016 k_main_arg1_2174 -> (rand_int k_main_arg1_2174).
  f_2300 main_2191 -> end.
  f_f_main_2299 arg1_2190 k_main_2169 x_2141 when (arg1_2190 <= x_2141) -> (k_main_2169 ()).
  f_f_main_2299 arg1_2190 k_main_2169 x_2141 when (not (arg1_2190 <= x_2141)) -> (fail_2301 true k_main_2169).
  f_main_2298 k_main_2169 arg1_2190 -> (sum_1199 arg1_2190 (f_f_main_2299 arg1_2190 k_main_2169)).
  f_sum_2297 n_1200 k_sum_2112 x_2116 -> (k_sum_2112 (n_1200 + x_2116)).
  fail_2301 b k -> {fail} => (k ()).
  main_2018 k_main_2169 -> (arg1_2016 (f_main_2298 k_main_2169)).
  sum_1199 n_1200 k_sum_2112 when (n_1200 <= 0) -> (k_sum_2112 0).
  sum_1199 n_1200 k_sum_2112 when (not (n_1200 <= 0)) -> (sum_1199 (n_1200 - 1) (f_sum_2297 n_1200 k_sum_2112)).
Types:
  main_2296 : X
  fail_2301 : (x_2:bool[x_2] -> (unit -> X) -> X)
  sum_1199 : (x_2:int -> (x_4:int[x_4 >= x_2] -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!


========================================================================================================================

Safe!

Refinement Types:
  sum: (x_1:int -> {x_2:int | x_2 >= x_1})

CEGAR-cycles: 2
total: 0.329 sec
  abst: 0.129 sec
  mc: 0.007 sec
  refine: 0.113 sec
0.330

/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 200_1-e.ml

parsed:
 let rec copy_1199 x_1200 = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 n_1202 = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 n_1204 exn_1205 =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 n_1207 = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_1208 _ = assert false; 1 in
 let m2_1210 n_1211 = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_1208 in
                                       () in
 let f3_1213 n_1214 k_1215 = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 n_1217 = assert (n_1217 = 0) in
 let m3_1218 n_1219 = f3_1213 n_1219 g3_1216 in
 let c4_1220 _ = () in
 let b4_1222 x_1223 _ = x_1223 1 in
 let a4_1225 x_2096 x_2100 q_1228 =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 n_1230 x_1231 q_1232 =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 n_1234 q_1235 = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 n_1237 = s4_1233 n_1237 0 in
 let f5_1238 x_1239 g_1240 = g_1240 (x_1239 + 1) in
 let h5_1241 y_1242 = assert (y_1242 > 0) in
 let m5_1243 n_1244 = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 x_1246 g_1247 = g_1247 (x_1246 + 1) in
 let h6_1248 z_1249 y_1250 = assert (y_1250 > z_1249) in
 let m6_1251 n_1252 = if n_1252 >= 0 then f6_1245 n_1252 (h6_1248 n_1252) in
 let rec zip_1253 x_1254 y_1255 =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 x_1257 =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 n_1259 =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let max_1260 max2_1261 x_2263 x_2265 x_2266 =
   max2_1261 (max2_1261 x_2263 x_2265) x_2266
 in
 let f9_1265 x_1266 y_1267 =
   if x_1266 >= y_1267 then x_1266 else y_1267
 in
 let m9_1268 x_2285 y_1270 z_1271 =
   let m_1272 =
     max_1260 f9_1265 x_2285 y_1270 z_1271
   in
   assert (f9_1265 x_2285 m_1272 = m_1272)
 in
 let rec mc91_1273 x_1274 =
   if x_1274 > 100
   then
     x_1274 - 10
   else
     mc91_1273 (mc91_1273 (x_1274 + 11))
 in
 let m10_1275 n_1276 =
   if n_1276 <= 101
   then
     assert (mc91_1273 n_1276 = 91)
 in
 let f8_1277 g_1278 x_1279 y_1280 =
   g_1278 (x_1279 + 1) (y_1280 + 1)
 in
 let rec unzip8_1281 x_1282 k_1283 =
   if x_1282 = 0
   then
     k_1283 0 0
   else
     unzip8_1281 (x_1282 - 1) (f8_1277 k_1283)
 in
 let rec zip8_1284 x_1285 y_1286 =
   if x_1285 = 0
   then
     if y_1286 = 0 then 0 else assert false
   else
     if y_1286 = 0
     then
       assert false
     else
       1 +
       zip8_1284 (x_1285 - 1) (y_1286 - 1)
 in
 let m8_1287 n_1288 =
   unzip8_1281 n_1288 zip8_1284
 in
 let rec mult_1289 n_1290 m_1291 =
   if n_1290 <= 0 || m_1291 <= 0
   then
     0
   else
     n_1290 + mult_1289 n_1290 (m_1291 - 1)
 in
 let m11_1292 n_1293 =
   assert (n_1293 <=
           mult_1289 n_1293 n_1293)
 in
 let make_array_1294 n_1295 i_1296 =
   assert (0 <= i_1296 && i_1296 < n_1295);
   0
 in
 let update_1297 x_2446 _ des_1300 x_1301 =
   let u_2467 = des_1300 x_2446 in
   let a_1302 j_1303 =
     if x_2446 = j_1303
     then
       x_1301
     else
       des_1300 x_2446
   in
   a_1302
 in
 let print_int_1304 _ = () in
 let f20_1306 x_2480 src_1308 des_1309 =
   let rec bcopy_1310 x_2500 src_1312 
                     des_1313 i_1314 =
     if i_1314 >= x_2500
     then
       des_1313
     else
       let des_1315 =
         update_1297
           i_1314 x_2500 des_1313 
           (src_1312 i_1314)
       in
       bcopy_1310
         x_2500 src_1312 des_1315 
         (i_1314 + 1)
   in
   let rec print_array_1316 m_1317 x_2553 
                           i_1319 =
     if i_1319 >= m_1317
     then
       ()
     else
       print_int_1304 (des_1309 i_1319);
       print_array_1316
         m_1317 x_2553 (i_1319 + 1)
   in
   let array_1320 =
     bcopy_1310 x_2480 src_1308 des_1309 0
   in
   print_array_1316 x_2480 array_1320 0
 in
 let m12_1321 n_1322 =
   let array1_1323 = make_array_1294 n_1322 in
   let array2_1324 = make_array_1294 n_1322 in
   if n_1322 > 0
   then
     f20_1306
       n_1322 array1_1323 array2_1324
 in
 let lock_1325 st_1326 =
   assert (st_1326 = 0); 1
 in
 let unlock_1327 st_1328 =
   assert (st_1328 = 1); 0
 in
 let f13_1329 n_1330 st_1331 =
   if n_1330 > 0
   then
     lock_1325 st_1331
   else
     st_1331
 in
 let g13_1332 n_1333 st_1334 =
   if n_1333 > 0
   then
     unlock_1327 st_1334
   else
     st_1334
 in
 let m13_1335 n_1336 =
   assert (g13_1332
             n_1336 (f13_1329 n_1336 0)
           = 0)
 in
 let rec sum_1337 n_1338 =
   if n_1338 <= 0
   then
     0
   else
     n_1338 + sum_1337 (n_1338 - 1)
 in
 let m14_1339 n_1340 =
   assert (n_1340 <= sum_1337 n_1340)
 in
 let rec mult_1341 n_1342 m_1343 =
   if n_1342 <= 0 || m_1343 <= 0
   then
     0
   else
     n_1342 + mult_1341 n_1342 (m_1343 - 1)
 in
 let m15_1344 n_1345 =
   assert (n_1345 + 1 <=
           mult_1341 n_1345 n_1345)
 in
 let main_1346 n_1347 m_1348 =
   if n_1347 = 1
   then
     m1_1201 m_1348
   else
     if n_1347 = 2
     then
       m2_1210 m_1348
     else
       if n_1347 = 3
       then
         m3_1218 m_1348
       else
         if n_1347 = 4
         then
           m4_1236 m_1348
         else
           if n_1347 = 5
           then
             m5_1243 m_1348
           else
             if n_1347 = 6
             then
               m6_1251 m_1348
             else
               if n_1347 = 7
               then
                 m7_1258 m_1348
               else
                 if n_1347 = 9
                 then
                   m9_1268
                     m_1348 m_1348 m_1348
                 else
                   if n_1347 = 10
                   then
                     m10_1275 m_1348
                   else
                     if n_1347 = 11
                     then
                       m11_1292 m_1348
                     else
                       if n_1347 = 12
                       then
                         m12_1321 m_1348
                       else
                         if n_1347 = 13
                         then
                           m13_1335 m_1348
                         else
                           if n_1347 = 14
                           then
                             m14_1339
                               m_1348
                           else
                             m15_1344
                               m_1348
 in
 ()


###set_main:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_1208 (_:!!!) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_1208 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_1248 (z_1249:!!!) (y_1250:!!!) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_1248 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let max_1260 (max2_1261:(int -> int -> int)) (x_2263:int) 
             (x_2265:int) (x_2266:int) =
   max2_1261 (max2_1261 x_2263 x_2265) x_2266
 in
 let f9_1265 (x_1266:int) (y_1267:int) =
   if x_1266 >= y_1267 then x_1266 else y_1267
 in
 let m9_1268 (x_2285:int) (y_1270:int) (z_1271:int) =
   let m_1272 =
     max_1260 f9_1265 x_2285 y_1270 z_1271
   in
   assert (f9_1265 x_2285 m_1272 = m_1272)
 in
 let rec mc91_1273 (x_1274:int) =
   if x_1274 > 100
   then
     x_1274 - 10
   else
     mc91_1273 (mc91_1273 (x_1274 + 11))
 in
 let m10_1275 (n_1276:int) =
   if n_1276 <= 101
   then
     assert (mc91_1273 n_1276 = 91)
 in
 let f8_1277 (g_1278:(int -> int -> int)) 
            (x_1279:int) (y_1280:int) =
   g_1278 (x_1279 + 1) (y_1280 + 1)
 in
 let rec unzip8_1281 (x_1282:int) 
                    (k_1283:(int -> int -> int)) =
   if x_1282 = 0
   then
     k_1283 0 0
   else
     unzip8_1281 (x_1282 - 1) (f8_1277 k_1283)
 in
 let rec zip8_1284 (x_1285:int) (y_1286:int) =
   if x_1285 = 0
   then
     if y_1286 = 0 then 0 else assert false
   else
     if y_1286 = 0
     then
       assert false
     else
       1 +
       zip8_1284 (x_1285 - 1) (y_1286 - 1)
 in
 let m8_1287 (n_1288:int) =
   unzip8_1281 n_1288 zip8_1284
 in
 let rec mult_1289 (n_1290:int) 
                  (m_1291:int) =
   if n_1290 <= 0 || m_1291 <= 0
   then
     0
   else
     n_1290 + mult_1289 n_1290 (m_1291 - 1)
 in
 let m11_1292 (n_1293:int) =
   assert (n_1293 <=
           mult_1289 n_1293 n_1293)
 in
 let make_array_1294 (n_1295:int) 
                    (i_1296:int) =
   assert (0 <= i_1296 && i_1296 < n_1295);
   0
 in
 let update_1297 (x_2446:int) (_:int) 
                (des_1300:(int -> int)) 
                (x_1301:int) =
   let u_2467 = des_1300 x_2446 in
   let a_1302 (j_1303:int) =
     if x_2446 = j_1303
     then
       x_1301
     else
       des_1300 x_2446
   in
   a_1302
 in
 let print_int_1304 (_:int) = () in
 let f20_1306 (x_2480:int) 
             (src_1308:(int -> int)) 
             (des_1309:(int -> int)) =
   let rec bcopy_1310 (x_2500:int) 
                     (src_1312:(int -> int)) 
                     (des_1313:(int -> int)) 
                     (i_1314:int) =
     if i_1314 >= x_2500
     then
       des_1313
     else
       let des_1315 =
         update_1297
           i_1314 x_2500 des_1313 
           (src_1312 i_1314)
       in
       bcopy_1310
         x_2500 src_1312 des_1315 
         (i_1314 + 1)
   in
   let rec print_array_1316 (m_1317:int) 
                           (x_2553:(int ->
                                      int))
                           (i_1319:int) =
     if i_1319 >= m_1317
     then
       ()
     else
       print_int_1304 (des_1309 i_1319);
       print_array_1316
         m_1317 x_2553 (i_1319 + 1)
   in
   let array_1320 =
     bcopy_1310 x_2480 src_1308 des_1309 0
   in
   print_array_1316 x_2480 array_1320 0
 in
 let m12_1321 (n_1322:int) =
   let array1_1323 = make_array_1294 n_1322 in
   let array2_1324 = make_array_1294 n_1322 in
   if n_1322 > 0
   then
     f20_1306
       n_1322 array1_1323 array2_1324
 in
 let lock_1325 (st_1326:int) =
   assert (st_1326 = 0); 1
 in
 let unlock_1327 (st_1328:int) =
   assert (st_1328 = 1); 0
 in
 let f13_1329 (n_1330:int) (st_1331:int) =
   if n_1330 > 0
   then
     lock_1325 st_1331
   else
     st_1331
 in
 let g13_1332 (n_1333:int) (st_1334:int) =
   if n_1333 > 0
   then
     unlock_1327 st_1334
   else
     st_1334
 in
 let m13_1335 (n_1336:int) =
   assert (g13_1332
             n_1336 (f13_1329 n_1336 0)
           = 0)
 in
 let rec sum_1337 (n_1338:int) =
   if n_1338 <= 0
   then
     0
   else
     n_1338 + sum_1337 (n_1338 - 1)
 in
 let m14_1339 (n_1340:int) =
   assert (n_1340 <= sum_1337 n_1340)
 in
 let rec mult_1341 (n_1342:int) 
                  (m_1343:int) =
   if n_1342 <= 0 || m_1343 <= 0
   then
     0
   else
     n_1342 + mult_1341 n_1342 (m_1343 - 1)
 in
 let m15_1344 (n_1345:int) =
   assert (n_1345 + 1 <=
           mult_1341 n_1345 n_1345)
 in
 let main_1346 (n_1347:int) (m_1348:int) =
   if n_1347 = 1
   then
     m1_1201 m_1348
   else
     if n_1347 = 2
     then
       m2_1210 m_1348
     else
       if n_1347 = 3
       then
         m3_1218 m_1348
       else
         if n_1347 = 4
         then
           m4_1236 m_1348
         else
           if n_1347 = 5
           then
             m5_1243 m_1348
           else
             if n_1347 = 6
             then
               m6_1251 m_1348
             else
               if n_1347 = 7
               then
                 m7_1258 m_1348
               else
                 if n_1347 = 9
                 then
                   m9_1268
                     m_1348 m_1348 m_1348
                 else
                   if n_1347 = 10
                   then
                     m10_1275 m_1348
                   else
                     if n_1347 = 11
                     then
                       m11_1292 m_1348
                     else
                       if n_1347 = 12
                       then
                         m12_1321 m_1348
                       else
                         if n_1347 = 13
                         then
                           m13_1335 m_1348
                         else
                           if n_1347 = 14
                           then
                             m14_1339
                               m_1348
                           else
                             m15_1344
                               m_1348
 in
 (let arg1_2726 = rand_int () in
  let arg2_2728 = rand_int () in
  main_1346 arg1_2726 arg2_2728);
 ()

###Copy_poly:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2732 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2732 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2731 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2731 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let max_1260 (max2_1261:(int -> int -> int)) (x_2263:int) 
             (x_2265:int) (x_2266:int) =
   max2_1261 (max2_1261 x_2263 x_2265) x_2266
 in
 let f9_1265 (x_1266:int) (y_1267:int) =
   if x_1266 >= y_1267 then x_1266 else y_1267
 in
 let m9_1268 (x_2285:int) (y_1270:int) (z_1271:int) =
   let m_1272 =
     max_1260 f9_1265 x_2285 y_1270 z_1271
   in
   assert (f9_1265 x_2285 m_1272 = m_1272)
 in
 let rec mc91_1273 (x_1274:int) =
   if x_1274 > 100
   then
     x_1274 - 10
   else
     mc91_1273 (mc91_1273 (x_1274 + 11))
 in
 let m10_1275 (n_1276:int) =
   if n_1276 <= 101
   then
     assert (mc91_1273 n_1276 = 91)
 in
 let f8_1277 (g_1278:(int -> int -> int)) 
            (x_1279:int) (y_1280:int) =
   g_1278 (x_1279 + 1) (y_1280 + 1)
 in
 let rec unzip8_1281 (x_1282:int) 
                    (k_1283:(int -> int -> int)) =
   if x_1282 = 0
   then
     k_1283 0 0
   else
     unzip8_1281 (x_1282 - 1) (f8_1277 k_1283)
 in
 let rec zip8_1284 (x_1285:int) (y_1286:int) =
   if x_1285 = 0
   then
     if y_1286 = 0 then 0 else assert false
   else
     if y_1286 = 0
     then
       assert false
     else
       1 +
       zip8_1284 (x_1285 - 1) (y_1286 - 1)
 in
 let m8_1287 (n_1288:int) =
   unzip8_1281 n_1288 zip8_1284
 in
 let rec mult_1289 (n_1290:int) 
                  (m_1291:int) =
   if n_1290 <= 0 || m_1291 <= 0
   then
     0
   else
     n_1290 + mult_1289 n_1290 (m_1291 - 1)
 in
 let m11_1292 (n_1293:int) =
   assert (n_1293 <=
           mult_1289 n_1293 n_1293)
 in
 let make_array_1294 (n_1295:int) 
                    (i_1296:int) =
   assert (0 <= i_1296 && i_1296 < n_1295);
   0
 in
 let update_1297 (x_2446:int) (_:int) 
                (des_1300:(int -> int)) 
                (x_1301:int) =
   let u_2467 = des_1300 x_2446 in
   let a_1302 (j_1303:int) =
     if x_2446 = j_1303
     then
       x_1301
     else
       des_1300 x_2446
   in
   a_1302
 in
 let print_int_1304 (_:int) = () in
 let f20_1306 (x_2480:int) 
             (src_1308:(int -> int)) 
             (des_1309:(int -> int)) =
   let rec bcopy_1310 (x_2500:int) 
                     (src_1312:(int -> int)) 
                     (des_1313:(int -> int)) 
                     (i_1314:int) =
     if i_1314 >= x_2500
     then
       des_1313
     else
       let des_1315 =
         update_1297
           i_1314 x_2500 des_1313 
           (src_1312 i_1314)
       in
       bcopy_1310
         x_2500 src_1312 des_1315 
         (i_1314 + 1)
   in
   let rec print_array_1316 (m_1317:int) 
                           (x_2553:(int ->
                                      int))
                           (i_1319:int) =
     if i_1319 >= m_1317
     then
       ()
     else
       print_int_1304 (des_1309 i_1319);
       print_array_1316
         m_1317 x_2553 (i_1319 + 1)
   in
   let array_1320 =
     bcopy_1310 x_2480 src_1308 des_1309 0
   in
   print_array_1316 x_2480 array_1320 0
 in
 let m12_1321 (n_1322:int) =
   let array1_1323 = make_array_1294 n_1322 in
   let array2_1324 = make_array_1294 n_1322 in
   if n_1322 > 0
   then
     f20_1306
       n_1322 array1_1323 array2_1324
 in
 let lock_1325 (st_1326:int) =
   assert (st_1326 = 0); 1
 in
 let unlock_1327 (st_1328:int) =
   assert (st_1328 = 1); 0
 in
 let f13_1329 (n_1330:int) (st_1331:int) =
   if n_1330 > 0
   then
     lock_1325 st_1331
   else
     st_1331
 in
 let g13_1332 (n_1333:int) (st_1334:int) =
   if n_1333 > 0
   then
     unlock_1327 st_1334
   else
     st_1334
 in
 let m13_1335 (n_1336:int) =
   assert (g13_1332
             n_1336 (f13_1329 n_1336 0)
           = 0)
 in
 let rec sum_1337 (n_1338:int) =
   if n_1338 <= 0
   then
     0
   else
     n_1338 + sum_1337 (n_1338 - 1)
 in
 let m14_1339 (n_1340:int) =
   assert (n_1340 <= sum_1337 n_1340)
 in
 let rec mult_1341 (n_1342:int) 
                  (m_1343:int) =
   if n_1342 <= 0 || m_1343 <= 0
   then
     0
   else
     n_1342 + mult_1341 n_1342 (m_1343 - 1)
 in
 let m15_1344 (n_1345:int) =
   assert (n_1345 + 1 <=
           mult_1341 n_1345 n_1345)
 in
 let main_1346 (n_1347:int) (m_1348:int) =
   if n_1347 = 1
   then
     m1_1201 m_1348
   else
     if n_1347 = 2
     then
       m2_1210 m_1348
     else
       if n_1347 = 3
       then
         m3_1218 m_1348
       else
         if n_1347 = 4
         then
           m4_1236 m_1348
         else
           if n_1347 = 5
           then
             m5_1243 m_1348
           else
             if n_1347 = 6
             then
               m6_1251 m_1348
             else
               if n_1347 = 7
               then
                 m7_1258 m_1348
               else
                 if n_1347 = 9
                 then
                   m9_1268
                     m_1348 m_1348 m_1348
                 else
                   if n_1347 = 10
                   then
                     m10_1275 m_1348
                   else
                     if n_1347 = 11
                     then
                       m11_1292 m_1348
                     else
                       if n_1347 = 12
                       then
                         m12_1321 m_1348
                       else
                         if n_1347 = 13
                         then
                           m13_1335 m_1348
                         else
                           if n_1347 = 14
                           then
                             m14_1339
                               m_1348
                           else
                             m15_1344
                               m_1348
 in
 (let arg1_2726 = rand_int () in
  let arg2_2728 = rand_int () in
  main_1346 arg1_2726 arg2_2728);
 ()

###Beta_reduce_trivial:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2732 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2732 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2731 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2731 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let max_1260 (max2_1261:(int -> int -> int)) (x_2263:int) 
             (x_2265:int) (x_2266:int) =
   max2_1261 (max2_1261 x_2263 x_2265) x_2266
 in
 let f9_1265 (x_1266:int) (y_1267:int) =
   if x_1266 >= y_1267 then x_1266 else y_1267
 in
 let m9_1268 (x_2285:int) (y_1270:int) (z_1271:int) =
   let m_1272 =
     max_1260 f9_1265 x_2285 y_1270 z_1271
   in
   assert (f9_1265 x_2285 m_1272 = m_1272)
 in
 let rec mc91_1273 (x_1274:int) =
   if x_1274 > 100
   then
     x_1274 - 10
   else
     mc91_1273 (mc91_1273 (x_1274 + 11))
 in
 let m10_1275 (n_1276:int) =
   if n_1276 <= 101
   then
     assert (mc91_1273 n_1276 = 91)
 in
 let f8_1277 (g_1278:(int -> int -> int)) 
            (x_1279:int) (y_1280:int) =
   g_1278 (x_1279 + 1) (y_1280 + 1)
 in
 let rec unzip8_1281 (x_1282:int) 
                    (k_1283:(int -> int -> int)) =
   if x_1282 = 0
   then
     k_1283 0 0
   else
     unzip8_1281 (x_1282 - 1) (f8_1277 k_1283)
 in
 let rec zip8_1284 (x_1285:int) (y_1286:int) =
   if x_1285 = 0
   then
     if y_1286 = 0 then 0 else assert false
   else
     if y_1286 = 0
     then
       assert false
     else
       1 +
       zip8_1284 (x_1285 - 1) (y_1286 - 1)
 in
 let rec mult_1289 (n_1290:int) 
                  (m_1291:int) =
   if n_1290 <= 0 || m_1291 <= 0
   then
     0
   else
     n_1290 + mult_1289 n_1290 (m_1291 - 1)
 in
 let m11_1292 (n_1293:int) =
   assert (n_1293 <=
           mult_1289 n_1293 n_1293)
 in
 let make_array_1294 (n_1295:int) 
                    (i_1296:int) =
   assert (0 <= i_1296 && i_1296 < n_1295);
   0
 in
 let update_1297 (x_2446:int) (_:int) 
                (des_1300:(int -> int)) 
                (x_1301:int) =
   let u_2467 = des_1300 x_2446 in
   let a_1302 (j_1303:int) =
     if x_2446 = j_1303
     then
       x_1301
     else
       des_1300 x_2446
   in
   a_1302
 in
 let print_int_1304 (_:int) = () in
 let f20_1306 (x_2480:int) 
             (src_1308:(int -> int)) 
             (des_1309:(int -> int)) =
   let rec bcopy_1310 (x_2500:int) 
                     (src_1312:(int -> int)) 
                     (des_1313:(int -> int)) 
                     (i_1314:int) =
     if i_1314 >= x_2500
     then
       des_1313
     else
       let des_1315 =
         update_1297
           i_1314 x_2500 des_1313 
           (src_1312 i_1314)
       in
       bcopy_1310
         x_2500 src_1312 des_1315 
         (i_1314 + 1)
   in
   let rec print_array_1316 (m_1317:int) 
                           (x_2553:(int ->
                                      int))
                           (i_1319:int) =
     if i_1319 >= m_1317
     then
       ()
     else
       print_int_1304 (des_1309 i_1319);
       print_array_1316
         m_1317 x_2553 (i_1319 + 1)
   in
   let array_1320 =
     bcopy_1310 x_2480 src_1308 des_1309 0
   in
   print_array_1316 x_2480 array_1320 0
 in
 let m12_1321 (n_1322:int) =
   let array1_1323 = make_array_1294 n_1322 in
   let array2_1324 = make_array_1294 n_1322 in
   if n_1322 > 0
   then
     f20_1306
       n_1322 array1_1323 array2_1324
 in
 let lock_1325 (st_1326:int) =
   assert (st_1326 = 0); 1
 in
 let unlock_1327 (st_1328:int) =
   assert (st_1328 = 1); 0
 in
 let f13_1329 (n_1330:int) (st_1331:int) =
   if n_1330 > 0
   then
     lock_1325 st_1331
   else
     st_1331
 in
 let g13_1332 (n_1333:int) (st_1334:int) =
   if n_1333 > 0
   then
     unlock_1327 st_1334
   else
     st_1334
 in
 let m13_1335 (n_1336:int) =
   assert (g13_1332
             n_1336 (f13_1329 n_1336 0)
           = 0)
 in
 let rec sum_1337 (n_1338:int) =
   if n_1338 <= 0
   then
     0
   else
     n_1338 + sum_1337 (n_1338 - 1)
 in
 let m14_1339 (n_1340:int) =
   assert (n_1340 <= sum_1337 n_1340)
 in
 let rec mult_1341 (n_1342:int) 
                  (m_1343:int) =
   if n_1342 <= 0 || m_1343 <= 0
   then
     0
   else
     n_1342 + mult_1341 n_1342 (m_1343 - 1)
 in
 let m15_1344 (n_1345:int) =
   assert (n_1345 + 1 <=
           mult_1341 n_1345 n_1345)
 in
 let main_1346 (n_1347:int) (m_1348:int) =
   if n_1347 = 1
   then
     m1_1201 m_1348
   else
     if n_1347 = 2
     then
       m2_1210 m_1348
     else
       if n_1347 = 3
       then
         m3_1218 m_1348
       else
         if n_1347 = 4
         then
           m4_1236 m_1348
         else
           if n_1347 = 5
           then
             m5_1243 m_1348
           else
             if n_1347 = 6
             then
               m6_1251 m_1348
             else
               if n_1347 = 7
               then
                 m7_1258 m_1348
               else
                 if n_1347 = 9
                 then
                   m9_1268
                     m_1348 m_1348 m_1348
                 else
                   if n_1347 = 10
                   then
                     m10_1275 m_1348
                   else
                     if n_1347 = 11
                     then
                       m11_1292 m_1348
                     else
                       if n_1347 = 12
                       then
                         m12_1321 m_1348
                       else
                         if n_1347 = 13
                         then
                           m13_1335 m_1348
                         else
                           if n_1347 = 14
                           then
                             m14_1339
                               m_1348
                           else
                             m15_1344
                               m_1348
 in
 (let arg1_2726 = rand_int () in
  let arg2_2728 = rand_int () in
  main_1346 arg1_2726 arg2_2728);
 ()

###Eliminate_redundant_arguments:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2732 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2732 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2731 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2731 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let max_1260 (max2_1261:(int -> int -> int)) (x_2263:int) 
             (x_2265:int) (x_2266:int) =
   max2_1261 (max2_1261 x_2263 x_2265) x_2266
 in
 let f9_1265 (x_1266:int) (y_1267:int) =
   if x_1266 >= y_1267 then x_1266 else y_1267
 in
 let m9_1268 (x_2285:int) (y_1270:int) (z_1271:int) =
   let m_1272 =
     max_1260 f9_1265 x_2285 y_1270 z_1271
   in
   assert (f9_1265 x_2285 m_1272 = m_1272)
 in
 let rec mc91_1273 (x_1274:int) =
   if x_1274 > 100
   then
     x_1274 - 10
   else
     mc91_1273 (mc91_1273 (x_1274 + 11))
 in
 let m10_1275 (n_1276:int) =
   if n_1276 <= 101
   then
     assert (mc91_1273 n_1276 = 91)
 in
 let f8_1277 (g_1278:(int -> int -> int)) 
            (x_1279:int) (y_1280:int) =
   g_1278 (x_1279 + 1) (y_1280 + 1)
 in
 let rec unzip8_1281 (x_1282:int) 
                    (k_1283:(int -> int -> int)) =
   if x_1282 = 0
   then
     k_1283 0 0
   else
     unzip8_1281 (x_1282 - 1) (f8_1277 k_1283)
 in
 let rec zip8_1284 (x_1285:int) (y_1286:int) =
   if x_1285 = 0
   then
     if y_1286 = 0 then 0 else assert false
   else
     if y_1286 = 0
     then
       assert false
     else
       1 +
       zip8_1284 (x_1285 - 1) (y_1286 - 1)
 in
 let rec mult_1289 (n_1290:int) 
                  (m_1291:int) =
   if n_1290 <= 0 || m_1291 <= 0
   then
     0
   else
     n_1290 + mult_1289 n_1290 (m_1291 - 1)
 in
 let m11_1292 (n_1293:int) =
   assert (n_1293 <=
           mult_1289 n_1293 n_1293)
 in
 let make_array_1294 (n_1295:int) 
                    (i_1296:int) =
   assert (0 <= i_1296 && i_1296 < n_1295);
   0
 in
 let update_1297 (x_2446:int) (_:int) 
                (des_1300:(int -> int)) 
                (x_1301:int) =
   let u_2467 = des_1300 x_2446 in
   let a_1302 (j_1303:int) =
     if x_2446 = j_1303
     then
       x_1301
     else
       des_1300 x_2446
   in
   a_1302
 in
 let print_int_1304 (_:int) = () in
 let f20_1306 (x_2480:int) 
             (src_1308:(int -> int)) 
             (des_1309:(int -> int)) =
   let rec bcopy_1310
                     (des_1313:(int -> int)) 
                     (i_1314:int) =
     if i_1314 >= x_2480
     then
       des_1313
     else
       let des_1315 =
         update_1297
           i_1314 x_2480 des_1313 
           (src_1308 i_1314)
       in
       bcopy_1310 des_1315 (i_1314 + 1)
   in
   let rec print_array_1316
                           (x_2553:(int ->
                                      int))
                           (i_1319:int) =
     if i_1319 >= x_2480
     then
       ()
     else
       print_int_1304 (des_1309 i_1319);
       print_array_1316 x_2553 (i_1319 + 1)
   in
   let array_1320 = bcopy_1310 des_1309 0 in
   print_array_1316 array_1320 0
 in
 let m12_1321 (n_1322:int) =
   let array1_1323 = make_array_1294 n_1322 in
   let array2_1324 = make_array_1294 n_1322 in
   if n_1322 > 0
   then
     f20_1306
       n_1322 array1_1323 array2_1324
 in
 let lock_1325 (st_1326:int) =
   assert (st_1326 = 0); 1
 in
 let unlock_1327 (st_1328:int) =
   assert (st_1328 = 1); 0
 in
 let f13_1329 (n_1330:int) (st_1331:int) =
   if n_1330 > 0
   then
     lock_1325 st_1331
   else
     st_1331
 in
 let g13_1332 (n_1333:int) (st_1334:int) =
   if n_1333 > 0
   then
     unlock_1327 st_1334
   else
     st_1334
 in
 let m13_1335 (n_1336:int) =
   assert (g13_1332
             n_1336 (f13_1329 n_1336 0)
           = 0)
 in
 let rec sum_1337 (n_1338:int) =
   if n_1338 <= 0
   then
     0
   else
     n_1338 + sum_1337 (n_1338 - 1)
 in
 let m14_1339 (n_1340:int) =
   assert (n_1340 <= sum_1337 n_1340)
 in
 let rec mult_1341 (n_1342:int) 
                  (m_1343:int) =
   if n_1342 <= 0 || m_1343 <= 0
   then
     0
   else
     n_1342 + mult_1341 n_1342 (m_1343 - 1)
 in
 let m15_1344 (n_1345:int) =
   assert (n_1345 + 1 <=
           mult_1341 n_1345 n_1345)
 in
 let main_1346 (n_1347:int) (m_1348:int) =
   if n_1347 = 1
   then
     m1_1201 m_1348
   else
     if n_1347 = 2
     then
       m2_1210 m_1348
     else
       if n_1347 = 3
       then
         m3_1218 m_1348
       else
         if n_1347 = 4
         then
           m4_1236 m_1348
         else
           if n_1347 = 5
           then
             m5_1243 m_1348
           else
             if n_1347 = 6
             then
               m6_1251 m_1348
             else
               if n_1347 = 7
               then
                 m7_1258 m_1348
               else
                 if n_1347 = 9
                 then
                   m9_1268
                     m_1348 m_1348 m_1348
                 else
                   if n_1347 = 10
                   then
                     m10_1275 m_1348
                   else
                     if n_1347 = 11
                     then
                       m11_1292 m_1348
                     else
                       if n_1347 = 12
                       then
                         m12_1321 m_1348
                       else
                         if n_1347 = 13
                         then
                           m13_1335 m_1348
                         else
                           if n_1347 = 14
                           then
                             m14_1339
                               m_1348
                           else
                             m15_1344
                               m_1348
 in
 (let arg1_2726 = rand_int () in
  let arg2_2728 = rand_int () in
  main_1346 arg1_2726 arg2_2728);
 ()

###CPS:
 (let rec copy_1199 (x_1200:int) (k_copy_4330:(int -> X)) =
    if x_1200 = 0 then k_copy_4330 0 else copy_1199 (x_1200 - 1) (fun (x_4334:int) -> k_copy_4330 (1 + x_4334))
  in
  let rec fact_1203 (n_1204:int) (exn_1205:(int -> (int -> X) -> X)) (k_fact_4400:(int -> X)) =
    if n_1204 <= 0
    then
      exn_1205 0 k_fact_4400
    else
      let exn_1206 (n_1207:int) (k_fact_exn_4414:(int -> X)) =
        if n_1207 = 0 then k_fact_exn_4414 1 else exn_1205 n_1207 k_fact_exn_4414
      in
      fact_1203 (n_1204 - 1) exn_1206 (fun (x_4435:int) -> k_fact_4400 (n_1204 * x_4435))
  in
  let exn_2732 (_:int) (_:(int -> X)) = <|fail|> () (fun (():unit) -> _|_) in
  let m2_1210 (n_1211:int) (k_m2_4499:(unit -> X)) =
    if n_1211 > 0 then fact_1203 n_1211 exn_2732 (fun (_:int) -> k_m2_4499 ()) else k_m2_4499 ()
  in
  let f3_1213 (n_1214:int) (k_1215:(int -> (unit -> X) -> X)) (k_f3_4539:(unit -> X)) =
    if n_1214 >= 0 then k_f3_4539 () else k_1215 0 k_f3_4539
  in
  let g3_1216 (n_1217:int) (k_g3_4564:(unit -> X)) =
    if n_1217 = 0 then k_g3_4564 () else <|fail|> () k_g3_4564
  in
  let c4_1220 (_:int) (k_c4_4612:(unit -> X)) = k_c4_4612 () in
  let b4_1222 (x_1223:(int -> (unit -> X) -> X)) (_:int) 
             (k_b4_4622:(unit -> X)) = x_1223 1 k_b4_4622
  in
  let a4_1225 (x_2096:(int -> (unit -> X) -> X)) 
             (x_2100:(int -> (unit -> X) -> X)) (q_1228:int) 
             (k_a4_4649:(unit -> X)) =
    if q_1228 = 0
    then
      x_2096 0 (fun (():unit) -> x_2100 0 k_a4_4649)
    else
      <|fail|> () (fun (():unit) -> _|_)
  in
  let rec f_1229 (n_1230:int) (x_1231:(int -> (unit -> X) -> X)) (q_1232:int) 
                (k_f_4706:(unit -> X)) =
    if n_1230 <= 0
    then
      x_1231 q_1232 k_f_4706
    else
      a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232 k_f_4706
  in
  let h5_1241 (y_1242:int) (k_h5_4839:(unit -> X)) =
    if y_1242 > 0 then k_h5_4839 () else <|fail|> () k_h5_4839
  in
  let m5_1243 (n_1244:int) (k_m5_4857:(unit -> X)) =
    if n_1244 > 0
    then
      h5_1241 (n_1244 + 1) k_m5_4857
    else
      k_m5_4857 ()
  in
  let h6_2731 (z_1249:int) (y_1250:int) (k_h6_4915:(unit -> X)) =
    if y_1250 > z_1249 then k_h6_4915 () else <|fail|> () k_h6_4915
  in
  let m6_1251 (n_1252:int) (k_m6_4934:(unit -> X)) =
    if n_1252 >= 0
    then
      (h6_2731 n_1252) (n_1252 + 1) k_m6_4934
    else
      k_m6_4934 ()
  in
  let rec zip_1253 (x_1254:int) (y_1255:int) 
                  (k_zip_4969:(int -> X)) =
    if x_1254 = 0
    then
      if y_1255 = 0
      then
        k_zip_4969 x_1254
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1255 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1253
          (x_1254 - 1) (y_1255 - 1) 
          (fun (x_5001:int) -> k_zip_4969 (1 + x_5001))
  in
  let rec map_1256 (x_1257:int) (k_map_5028:(int -> X)) =
    if x_1257 = 0
    then
      k_map_5028 x_1257
    else
      map_1256
        (x_1257 - 1) 
        (fun (x_5032:int) -> k_map_5028 (1 + x_5032))
  in
  let f9_1265 (x_1266:int) (y_1267:int) (k_f9_5147:(int -> X)) =
    if x_1266 >= y_1267
    then
      k_f9_5147 x_1266
    else
      k_f9_5147 y_1267
  in
  let rec mc91_1273 (x_1274:int) (k_mc91_5218:(int -> X)) =
    if x_1274 > 100
    then
      k_mc91_5218 (x_1274 - 10)
    else
      mc91_1273
        (x_1274 + 11) 
        (fun (x_5238:int) -> mc91_1273 x_5238 k_mc91_5218)
  in
  let m10_1275 (n_1276:int) (k_m10_5249:(unit -> X)) =
    if n_1276 <= 101
    then
      mc91_1273
        n_1276 
        (fun (x_5252:int) ->
           if x_5252 = 91
           then
             k_m10_5249 ()
           else
             <|fail|> () k_m10_5249)
    else
      k_m10_5249 ()
  in
  let f8_1277 (g_1278:(int -> int -> (int -> X) -> X)) 
             (x_1279:int) (y_1280:int) (k_f8_5289:(int -> X)) =
    g_1278 (x_1279 + 1) (y_1280 + 1) k_f8_5289
  in
  let rec unzip8_1281 (x_1282:int) 
                     (k_1283:(int -> int -> (int -> X) -> X)) 
                     (k_unzip8_5317:(int -> X)) =
    if x_1282 = 0
    then
      k_1283 0 0 k_unzip8_5317
    else
      unzip8_1281 (x_1282 - 1) (f8_1277 k_1283) k_unzip8_5317
  in
  let rec zip8_1284 (x_1285:int) (y_1286:int) 
                   (k_zip8_5380:(int -> X)) =
    if x_1285 = 0
    then
      if y_1286 = 0
      then
        k_zip8_5380 0
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1286 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip8_1284
          (x_1285 - 1) (y_1286 - 1) 
          (fun (x_5412:int) -> k_zip8_5380 (1 + x_5412))
  in
  let rec mult_1289 (n_1290:int) (m_1291:int) 
                   (k_mult_5439:(int -> X)) =
    if n_1290 <= 0 || m_1291 <= 0
    then
      k_mult_5439 0
    else
      mult_1289
        n_1290 (m_1291 - 1) 
        (fun (x_5443:int) -> k_mult_5439 (n_1290 + x_5443))
  in
  let make_array_1294 (n_1295:int) (i_1296:int) 
                     (k_make_array_5499:(int -> X)) =
    let u_2434 (k_make_array_u_5510:(unit -> X)) =
      if 0 <= i_1296 && i_1296 < n_1295
      then
        k_make_array_u_5510 ()
      else
        <|fail|> () k_make_array_u_5510
    in
    u_2434 (fun (():unit) -> k_make_array_5499 0)
  in
  let f20_1306 (x_2480:int) (src_1308:(int -> (int -> X) -> X)) 
              (des_1309:(int -> (int -> X) -> X)) 
              (k_f20_5594:(unit -> X)) =
    let rec bcopy_1310 (des_1313:(int -> (int -> X) -> X)) 
                      (i_1314:int) 
                      (k_f20_bcopy_5604:((int ->
                                            (int -> X) -> X) ->
                                           X)) =
      if i_1314 >= x_2480
      then
        k_f20_bcopy_5604 des_1313
      else
        src_1308
          i_1314 
          (fun (x_5650:int) ->
             des_1313
               i_1314 
               (fun (_:int) ->
                  (fun (des_5683:(int -> (int -> X) -> X)) ->
                     bcopy_1310
                       des_5683 (i_1314 + 1) k_f20_bcopy_5604)
                    (let a_1302 (j_1303:int) 
                               (k_update_a_5547:(int -> X)) =
                       if i_1314 = j_1303
                       then
                         k_update_a_5547 x_5650
                       else
                         des_1313 i_1314 k_update_a_5547
                     in
                     a_1302)))
    in
    let rec print_array_1316 (x_2553:(int -> (int -> X) -> X)) 
                            (i_1319:int) 
                            (k_f20_print_array_5707:(unit -> X)) =
      if i_1319 >= x_2480
      then
        k_f20_print_array_5707 ()
      else
        des_1309
          i_1319 
          (fun (_:int) ->
             (fun (():unit) ->
                print_array_1316
                  x_2553 (i_1319 + 1) k_f20_print_array_5707)
               ())
    in
    bcopy_1310
      des_1309 0 
      (fun (array_5810:(int -> (int -> X) -> X)) ->
         print_array_1316 array_5810 0 k_f20_5594)
  in
  let m12_1321 (n_1322:int) (k_m12_5844:(unit -> X)) =
    if n_1322 > 0
    then
      f20_1306
        n_1322 (make_array_1294 n_1322) 
        (make_array_1294 n_1322) k_m12_5844
    else
      k_m12_5844 ()
  in
  let lock_1325 (st_1326:int) (k_lock_5911:(int -> X)) =
    let u_2610 (k_lock_u_5922:(unit -> X)) =
      if st_1326 = 0
      then
        k_lock_u_5922 ()
      else
        <|fail|> () k_lock_u_5922
    in
    u_2610 (fun (():unit) -> k_lock_5911 1)
  in
  let unlock_1327 (st_1328:int) (k_unlock_5932:(int -> X)) =
    let u_2615 (k_unlock_u_5943:(unit -> X)) =
      if st_1328 = 1
      then
        k_unlock_u_5943 ()
      else
        <|fail|> () k_unlock_u_5943
    in
    u_2615 (fun (():unit) -> k_unlock_5932 0)
  in
  let f13_1329 (n_1330:int) (st_1331:int) 
              (k_f13_5953:(int -> X)) =
    if n_1330 > 0
    then
      lock_1325 st_1331 k_f13_5953
    else
      k_f13_5953 st_1331
  in
  let g13_1332 (n_1333:int) (st_1334:int) 
              (k_g13_5975:(int -> X)) =
    if n_1333 > 0
    then
      unlock_1327 st_1334 k_g13_5975
    else
      k_g13_5975 st_1334
  in
  let rec sum_1337 (n_1338:int) (k_sum_6041:(int -> X)) =
    if n_1338 <= 0
    then
      k_sum_6041 0
    else
      sum_1337
        (n_1338 - 1) 
        (fun (x_6045:int) -> k_sum_6041 (n_1338 + x_6045))
  in
  let rec mult_1341 (n_1342:int) (m_1343:int) 
                   (k_mult_6098:(int -> X)) =
    if n_1342 <= 0 || m_1343 <= 0
    then
      k_mult_6098 0
    else
      mult_1341
        n_1342 (m_1343 - 1) 
        (fun (x_6102:int) -> k_mult_6098 (n_1342 + x_6102))
  in
  let main_1346 (n_1347:int) (m_1348:int) 
               (k_main_6158:(unit -> X)) =
    if n_1347 = 1
    then
      copy_1199
        m_1348 
        (fun (x_4379:int) ->
           copy_1199
             x_4379 
             (fun (x_4358:int) ->
                if x_4358 = m_1348
                then
                  k_main_6158 ()
                else
                  <|fail|> () k_main_6158))
    else
      if n_1347 = 2
      then
        m2_1210 m_1348 k_main_6158
      else
        if n_1347 = 3
        then
          f3_1213 m_1348 g3_1216 k_main_6158
        else
          if n_1347 = 4
          then
            f_1229 m_1348 c4_1220 0 k_main_6158
          else
            if n_1347 = 5
            then
              m5_1243 m_1348 k_main_6158
            else
              if n_1347 = 6
              then
                m6_1251 m_1348 k_main_6158
              else
                if n_1347 = 7
                then
                  zip_1253
                    m_1348 m_1348 
                    (fun (x_5078:int) ->
                       map_1256
                         x_5078 
                         (fun (x_5056:int) ->
                            if x_5056 = m_1348
                            then
                              k_main_6158 ()
                            else
                              <|fail|> () k_main_6158))
                else
                  if n_1347 = 9
                  then
                    f9_1265
                      m_1348 m_1348 
                      (fun (x_5126:int) ->
                         f9_1265
                           x_5126 m_1348 
                           (fun (m_5209:int) ->
                              f9_1265
                                m_1348 m_5209 
                                (fun (x_5185:int) ->
                                   if x_5185 = m_5209
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)))
                  else
                    if n_1347 = 10
                    then
                      m10_1275 m_1348 k_main_6158
                    else
                      if n_1347 = 11
                      then
                        mult_1289
                          m_1348 m_1348 
                          (fun (x_5470:int) ->
                             if m_1348 <= x_5470
                             then
                               k_main_6158 ()
                             else
                               <|fail|> () k_main_6158)
                      else
                        if n_1347 = 12
                        then
                          m12_1321 m_1348 k_main_6158
                        else
                          if n_1347 = 13
                          then
                            f13_1329
                              m_1348 0 
                              (fun (x_6023:int) ->
                                 g13_1332
                                   m_1348 x_6023 
                                   (fun (x_6000:int) ->
                                      if x_6000 = 0
                                      then
                                        k_main_6158 ()
                                      else
                                        <|fail|> () k_main_6158))
                          else
                            if n_1347 = 14
                            then
                              sum_1337
                                m_1348 
                                (fun (x_6070:int) ->
                                   if m_1348 <= x_6070
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)
                            else
                              mult_1341
                                m_1348 m_1348 
                                (fun (x_6129:int) ->
                                   if m_1348 + 1 <= x_6129
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)
  in
  let main_2730 (k_main_6360:(unit -> X)) =
    let arg1_2726 (k_main_arg1_6365:(int -> X)) =
      rand_int_cps () k_main_arg1_6365
    in
    arg1_2726
      (fun (arg1_6395:int) ->
         let arg2_2728 (k_main_arg2_6377:(int -> X)) =
           rand_int_cps () k_main_arg2_6377
         in
         arg2_2728
           (fun (arg2_6394:int) ->
              main_1346 arg1_6395 arg2_6394 k_main_6360))
  in
  main_2730 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec copy_1199 (x_1200:int) (k_copy_4330:(int -> X)) =
    if x_1200 = 0 then k_copy_4330 0 else copy_1199 (x_1200 - 1) (fun (x_4334:int) -> k_copy_4330 (1 + x_4334))
  in
  let rec fact_1203 (n_1204:int) (exn_1205:(int -> (int -> X) -> X)) (k_fact_4400:(int -> X)) =
    if n_1204 <= 0
    then
      exn_1205 0 k_fact_4400
    else
      let exn_1206 (n_1207:int) (k_fact_exn_4414:(int -> X)) =
        if n_1207 = 0 then k_fact_exn_4414 1 else exn_1205 n_1207 k_fact_exn_4414
      in
      fact_1203 (n_1204 - 1) exn_1206 (fun (x_4435:int) -> k_fact_4400 (n_1204 * x_4435))
  in
  let exn_2732 (_:int) (_:(int -> X)) = <|fail|> () (fun (():unit) -> _|_) in
  let m2_1210 (n_1211:int) (k_m2_4499:(unit -> X)) =
    if n_1211 > 0 then fact_1203 n_1211 exn_2732 (fun (_:int) -> k_m2_4499 ()) else k_m2_4499 ()
  in
  let f3_1213 (n_1214:int) (k_1215:(int -> (unit -> X) -> X)) (k_f3_4539:(unit -> X)) =
    if n_1214 >= 0 then k_f3_4539 () else k_1215 0 k_f3_4539
  in
  let g3_1216 (n_1217:int) (k_g3_4564:(unit -> X)) =
    if n_1217 = 0 then k_g3_4564 () else <|fail|> () k_g3_4564
  in
  let c4_1220 (_:int) (k_c4_4612:(unit -> X)) = k_c4_4612 () in
  let b4_1222 (x_1223:(int -> (unit -> X) -> X)) (_:int) 
             (k_b4_4622:(unit -> X)) = x_1223 1 k_b4_4622
  in
  let a4_1225 (x_2096:(int -> (unit -> X) -> X)) 
             (x_2100:(int -> (unit -> X) -> X)) (q_1228:int) 
             (k_a4_4649:(unit -> X)) =
    if q_1228 = 0
    then
      x_2096 0 (fun (():unit) -> x_2100 0 k_a4_4649)
    else
      <|fail|> () (fun (():unit) -> _|_)
  in
  let rec f_1229 (n_1230:int) (x_1231:(int -> (unit -> X) -> X)) (q_1232:int) 
                (k_f_4706:(unit -> X)) =
    if n_1230 <= 0
    then
      x_1231 q_1232 k_f_4706
    else
      a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232 k_f_4706
  in
  let h5_1241 (y_1242:int) (k_h5_4839:(unit -> X)) =
    if y_1242 > 0 then k_h5_4839 () else <|fail|> () k_h5_4839
  in
  let m5_1243 (n_1244:int) (k_m5_4857:(unit -> X)) =
    if n_1244 > 0
    then
      h5_1241 (n_1244 + 1) k_m5_4857
    else
      k_m5_4857 ()
  in
  let h6_2731 (z_1249:int) (y_1250:int) (k_h6_4915:(unit -> X)) =
    if y_1250 > z_1249 then k_h6_4915 () else <|fail|> () k_h6_4915
  in
  let m6_1251 (n_1252:int) (k_m6_4934:(unit -> X)) =
    if n_1252 >= 0
    then
      h6_2731 n_1252 (n_1252 + 1) k_m6_4934
    else
      k_m6_4934 ()
  in
  let rec zip_1253 (x_1254:int) (y_1255:int) 
                  (k_zip_4969:(int -> X)) =
    if x_1254 = 0
    then
      if y_1255 = 0
      then
        k_zip_4969 x_1254
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1255 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1253
          (x_1254 - 1) (y_1255 - 1) 
          (fun (x_5001:int) -> k_zip_4969 (1 + x_5001))
  in
  let rec map_1256 (x_1257:int) (k_map_5028:(int -> X)) =
    if x_1257 = 0
    then
      k_map_5028 x_1257
    else
      map_1256
        (x_1257 - 1) 
        (fun (x_5032:int) -> k_map_5028 (1 + x_5032))
  in
  let f9_1265 (x_1266:int) (y_1267:int) (k_f9_5147:(int -> X)) =
    if x_1266 >= y_1267
    then
      k_f9_5147 x_1266
    else
      k_f9_5147 y_1267
  in
  let rec mc91_1273 (x_1274:int) (k_mc91_5218:(int -> X)) =
    if x_1274 > 100
    then
      k_mc91_5218 (x_1274 - 10)
    else
      mc91_1273
        (x_1274 + 11) 
        (fun (x_5238:int) -> mc91_1273 x_5238 k_mc91_5218)
  in
  let m10_1275 (n_1276:int) (k_m10_5249:(unit -> X)) =
    if n_1276 <= 101
    then
      mc91_1273
        n_1276 
        (fun (x_5252:int) ->
           if x_5252 = 91
           then
             k_m10_5249 ()
           else
             <|fail|> () k_m10_5249)
    else
      k_m10_5249 ()
  in
  let f8_1277 (g_1278:(int -> int -> (int -> X) -> X)) 
             (x_1279:int) (y_1280:int) (k_f8_5289:(int -> X)) =
    g_1278 (x_1279 + 1) (y_1280 + 1) k_f8_5289
  in
  let rec unzip8_1281 (x_1282:int) 
                     (k_1283:(int -> int -> (int -> X) -> X)) 
                     (k_unzip8_5317:(int -> X)) =
    if x_1282 = 0
    then
      k_1283 0 0 k_unzip8_5317
    else
      unzip8_1281 (x_1282 - 1) (f8_1277 k_1283) k_unzip8_5317
  in
  let rec zip8_1284 (x_1285:int) (y_1286:int) 
                   (k_zip8_5380:(int -> X)) =
    if x_1285 = 0
    then
      if y_1286 = 0
      then
        k_zip8_5380 0
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1286 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip8_1284
          (x_1285 - 1) (y_1286 - 1) 
          (fun (x_5412:int) -> k_zip8_5380 (1 + x_5412))
  in
  let rec mult_1289 (n_1290:int) (m_1291:int) 
                   (k_mult_5439:(int -> X)) =
    if n_1290 <= 0 || m_1291 <= 0
    then
      k_mult_5439 0
    else
      mult_1289
        n_1290 (m_1291 - 1) 
        (fun (x_5443:int) -> k_mult_5439 (n_1290 + x_5443))
  in
  let make_array_1294 (n_1295:int) (i_1296:int) 
                     (k_make_array_5499:(int -> X)) =
    let u_2434 (k_make_array_u_5510:(unit -> X)) =
      if 0 <= i_1296 && i_1296 < n_1295
      then
        k_make_array_u_5510 ()
      else
        <|fail|> () k_make_array_u_5510
    in
    u_2434 (fun (():unit) -> k_make_array_5499 0)
  in
  let f20_1306 (x_2480:int) (src_1308:(int -> (int -> X) -> X)) 
              (des_1309:(int -> (int -> X) -> X)) 
              (k_f20_5594:(unit -> X)) =
    let rec bcopy_1310 (des_1313:(int -> (int -> X) -> X)) 
                      (i_1314:int) 
                      (k_f20_bcopy_5604:((int ->
                                            (int -> X) -> X) ->
                                           X)) =
      if i_1314 >= x_2480
      then
        k_f20_bcopy_5604 des_1313
      else
        src_1308
          i_1314 
          (fun (x_5650:int) ->
             des_1313
               i_1314 
               (fun (_:int) ->
                  (fun (des_5683:(int -> (int -> X) -> X)) ->
                     bcopy_1310
                       des_5683 (i_1314 + 1) k_f20_bcopy_5604)
                    (let a_1302 (j_1303:int) 
                               (k_update_a_5547:(int -> X)) =
                       if i_1314 = j_1303
                       then
                         k_update_a_5547 x_5650
                       else
                         des_1313 i_1314 k_update_a_5547
                     in
                     a_1302)))
    in
    let rec print_array_1316 (x_2553:(int -> (int -> X) -> X)) 
                            (i_1319:int) 
                            (k_f20_print_array_5707:(unit -> X)) =
      if i_1319 >= x_2480
      then
        k_f20_print_array_5707 ()
      else
        des_1309
          i_1319 
          (fun (_:int) ->
             print_array_1316
               x_2553 (i_1319 + 1) k_f20_print_array_5707)
    in
    bcopy_1310
      des_1309 0 
      (fun (array_5810:(int -> (int -> X) -> X)) ->
         print_array_1316 array_5810 0 k_f20_5594)
  in
  let m12_1321 (n_1322:int) (k_m12_5844:(unit -> X)) =
    if n_1322 > 0
    then
      f20_1306
        n_1322 (make_array_1294 n_1322) 
        (make_array_1294 n_1322) k_m12_5844
    else
      k_m12_5844 ()
  in
  let lock_1325 (st_1326:int) (k_lock_5911:(int -> X)) =
    let u_2610 (k_lock_u_5922:(unit -> X)) =
      if st_1326 = 0
      then
        k_lock_u_5922 ()
      else
        <|fail|> () k_lock_u_5922
    in
    u_2610 (fun (():unit) -> k_lock_5911 1)
  in
  let unlock_1327 (st_1328:int) (k_unlock_5932:(int -> X)) =
    let u_2615 (k_unlock_u_5943:(unit -> X)) =
      if st_1328 = 1
      then
        k_unlock_u_5943 ()
      else
        <|fail|> () k_unlock_u_5943
    in
    u_2615 (fun (():unit) -> k_unlock_5932 0)
  in
  let f13_1329 (n_1330:int) (st_1331:int) 
              (k_f13_5953:(int -> X)) =
    if n_1330 > 0
    then
      lock_1325 st_1331 k_f13_5953
    else
      k_f13_5953 st_1331
  in
  let g13_1332 (n_1333:int) (st_1334:int) 
              (k_g13_5975:(int -> X)) =
    if n_1333 > 0
    then
      unlock_1327 st_1334 k_g13_5975
    else
      k_g13_5975 st_1334
  in
  let rec sum_1337 (n_1338:int) (k_sum_6041:(int -> X)) =
    if n_1338 <= 0
    then
      k_sum_6041 0
    else
      sum_1337
        (n_1338 - 1) 
        (fun (x_6045:int) -> k_sum_6041 (n_1338 + x_6045))
  in
  let rec mult_1341 (n_1342:int) (m_1343:int) 
                   (k_mult_6098:(int -> X)) =
    if n_1342 <= 0 || m_1343 <= 0
    then
      k_mult_6098 0
    else
      mult_1341
        n_1342 (m_1343 - 1) 
        (fun (x_6102:int) -> k_mult_6098 (n_1342 + x_6102))
  in
  let main_1346 (n_1347:int) (m_1348:int) 
               (k_main_6158:(unit -> X)) =
    if n_1347 = 1
    then
      copy_1199
        m_1348 
        (fun (x_4379:int) ->
           copy_1199
             x_4379 
             (fun (x_4358:int) ->
                if x_4358 = m_1348
                then
                  k_main_6158 ()
                else
                  <|fail|> () k_main_6158))
    else
      if n_1347 = 2
      then
        m2_1210 m_1348 k_main_6158
      else
        if n_1347 = 3
        then
          f3_1213 m_1348 g3_1216 k_main_6158
        else
          if n_1347 = 4
          then
            f_1229 m_1348 c4_1220 0 k_main_6158
          else
            if n_1347 = 5
            then
              m5_1243 m_1348 k_main_6158
            else
              if n_1347 = 6
              then
                m6_1251 m_1348 k_main_6158
              else
                if n_1347 = 7
                then
                  zip_1253
                    m_1348 m_1348 
                    (fun (x_5078:int) ->
                       map_1256
                         x_5078 
                         (fun (x_5056:int) ->
                            if x_5056 = m_1348
                            then
                              k_main_6158 ()
                            else
                              <|fail|> () k_main_6158))
                else
                  if n_1347 = 9
                  then
                    f9_1265
                      m_1348 m_1348 
                      (fun (x_5126:int) ->
                         f9_1265
                           x_5126 m_1348 
                           (fun (m_5209:int) ->
                              f9_1265
                                m_1348 m_5209 
                                (fun (x_5185:int) ->
                                   if x_5185 = m_5209
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)))
                  else
                    if n_1347 = 10
                    then
                      m10_1275 m_1348 k_main_6158
                    else
                      if n_1347 = 11
                      then
                        mult_1289
                          m_1348 m_1348 
                          (fun (x_5470:int) ->
                             if m_1348 <= x_5470
                             then
                               k_main_6158 ()
                             else
                               <|fail|> () k_main_6158)
                      else
                        if n_1347 = 12
                        then
                          m12_1321 m_1348 k_main_6158
                        else
                          if n_1347 = 13
                          then
                            f13_1329
                              m_1348 0 
                              (fun (x_6023:int) ->
                                 g13_1332
                                   m_1348 x_6023 
                                   (fun (x_6000:int) ->
                                      if x_6000 = 0
                                      then
                                        k_main_6158 ()
                                      else
                                        <|fail|> () k_main_6158))
                          else
                            if n_1347 = 14
                            then
                              sum_1337
                                m_1348 
                                (fun (x_6070:int) ->
                                   if m_1348 <= x_6070
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)
                            else
                              mult_1341
                                m_1348 m_1348 
                                (fun (x_6129:int) ->
                                   if m_1348 + 1 <= x_6129
                                   then
                                     k_main_6158 ()
                                   else
                                     <|fail|> () k_main_6158)
  in
  let main_2730 (k_main_6360:(unit -> X)) =
    let arg1_2726 (k_main_arg1_6365:(int -> X)) =
      rand_int_cps () k_main_arg1_6365
    in
    arg1_2726
      (fun (arg1_6395:int) ->
         let arg2_2728 (k_main_arg2_6377:(int -> X)) =
           rand_int_cps () k_main_arg2_6377
         in
         arg2_2728
           (fun (arg2_6394:int) ->
              main_1346 arg1_6395 arg2_6394 k_main_6360))
  in
  main_2730 (fun (():unit) -> {end}) # [ACPS])


Fatal error: out of memory.
100.947

/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 200_5-e.ml

parsed:
 let rec zip_1199 x_1200 y_1201 =
   if x_1200 = 0
   then
     if y_1201 = 0 then x_1200 else assert false
   else
     if y_1201 = 0 then assert false else 1 + zip_1199 (x_1200 - 1) (y_1201 - 1)
 in
 let rec map_1202 x_1203 = if x_1203 = 0 then x_1203 else 1 + map_1202 (x_1203 - 1) in
 let m7_1204 n_1205 = assert (map_1202 (zip_1199 n_1205 n_1205) = n_1205) in
 let max_1206 max2_1207 x_2053 x_2055 x_2056 = max2_1207 (max2_1207 x_2053 x_2055) x_2056 in
 let f9_1211 x_1212 y_1213 = if x_1212 >= y_1213 then x_1212 else y_1213 in
 let m9_1214 x_2075 y_1216 z_1217 =
   let m_1218 = max_1206 f9_1211 x_2075 y_1216 z_1217 in
   assert (f9_1211 x_2075 m_1218 = m_1218)
 in
 let f8_1219 g_1220 x_1221 y_1222 = g_1220 (x_1221 + 1) (y_1222 + 1) in
 let rec unzip8_1223 x_1224 k_1225 =
   if x_1224 = 0 then k_1225 0 0 else unzip8_1223 (x_1224 - 1) (f8_1219 k_1225)
 in
 let rec zip8_1226 x_1227 y_1228 =
   if x_1227 = 0
   then
     if y_1228 = 0 then 0 else assert false
   else
     if y_1228 = 0
     then
       assert false
     else
       1 + zip8_1226 (x_1227 - 1) (y_1228 - 1)
 in
 let m8_1229 n_1230 = unzip8_1223 n_1230 zip8_1226 in
 let rec mult_1231 n_1232 m_1233 =
   if n_1232 <= 0 || m_1233 <= 0
   then
     0
   else
     n_1232 + mult_1231 n_1232 (m_1233 - 1)
 in
 let m11_1234 n_1235 = assert (n_1235 <= mult_1231 n_1235 n_1235) in
 let make_array_1236 n_1237 i_1238 =
   assert (0 <= i_1238 && i_1238 < n_1237); 0
 in
 let update_1239 x_2219 _ des_1242 x_1243 =
   let u_2240 = des_1242 x_2219 in
   let a_1244 j_1245 =
     if x_2219 = j_1245 then x_1243 else des_1242 x_2219
   in
   a_1244
 in
 let print_int_1246 _ = () in
 let f20_1248 x_2253 src_1250 des_1251 =
   let rec bcopy_1252 x_2273 src_1254 des_1255 i_1256 =
     if i_1256 >= x_2273
     then
       des_1255
     else
       let des_1257 =
         update_1239 i_1256 x_2273 des_1255 (src_1254 i_1256)
       in
       bcopy_1252 x_2273 src_1254 des_1257 (i_1256 + 1)
   in
   let rec print_array_1258 m_1259 x_2326 i_1261 =
     if i_1261 >= m_1259
     then
       ()
     else
       print_int_1246 (des_1251 i_1261);
       print_array_1258 m_1259 x_2326 (i_1261 + 1)
   in
   let array_1262 = bcopy_1252 x_2253 src_1250 des_1251 0 in
   print_array_1258 x_2253 array_1262 0
 in
 let m12_1263 n_1264 =
   let array1_1265 = make_array_1236 n_1264 in
   let array2_1266 = make_array_1236 n_1264 in
   if n_1264 > 0 then f20_1248 n_1264 array1_1265 array2_1266
 in
 let lock_1267 st_1268 = assert (st_1268 = 0); 1 in
 let unlock_1269 st_1270 = assert (st_1270 = 1); 0 in
 let f13_1271 n_1272 st_1273 =
   if n_1272 > 0 then lock_1267 st_1273 else st_1273
 in
 let g13_1274 n_1275 st_1276 =
   if n_1275 > 0
   then
     unlock_1269 st_1276
   else
     st_1276
 in
 let m13_1277 n_1278 =
   assert (g13_1274 n_1278 (f13_1271 n_1278 0) = 0)
 in
 let rec sum_1279 n_1280 =
   if n_1280 <= 0
   then
     0
   else
     n_1280 + sum_1279 (n_1280 - 1)
 in
 let m14_1281 n_1282 =
   assert (n_1282 <= sum_1279 n_1282)
 in
 let rec mult_1283 n_1284 m_1285 =
   if n_1284 <= 0 || m_1285 <= 0
   then
     0
   else
     n_1284 + mult_1283 n_1284 (m_1285 - 1)
 in
 let m15_1286 n_1287 =
   assert (n_1287 + 1 <= mult_1283 n_1287 n_1287)
 in
 let succ_1288 x_1289 = x_1289 + 1 in
 let rec repeat_1290 x_2463 n_1292 s_1293 =
   if n_1292 = 0
   then
     s_1293
   else
     x_2463
       (repeat_1290 x_2463 (n_1292 - 1) s_1293)
 in
 let m16_1294 n_1295 =
   assert (repeat_1290 succ_1288 n_1295 0 > n_1295)
 in
 let lock_1296 st_1297 = assert (st_1297 = 0); 1 in
 let unlock_1298 st_1299 = assert (st_1299 = 1); 0 in
 let f17_1300 n_1301 st_1302 =
   if n_1301 > 0
   then
     lock_1296 st_1302
   else
     st_1302
 in
 let g17_1303 n_1304 st_1305 =
   if n_1304 >= 0
   then
     unlock_1298 st_1305
   else
     st_1305
 in
 let m17_1306 n_1307 =
   assert (g17_1303 n_1307 (f17_1300 n_1307 0) = 0)
 in
 let rec sum_1308 n_1309 =
   if n_1309 <= 0
   then
     0
   else
     n_1309 + sum_1308 (n_1309 - 1)
 in
 let m18_1310 n_1311 =
   assert (n_1311 + 1 <= sum_1308 n_1311)
 in
 let make_array21_1312 n_1313 i_1314 =
   assert (0 <= i_1314 && i_1314 < n_1313); 0
 in
 let update21_1315 i_1316 a_1317 x_1318 j_1319 =
   if j_1319 > i_1316 - 1 && j_1319 <= i_1316
   then
     x_1318
   else
     a_1317 j_1319
 in
 let rec init_1320 i_1321 n_1322 a_1323 =
   if i_1321 >= n_1322
   then
     a_1323
   else
     init_1320
       (i_1321 + 1) n_1322 
       (update21_1315 i_1321 a_1323 1)
 in
 let m21_1324 k_1325 n_1326 i_1327 =
   if k_1325 >= 0 && k_1325 <= 0
   then
     let x_1328 =
       init_1320
         k_1325 n_1326 (make_array21_1312 n_1326)
     in
     if 0 <= i_1327 && i_1327 < n_1326
     then
       assert (x_1328 i_1327 >= 1)
 in
 let make_array23_1329 n_1330 i_1331 =
   n_1330 - i_1331
 in
 let rec array_max23_1332 x_2665 i_1334 x_2672 
                         m_1336 =
   if i_1334 >= x_2665
   then
     m_1336
   else
     let x_1337 = x_2672 i_1334 in
     let z_1338 =
       if x_1337 > m_1336
       then
         x_1337
       else
         m_1336
     in
     array_max23_1332
       x_2665 (i_1334 + 1) x_2672 z_1338
 in
 let m23_1339 n_1340 i_1341 =
   if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
   then
     let m_1342 =
       array_max23_1332
         n_1340 i_1341 (make_array23_1329 n_1340) 
         (-1)
     in
     assert (m_1342 >= n_1340)
 in
 let main_1343 n_1344 m_1345 =
   if n_1344 = 7
   then
     m7_1204 m_1345
   else
     if n_1344 = 9
     then
       m9_1214 m_1345 m_1345 m_1345
     else
       if n_1344 = 11
       then
         m11_1234 m_1345
       else
         if n_1344 = 12
         then
           m12_1263 m_1345
         else
           if n_1344 = 13
           then
             m13_1277 m_1345
           else
             if n_1344 = 14
             then
               m14_1281 m_1345
             else
               if n_1344 = 15
               then
                 m15_1286 m_1345
               else
                 if n_1344 = 16
                 then
                   m16_1294 m_1345
                 else
                   if n_1344 = 17
                   then
                     m17_1306 m_1345
                   else
                     if n_1344 = 18
                     then
                       m18_1310 m_1345
                     else
                       if n_1344 = 21
                       then
                         m21_1324
                           m_1345 m_1345 m_1345
                       else
                         m23_1339 m_1345 m_1345
 in
 ()


###set_main:
 let rec zip_1199 (x_1200:int) (y_1201:int) =
   if x_1200 = 0
   then
     if y_1201 = 0 then x_1200 else assert false
   else
     if y_1201 = 0 then assert false else 1 + zip_1199 (x_1200 - 1) (y_1201 - 1)
 in
 let rec map_1202 (x_1203:int) = if x_1203 = 0 then x_1203 else 1 + map_1202 (x_1203 - 1) in
 let m7_1204 (n_1205:int) = assert (map_1202 (zip_1199 n_1205 n_1205) = n_1205) in
 let max_1206 (max2_1207:(int -> int -> int)) (x_2053:int) (x_2055:int) (x_2056:int) =
   max2_1207 (max2_1207 x_2053 x_2055) x_2056
 in
 let f9_1211 (x_1212:int) (y_1213:int) = if x_1212 >= y_1213 then x_1212 else y_1213 in
 let m9_1214 (x_2075:int) (y_1216:int) (z_1217:int) =
   let m_1218 = max_1206 f9_1211 x_2075 y_1216 z_1217 in
   assert (f9_1211 x_2075 m_1218 = m_1218)
 in
 let f8_1219 (g_1220:(int -> int -> int)) (x_1221:int) (y_1222:int) =
   g_1220 (x_1221 + 1) (y_1222 + 1)
 in
 let rec unzip8_1223 (x_1224:int) (k_1225:(int -> int -> int)) =
   if x_1224 = 0 then k_1225 0 0 else unzip8_1223 (x_1224 - 1) (f8_1219 k_1225)
 in
 let rec zip8_1226 (x_1227:int) (y_1228:int) =
   if x_1227 = 0
   then
     if y_1228 = 0 then 0 else assert false
   else
     if y_1228 = 0
     then
       assert false
     else
       1 + zip8_1226 (x_1227 - 1) (y_1228 - 1)
 in
 let m8_1229 (n_1230:int) = unzip8_1223 n_1230 zip8_1226 in
 let rec mult_1231 (n_1232:int) (m_1233:int) =
   if n_1232 <= 0 || m_1233 <= 0
   then
     0
   else
     n_1232 + mult_1231 n_1232 (m_1233 - 1)
 in
 let m11_1234 (n_1235:int) = assert (n_1235 <= mult_1231 n_1235 n_1235) in
 let make_array_1236 (n_1237:int) (i_1238:int) =
   assert (0 <= i_1238 && i_1238 < n_1237); 0
 in
 let update_1239 (x_2219:int) (_:int) (des_1242:(int -> int)) 
                (x_1243:int) =
   let u_2240 = des_1242 x_2219 in
   let a_1244 (j_1245:int) =
     if x_2219 = j_1245 then x_1243 else des_1242 x_2219
   in
   a_1244
 in
 let print_int_1246 (_:int) = () in
 let f20_1248 (x_2253:int) (src_1250:(int -> int)) 
             (des_1251:(int -> int)) =
   let rec bcopy_1252 (x_2273:int) (src_1254:(int -> int)) 
                     (des_1255:(int -> int)) (i_1256:int) =
     if i_1256 >= x_2273
     then
       des_1255
     else
       let des_1257 =
         update_1239 i_1256 x_2273 des_1255 (src_1254 i_1256)
       in
       bcopy_1252 x_2273 src_1254 des_1257 (i_1256 + 1)
   in
   let rec print_array_1258 (m_1259:int) (x_2326:(int -> int)) 
                           (i_1261:int) =
     if i_1261 >= m_1259
     then
       ()
     else
       print_int_1246 (des_1251 i_1261);
       print_array_1258 m_1259 x_2326 (i_1261 + 1)
   in
   let array_1262 = bcopy_1252 x_2253 src_1250 des_1251 0 in
   print_array_1258 x_2253 array_1262 0
 in
 let m12_1263 (n_1264:int) =
   let array1_1265 = make_array_1236 n_1264 in
   let array2_1266 = make_array_1236 n_1264 in
   if n_1264 > 0 then f20_1248 n_1264 array1_1265 array2_1266
 in
 let lock_1267 (st_1268:int) = assert (st_1268 = 0); 1 in
 let unlock_1269 (st_1270:int) = assert (st_1270 = 1); 0 in
 let f13_1271 (n_1272:int) (st_1273:int) =
   if n_1272 > 0 then lock_1267 st_1273 else st_1273
 in
 let g13_1274 (n_1275:int) (st_1276:int) =
   if n_1275 > 0
   then
     unlock_1269 st_1276
   else
     st_1276
 in
 let m13_1277 (n_1278:int) =
   assert (g13_1274 n_1278 (f13_1271 n_1278 0) = 0)
 in
 let rec sum_1279 (n_1280:int) =
   if n_1280 <= 0
   then
     0
   else
     n_1280 + sum_1279 (n_1280 - 1)
 in
 let m14_1281 (n_1282:int) =
   assert (n_1282 <= sum_1279 n_1282)
 in
 let rec mult_1283 (n_1284:int) (m_1285:int) =
   if n_1284 <= 0 || m_1285 <= 0
   then
     0
   else
     n_1284 + mult_1283 n_1284 (m_1285 - 1)
 in
 let m15_1286 (n_1287:int) =
   assert (n_1287 + 1 <= mult_1283 n_1287 n_1287)
 in
 let succ_1288 (x_1289:int) = x_1289 + 1 in
 let rec repeat_1290 (x_2463:(int -> int)) 
                    (n_1292:int) (s_1293:int) =
   if n_1292 = 0
   then
     s_1293
   else
     x_2463
       (repeat_1290 x_2463 (n_1292 - 1) s_1293)
 in
 let m16_1294 (n_1295:int) =
   assert (repeat_1290 succ_1288 n_1295 0 > n_1295)
 in
 let lock_1296 (st_1297:int) =
   assert (st_1297 = 0); 1
 in
 let unlock_1298 (st_1299:int) =
   assert (st_1299 = 1); 0
 in
 let f17_1300 (n_1301:int) (st_1302:int) =
   if n_1301 > 0
   then
     lock_1296 st_1302
   else
     st_1302
 in
 let g17_1303 (n_1304:int) (st_1305:int) =
   if n_1304 >= 0
   then
     unlock_1298 st_1305
   else
     st_1305
 in
 let m17_1306 (n_1307:int) =
   assert (g17_1303 n_1307 (f17_1300 n_1307 0) = 0)
 in
 let rec sum_1308 (n_1309:int) =
   if n_1309 <= 0
   then
     0
   else
     n_1309 + sum_1308 (n_1309 - 1)
 in
 let m18_1310 (n_1311:int) =
   assert (n_1311 + 1 <= sum_1308 n_1311)
 in
 let make_array21_1312 (n_1313:int) (i_1314:int) =
   assert (0 <= i_1314 && i_1314 < n_1313); 0
 in
 let update21_1315 (i_1316:int) 
                  (a_1317:(int -> int)) 
                  (x_1318:int) (j_1319:int) =
   if j_1319 > i_1316 - 1 && j_1319 <= i_1316
   then
     x_1318
   else
     a_1317 j_1319
 in
 let rec init_1320 (i_1321:int) (n_1322:int) 
                  (a_1323:(int -> int)) =
   if i_1321 >= n_1322
   then
     a_1323
   else
     init_1320
       (i_1321 + 1) n_1322 
       (update21_1315 i_1321 a_1323 1)
 in
 let m21_1324 (k_1325:int) (n_1326:int) 
             (i_1327:int) =
   if k_1325 >= 0 && k_1325 <= 0
   then
     let x_1328 =
       init_1320
         k_1325 n_1326 (make_array21_1312 n_1326)
     in
     if 0 <= i_1327 && i_1327 < n_1326
     then
       assert (x_1328 i_1327 >= 1)
 in
 let make_array23_1329 (n_1330:int) (i_1331:int) =
   n_1330 - i_1331
 in
 let rec array_max23_1332 (x_2665:int) (i_1334:int) 
                         (x_2672:(int -> int)) 
                         (m_1336:int) =
   if i_1334 >= x_2665
   then
     m_1336
   else
     let x_1337 = x_2672 i_1334 in
     let z_1338 =
       if x_1337 > m_1336
       then
         x_1337
       else
         m_1336
     in
     array_max23_1332
       x_2665 (i_1334 + 1) x_2672 z_1338
 in
 let m23_1339 (n_1340:int) (i_1341:int) =
   if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
   then
     let m_1342 =
       array_max23_1332
         n_1340 i_1341 (make_array23_1329 n_1340) 
         (-1)
     in
     assert (m_1342 >= n_1340)
 in
 let main_1343 (n_1344:int) (m_1345:int) =
   if n_1344 = 7
   then
     m7_1204 m_1345
   else
     if n_1344 = 9
     then
       m9_1214 m_1345 m_1345 m_1345
     else
       if n_1344 = 11
       then
         m11_1234 m_1345
       else
         if n_1344 = 12
         then
           m12_1263 m_1345
         else
           if n_1344 = 13
           then
             m13_1277 m_1345
           else
             if n_1344 = 14
             then
               m14_1281 m_1345
             else
               if n_1344 = 15
               then
                 m15_1286 m_1345
               else
                 if n_1344 = 16
                 then
                   m16_1294 m_1345
                 else
                   if n_1344 = 17
                   then
                     m17_1306 m_1345
                   else
                     if n_1344 = 18
                     then
                       m18_1310 m_1345
                     else
                       if n_1344 = 21
                       then
                         m21_1324
                           m_1345 m_1345 m_1345
                       else
                         m23_1339 m_1345 m_1345
 in
 (let arg1_2758 = rand_int () in
  let arg2_2760 = rand_int () in
  main_1343 arg1_2758 arg2_2760);
 ()

###Beta_reduce_trivial:
 let rec zip_1199 (x_1200:int) (y_1201:int) =
   if x_1200 = 0
   then
     if y_1201 = 0 then x_1200 else assert false
   else
     if y_1201 = 0 then assert false else 1 + zip_1199 (x_1200 - 1) (y_1201 - 1)
 in
 let rec map_1202 (x_1203:int) = if x_1203 = 0 then x_1203 else 1 + map_1202 (x_1203 - 1) in
 let m7_1204 (n_1205:int) = assert (map_1202 (zip_1199 n_1205 n_1205) = n_1205) in
 let max_1206 (max2_1207:(int -> int -> int)) (x_2053:int) (x_2055:int) (x_2056:int) =
   max2_1207 (max2_1207 x_2053 x_2055) x_2056
 in
 let f9_1211 (x_1212:int) (y_1213:int) = if x_1212 >= y_1213 then x_1212 else y_1213 in
 let m9_1214 (x_2075:int) (y_1216:int) (z_1217:int) =
   let m_1218 = max_1206 f9_1211 x_2075 y_1216 z_1217 in
   assert (f9_1211 x_2075 m_1218 = m_1218)
 in
 let f8_1219 (g_1220:(int -> int -> int)) (x_1221:int) (y_1222:int) =
   g_1220 (x_1221 + 1) (y_1222 + 1)
 in
 let rec unzip8_1223 (x_1224:int) (k_1225:(int -> int -> int)) =
   if x_1224 = 0 then k_1225 0 0 else unzip8_1223 (x_1224 - 1) (f8_1219 k_1225)
 in
 let rec zip8_1226 (x_1227:int) (y_1228:int) =
   if x_1227 = 0
   then
     if y_1228 = 0 then 0 else assert false
   else
     if y_1228 = 0
     then
       assert false
     else
       1 + zip8_1226 (x_1227 - 1) (y_1228 - 1)
 in
 let rec mult_1231 (n_1232:int) (m_1233:int) =
   if n_1232 <= 0 || m_1233 <= 0
   then
     0
   else
     n_1232 + mult_1231 n_1232 (m_1233 - 1)
 in
 let m11_1234 (n_1235:int) = assert (n_1235 <= mult_1231 n_1235 n_1235) in
 let make_array_1236 (n_1237:int) (i_1238:int) =
   assert (0 <= i_1238 && i_1238 < n_1237); 0
 in
 let update_1239 (x_2219:int) (_:int) (des_1242:(int -> int)) 
                (x_1243:int) =
   let u_2240 = des_1242 x_2219 in
   let a_1244 (j_1245:int) =
     if x_2219 = j_1245 then x_1243 else des_1242 x_2219
   in
   a_1244
 in
 let print_int_1246 (_:int) = () in
 let f20_1248 (x_2253:int) (src_1250:(int -> int)) 
             (des_1251:(int -> int)) =
   let rec bcopy_1252 (x_2273:int) (src_1254:(int -> int)) 
                     (des_1255:(int -> int)) (i_1256:int) =
     if i_1256 >= x_2273
     then
       des_1255
     else
       let des_1257 =
         update_1239 i_1256 x_2273 des_1255 (src_1254 i_1256)
       in
       bcopy_1252 x_2273 src_1254 des_1257 (i_1256 + 1)
   in
   let rec print_array_1258 (m_1259:int) (x_2326:(int -> int)) 
                           (i_1261:int) =
     if i_1261 >= m_1259
     then
       ()
     else
       print_int_1246 (des_1251 i_1261);
       print_array_1258 m_1259 x_2326 (i_1261 + 1)
   in
   let array_1262 = bcopy_1252 x_2253 src_1250 des_1251 0 in
   print_array_1258 x_2253 array_1262 0
 in
 let m12_1263 (n_1264:int) =
   let array1_1265 = make_array_1236 n_1264 in
   let array2_1266 = make_array_1236 n_1264 in
   if n_1264 > 0 then f20_1248 n_1264 array1_1265 array2_1266
 in
 let lock_1267 (st_1268:int) = assert (st_1268 = 0); 1 in
 let unlock_1269 (st_1270:int) = assert (st_1270 = 1); 0 in
 let f13_1271 (n_1272:int) (st_1273:int) =
   if n_1272 > 0 then lock_1267 st_1273 else st_1273
 in
 let g13_1274 (n_1275:int) (st_1276:int) =
   if n_1275 > 0
   then
     unlock_1269 st_1276
   else
     st_1276
 in
 let m13_1277 (n_1278:int) =
   assert (g13_1274 n_1278 (f13_1271 n_1278 0) = 0)
 in
 let rec sum_1279 (n_1280:int) =
   if n_1280 <= 0
   then
     0
   else
     n_1280 + sum_1279 (n_1280 - 1)
 in
 let m14_1281 (n_1282:int) =
   assert (n_1282 <= sum_1279 n_1282)
 in
 let rec mult_1283 (n_1284:int) (m_1285:int) =
   if n_1284 <= 0 || m_1285 <= 0
   then
     0
   else
     n_1284 + mult_1283 n_1284 (m_1285 - 1)
 in
 let m15_1286 (n_1287:int) =
   assert (n_1287 + 1 <= mult_1283 n_1287 n_1287)
 in
 let succ_1288 (x_1289:int) = x_1289 + 1 in
 let rec repeat_1290 (x_2463:(int -> int)) 
                    (n_1292:int) (s_1293:int) =
   if n_1292 = 0
   then
     s_1293
   else
     x_2463
       (repeat_1290 x_2463 (n_1292 - 1) s_1293)
 in
 let m16_1294 (n_1295:int) =
   assert (repeat_1290 succ_1288 n_1295 0 > n_1295)
 in
 let lock_1296 (st_1297:int) =
   assert (st_1297 = 0); 1
 in
 let unlock_1298 (st_1299:int) =
   assert (st_1299 = 1); 0
 in
 let f17_1300 (n_1301:int) (st_1302:int) =
   if n_1301 > 0
   then
     lock_1296 st_1302
   else
     st_1302
 in
 let g17_1303 (n_1304:int) (st_1305:int) =
   if n_1304 >= 0
   then
     unlock_1298 st_1305
   else
     st_1305
 in
 let m17_1306 (n_1307:int) =
   assert (g17_1303 n_1307 (f17_1300 n_1307 0) = 0)
 in
 let rec sum_1308 (n_1309:int) =
   if n_1309 <= 0
   then
     0
   else
     n_1309 + sum_1308 (n_1309 - 1)
 in
 let m18_1310 (n_1311:int) =
   assert (n_1311 + 1 <= sum_1308 n_1311)
 in
 let make_array21_1312 (n_1313:int) (i_1314:int) =
   assert (0 <= i_1314 && i_1314 < n_1313); 0
 in
 let update21_1315 (i_1316:int) 
                  (a_1317:(int -> int)) 
                  (x_1318:int) (j_1319:int) =
   if j_1319 > i_1316 - 1 && j_1319 <= i_1316
   then
     x_1318
   else
     a_1317 j_1319
 in
 let rec init_1320 (i_1321:int) (n_1322:int) 
                  (a_1323:(int -> int)) =
   if i_1321 >= n_1322
   then
     a_1323
   else
     init_1320
       (i_1321 + 1) n_1322 
       (update21_1315 i_1321 a_1323 1)
 in
 let m21_1324 (k_1325:int) (n_1326:int) 
             (i_1327:int) =
   if k_1325 >= 0 && k_1325 <= 0
   then
     let x_1328 =
       init_1320
         k_1325 n_1326 (make_array21_1312 n_1326)
     in
     if 0 <= i_1327 && i_1327 < n_1326
     then
       assert (x_1328 i_1327 >= 1)
 in
 let make_array23_1329 (n_1330:int) (i_1331:int) =
   n_1330 - i_1331
 in
 let rec array_max23_1332 (x_2665:int) (i_1334:int) 
                         (x_2672:(int -> int)) 
                         (m_1336:int) =
   if i_1334 >= x_2665
   then
     m_1336
   else
     let x_1337 = x_2672 i_1334 in
     let z_1338 =
       if x_1337 > m_1336
       then
         x_1337
       else
         m_1336
     in
     array_max23_1332
       x_2665 (i_1334 + 1) x_2672 z_1338
 in
 let m23_1339 (n_1340:int) (i_1341:int) =
   if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
   then
     let m_1342 =
       array_max23_1332
         n_1340 i_1341 (make_array23_1329 n_1340) 
         (-1)
     in
     assert (m_1342 >= n_1340)
 in
 let main_1343 (n_1344:int) (m_1345:int) =
   if n_1344 = 7
   then
     m7_1204 m_1345
   else
     if n_1344 = 9
     then
       m9_1214 m_1345 m_1345 m_1345
     else
       if n_1344 = 11
       then
         m11_1234 m_1345
       else
         if n_1344 = 12
         then
           m12_1263 m_1345
         else
           if n_1344 = 13
           then
             m13_1277 m_1345
           else
             if n_1344 = 14
             then
               m14_1281 m_1345
             else
               if n_1344 = 15
               then
                 m15_1286 m_1345
               else
                 if n_1344 = 16
                 then
                   m16_1294 m_1345
                 else
                   if n_1344 = 17
                   then
                     m17_1306 m_1345
                   else
                     if n_1344 = 18
                     then
                       m18_1310 m_1345
                     else
                       if n_1344 = 21
                       then
                         m21_1324
                           m_1345 m_1345 m_1345
                       else
                         m23_1339 m_1345 m_1345
 in
 (let arg1_2758 = rand_int () in
  let arg2_2760 = rand_int () in
  main_1343 arg1_2758 arg2_2760);
 ()

###Eliminate_redundant_arguments:
 let rec zip_1199 (x_1200:int) (y_1201:int) =
   if x_1200 = 0
   then
     if y_1201 = 0 then x_1200 else assert false
   else
     if y_1201 = 0 then assert false else 1 + zip_1199 (x_1200 - 1) (y_1201 - 1)
 in
 let rec map_1202 (x_1203:int) = if x_1203 = 0 then x_1203 else 1 + map_1202 (x_1203 - 1) in
 let m7_1204 (n_1205:int) = assert (map_1202 (zip_1199 n_1205 n_1205) = n_1205) in
 let max_1206 (max2_1207:(int -> int -> int)) (x_2053:int) (x_2055:int) (x_2056:int) =
   max2_1207 (max2_1207 x_2053 x_2055) x_2056
 in
 let f9_1211 (x_1212:int) (y_1213:int) = if x_1212 >= y_1213 then x_1212 else y_1213 in
 let m9_1214 (x_2075:int) (y_1216:int) (z_1217:int) =
   let m_1218 = max_1206 f9_1211 x_2075 y_1216 z_1217 in
   assert (f9_1211 x_2075 m_1218 = m_1218)
 in
 let f8_1219 (g_1220:(int -> int -> int)) (x_1221:int) (y_1222:int) =
   g_1220 (x_1221 + 1) (y_1222 + 1)
 in
 let rec unzip8_1223 (x_1224:int) (k_1225:(int -> int -> int)) =
   if x_1224 = 0 then k_1225 0 0 else unzip8_1223 (x_1224 - 1) (f8_1219 k_1225)
 in
 let rec zip8_1226 (x_1227:int) (y_1228:int) =
   if x_1227 = 0
   then
     if y_1228 = 0 then 0 else assert false
   else
     if y_1228 = 0
     then
       assert false
     else
       1 + zip8_1226 (x_1227 - 1) (y_1228 - 1)
 in
 let rec mult_1231 (n_1232:int) (m_1233:int) =
   if n_1232 <= 0 || m_1233 <= 0
   then
     0
   else
     n_1232 + mult_1231 n_1232 (m_1233 - 1)
 in
 let m11_1234 (n_1235:int) = assert (n_1235 <= mult_1231 n_1235 n_1235) in
 let make_array_1236 (n_1237:int) (i_1238:int) =
   assert (0 <= i_1238 && i_1238 < n_1237); 0
 in
 let update_1239 (x_2219:int) (_:int) (des_1242:(int -> int)) 
                (x_1243:int) =
   let u_2240 = des_1242 x_2219 in
   let a_1244 (j_1245:int) =
     if x_2219 = j_1245 then x_1243 else des_1242 x_2219
   in
   a_1244
 in
 let print_int_1246 (_:int) = () in
 let f20_1248 (x_2253:int) (src_1250:(int -> int)) 
             (des_1251:(int -> int)) =
   let rec bcopy_1252 (des_1255:(int -> int)) (i_1256:int) =
     if i_1256 >= x_2253
     then
       des_1255
     else
       let des_1257 =
         update_1239 i_1256 x_2253 des_1255 (src_1250 i_1256)
       in
       bcopy_1252 des_1257 (i_1256 + 1)
   in
   let rec print_array_1258 (x_2326:(int -> int)) (i_1261:int) =
     if i_1261 >= x_2253
     then
       ()
     else
       print_int_1246 (des_1251 i_1261);
       print_array_1258 x_2326 (i_1261 + 1)
   in
   let array_1262 = bcopy_1252 des_1251 0 in
   print_array_1258 array_1262 0
 in
 let m12_1263 (n_1264:int) =
   let array1_1265 = make_array_1236 n_1264 in
   let array2_1266 = make_array_1236 n_1264 in
   if n_1264 > 0 then f20_1248 n_1264 array1_1265 array2_1266
 in
 let lock_1267 (st_1268:int) = assert (st_1268 = 0); 1 in
 let unlock_1269 (st_1270:int) = assert (st_1270 = 1); 0 in
 let f13_1271 (n_1272:int) (st_1273:int) =
   if n_1272 > 0 then lock_1267 st_1273 else st_1273
 in
 let g13_1274 (n_1275:int) (st_1276:int) =
   if n_1275 > 0
   then
     unlock_1269 st_1276
   else
     st_1276
 in
 let m13_1277 (n_1278:int) =
   assert (g13_1274 n_1278 (f13_1271 n_1278 0) = 0)
 in
 let rec sum_1279 (n_1280:int) =
   if n_1280 <= 0
   then
     0
   else
     n_1280 + sum_1279 (n_1280 - 1)
 in
 let m14_1281 (n_1282:int) =
   assert (n_1282 <= sum_1279 n_1282)
 in
 let rec mult_1283 (n_1284:int) (m_1285:int) =
   if n_1284 <= 0 || m_1285 <= 0
   then
     0
   else
     n_1284 + mult_1283 n_1284 (m_1285 - 1)
 in
 let m15_1286 (n_1287:int) =
   assert (n_1287 + 1 <= mult_1283 n_1287 n_1287)
 in
 let succ_1288 (x_1289:int) = x_1289 + 1 in
 let rec repeat_1290 (x_2463:(int -> int)) 
                    (n_1292:int) (s_1293:int) =
   if n_1292 = 0
   then
     s_1293
   else
     x_2463
       (repeat_1290 x_2463 (n_1292 - 1) s_1293)
 in
 let m16_1294 (n_1295:int) =
   assert (repeat_1290 succ_1288 n_1295 0 > n_1295)
 in
 let lock_1296 (st_1297:int) =
   assert (st_1297 = 0); 1
 in
 let unlock_1298 (st_1299:int) =
   assert (st_1299 = 1); 0
 in
 let f17_1300 (n_1301:int) (st_1302:int) =
   if n_1301 > 0
   then
     lock_1296 st_1302
   else
     st_1302
 in
 let g17_1303 (n_1304:int) (st_1305:int) =
   if n_1304 >= 0
   then
     unlock_1298 st_1305
   else
     st_1305
 in
 let m17_1306 (n_1307:int) =
   assert (g17_1303 n_1307 (f17_1300 n_1307 0) = 0)
 in
 let rec sum_1308 (n_1309:int) =
   if n_1309 <= 0
   then
     0
   else
     n_1309 + sum_1308 (n_1309 - 1)
 in
 let m18_1310 (n_1311:int) =
   assert (n_1311 + 1 <= sum_1308 n_1311)
 in
 let make_array21_1312 (n_1313:int) (i_1314:int) =
   assert (0 <= i_1314 && i_1314 < n_1313); 0
 in
 let update21_1315 (i_1316:int) 
                  (a_1317:(int -> int)) 
                  (x_1318:int) (j_1319:int) =
   if j_1319 > i_1316 - 1 && j_1319 <= i_1316
   then
     x_1318
   else
     a_1317 j_1319
 in
 let rec init_1320 (i_1321:int) (n_1322:int) 
                  (a_1323:(int -> int)) =
   if i_1321 >= n_1322
   then
     a_1323
   else
     init_1320
       (i_1321 + 1) n_1322 
       (update21_1315 i_1321 a_1323 1)
 in
 let m21_1324 (k_1325:int) (n_1326:int) 
             (i_1327:int) =
   if k_1325 >= 0 && k_1325 <= 0
   then
     let x_1328 =
       init_1320
         k_1325 n_1326 (make_array21_1312 n_1326)
     in
     if 0 <= i_1327 && i_1327 < n_1326
     then
       assert (x_1328 i_1327 >= 1)
 in
 let make_array23_1329 (n_1330:int) (i_1331:int) =
   n_1330 - i_1331
 in
 let rec array_max23_1332 (x_2665:int) (i_1334:int) 
                         (x_2672:(int -> int)) 
                         (m_1336:int) =
   if i_1334 >= x_2665
   then
     m_1336
   else
     let x_1337 = x_2672 i_1334 in
     let z_1338 =
       if x_1337 > m_1336
       then
         x_1337
       else
         m_1336
     in
     array_max23_1332
       x_2665 (i_1334 + 1) x_2672 z_1338
 in
 let m23_1339 (n_1340:int) (i_1341:int) =
   if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
   then
     let m_1342 =
       array_max23_1332
         n_1340 i_1341 (make_array23_1329 n_1340) 
         (-1)
     in
     assert (m_1342 >= n_1340)
 in
 let main_1343 (n_1344:int) (m_1345:int) =
   if n_1344 = 7
   then
     m7_1204 m_1345
   else
     if n_1344 = 9
     then
       m9_1214 m_1345 m_1345 m_1345
     else
       if n_1344 = 11
       then
         m11_1234 m_1345
       else
         if n_1344 = 12
         then
           m12_1263 m_1345
         else
           if n_1344 = 13
           then
             m13_1277 m_1345
           else
             if n_1344 = 14
             then
               m14_1281 m_1345
             else
               if n_1344 = 15
               then
                 m15_1286 m_1345
               else
                 if n_1344 = 16
                 then
                   m16_1294 m_1345
                 else
                   if n_1344 = 17
                   then
                     m17_1306 m_1345
                   else
                     if n_1344 = 18
                     then
                       m18_1310 m_1345
                     else
                       if n_1344 = 21
                       then
                         m21_1324
                           m_1345 m_1345 m_1345
                       else
                         m23_1339 m_1345 m_1345
 in
 (let arg1_2758 = rand_int () in
  let arg2_2760 = rand_int () in
  main_1343 arg1_2758 arg2_2760);
 ()

###CPS:
 (let rec zip_1199 (x_1200:int) (y_1201:int) (k_zip_4380:(int -> X)) =
    if x_1200 = 0
    then
      if y_1201 = 0 then k_zip_4380 x_1200 else <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1201 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1199 (x_1200 - 1) (y_1201 - 1) (fun (x_4412:int) -> k_zip_4380 (1 + x_4412))
  in
  let rec map_1202 (x_1203:int) (k_map_4439:(int -> X)) =
    if x_1203 = 0
    then
      k_map_4439 x_1203
    else
      map_1202 (x_1203 - 1) (fun (x_4443:int) -> k_map_4439 (1 + x_4443))
  in
  let f9_1211 (x_1212:int) (y_1213:int) (k_f9_4558:(int -> X)) =
    if x_1212 >= y_1213 then k_f9_4558 x_1212 else k_f9_4558 y_1213
  in
  let f8_1219 (g_1220:(int -> int -> (int -> X) -> X)) (x_1221:int) (y_1222:int) (k_f8_4633:(int -> X)) =
    g_1220 (x_1221 + 1) (y_1222 + 1) k_f8_4633
  in
  let rec unzip8_1223 (x_1224:int) (k_1225:(int -> int -> (int -> X) -> X)) (k_unzip8_4661:(int -> X)) =
    if x_1224 = 0
    then
      k_1225 0 0 k_unzip8_4661
    else
      unzip8_1223 (x_1224 - 1) (f8_1219 k_1225) k_unzip8_4661
  in
  let rec zip8_1226 (x_1227:int) (y_1228:int) (k_zip8_4724:(int -> X)) =
    if x_1227 = 0
    then
      if y_1228 = 0 then k_zip8_4724 0 else <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1228 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip8_1226 (x_1227 - 1) (y_1228 - 1) (fun (x_4756:int) -> k_zip8_4724 (1 + x_4756))
  in
  let rec mult_1231 (n_1232:int) (m_1233:int) (k_mult_4783:(int -> X)) =
    if n_1232 <= 0 || m_1233 <= 0
    then
      k_mult_4783 0
    else
      mult_1231 n_1232 (m_1233 - 1) (fun (x_4787:int) -> k_mult_4783 (n_1232 + x_4787))
  in
  let make_array_1236 (n_1237:int) (i_1238:int) (k_make_array_4843:(int -> X)) =
    let u_2207 (k_make_array_u_4854:(unit -> X)) =
      if 0 <= i_1238 && i_1238 < n_1237
      then
        k_make_array_u_4854 ()
      else
        <|fail|> () k_make_array_u_4854
    in
    u_2207 (fun (():unit) -> k_make_array_4843 0)
  in
  let f20_1248 (x_2253:int) (src_1250:(int -> (int -> X) -> X)) 
              (des_1251:(int -> (int -> X) -> X)) (k_f20_4938:(unit -> X)) =
    let rec bcopy_1252 (des_1255:(int -> (int -> X) -> X)) (i_1256:int) 
                      (k_f20_bcopy_4948:((int -> (int -> X) -> X) -> X)) =
      if i_1256 >= x_2253
      then
        k_f20_bcopy_4948 des_1255
      else
        src_1250
          i_1256 
          (fun (x_4994:int) ->
             des_1255
               i_1256 
               (fun (_:int) ->
                  (fun (des_5027:(int -> (int -> X) -> X)) ->
                     bcopy_1252 des_5027 (i_1256 + 1) k_f20_bcopy_4948)
                    (let a_1244 (j_1245:int) (k_update_a_4891:(int -> X)) =
                       if i_1256 = j_1245
                       then
                         k_update_a_4891 x_4994
                       else
                         des_1255 i_1256 k_update_a_4891
                     in
                     a_1244)))
    in
    let rec print_array_1258 (x_2326:(int -> (int -> X) -> X)) (i_1261:int) 
                            (k_f20_print_array_5051:(unit -> X)) =
      if i_1261 >= x_2253
      then
        k_f20_print_array_5051 ()
      else
        des_1251
          i_1261 
          (fun (_:int) ->
             (fun (():unit) -> print_array_1258 x_2326 (i_1261 + 1) k_f20_print_array_5051) ())
    in
    bcopy_1252
      des_1251 0 
      (fun (array_5154:(int -> (int -> X) -> X)) -> print_array_1258 array_5154 0 k_f20_4938)
  in
  let m12_1263 (n_1264:int) (k_m12_5188:(unit -> X)) =
    if n_1264 > 0
    then
      f20_1248 n_1264 (make_array_1236 n_1264) (make_array_1236 n_1264) k_m12_5188
    else
      k_m12_5188 ()
  in
  let lock_1267 (st_1268:int) (k_lock_5255:(int -> X)) =
    let u_2383 (k_lock_u_5266:(unit -> X)) =
      if st_1268 = 0 then k_lock_u_5266 () else <|fail|> () k_lock_u_5266
    in
    u_2383 (fun (():unit) -> k_lock_5255 1)
  in
  let unlock_1269 (st_1270:int) (k_unlock_5276:(int -> X)) =
    let u_2388 (k_unlock_u_5287:(unit -> X)) =
      if st_1270 = 1 then k_unlock_u_5287 () else <|fail|> () k_unlock_u_5287
    in
    u_2388 (fun (():unit) -> k_unlock_5276 0)
  in
  let f13_1271 (n_1272:int) (st_1273:int) (k_f13_5297:(int -> X)) =
    if n_1272 > 0 then lock_1267 st_1273 k_f13_5297 else k_f13_5297 st_1273
  in
  let g13_1274 (n_1275:int) (st_1276:int) (k_g13_5319:(int -> X)) =
    if n_1275 > 0
    then
      unlock_1269 st_1276 k_g13_5319
    else
      k_g13_5319 st_1276
  in
  let rec sum_1279 (n_1280:int) (k_sum_5385:(int -> X)) =
    if n_1280 <= 0
    then
      k_sum_5385 0
    else
      sum_1279
        (n_1280 - 1) (fun (x_5389:int) -> k_sum_5385 (n_1280 + x_5389))
  in
  let rec mult_1283 (n_1284:int) (m_1285:int) (k_mult_5442:(int -> X)) =
    if n_1284 <= 0 || m_1285 <= 0
    then
      k_mult_5442 0
    else
      mult_1283
        n_1284 (m_1285 - 1) 
        (fun (x_5446:int) -> k_mult_5442 (n_1284 + x_5446))
  in
  let succ_1288 (x_1289:int) (k_succ_5502:(int -> X)) =
    k_succ_5502 (x_1289 + 1)
  in
  let rec repeat_1290 (x_2463:(int -> (int -> X) -> X)) (n_1292:int) 
                     (s_1293:int) (k_repeat_5512:(int -> X)) =
    if n_1292 = 0
    then
      k_repeat_5512 s_1293
    else
      repeat_1290
        x_2463 (n_1292 - 1) s_1293 
        (fun (x_5540:int) -> x_2463 x_5540 k_repeat_5512)
  in
  let lock_1296 (st_1297:int) (k_lock_5596:(int -> X)) =
    let u_2492 (k_lock_u_5607:(unit -> X)) =
      if st_1297 = 0
      then
        k_lock_u_5607 ()
      else
        <|fail|> () k_lock_u_5607
    in
    u_2492 (fun (():unit) -> k_lock_5596 1)
  in
  let unlock_1298 (st_1299:int) (k_unlock_5617:(int -> X)) =
    let u_2497 (k_unlock_u_5628:(unit -> X)) =
      if st_1299 = 1
      then
        k_unlock_u_5628 ()
      else
        <|fail|> () k_unlock_u_5628
    in
    u_2497 (fun (():unit) -> k_unlock_5617 0)
  in
  let f17_1300 (n_1301:int) (st_1302:int) (k_f17_5638:(int -> X)) =
    if n_1301 > 0
    then
      lock_1296 st_1302 k_f17_5638
    else
      k_f17_5638 st_1302
  in
  let g17_1303 (n_1304:int) (st_1305:int) (k_g17_5660:(int -> X)) =
    if n_1304 >= 0
    then
      unlock_1298 st_1305 k_g17_5660
    else
      k_g17_5660 st_1305
  in
  let rec sum_1308 (n_1309:int) (k_sum_5726:(int -> X)) =
    if n_1309 <= 0
    then
      k_sum_5726 0
    else
      sum_1308
        (n_1309 - 1) (fun (x_5730:int) -> k_sum_5726 (n_1309 + x_5730))
  in
  let make_array21_1312 (n_1313:int) (i_1314:int) 
                       (k_make_array21_5783:(int -> X)) =
    let u_2549 (k_make_array21_u_5794:(unit -> X)) =
      if 0 <= i_1314 && i_1314 < n_1313
      then
        k_make_array21_u_5794 ()
      else
        <|fail|> () k_make_array21_u_5794
    in
    u_2549 (fun (():unit) -> k_make_array21_5783 0)
  in
  let update21_1315 (i_1316:int) (a_1317:(int -> (int -> X) -> X)) 
                   (x_1318:int) (j_1319:int) 
                   (k_update21_5808:(int -> X)) =
    if j_1319 > i_1316 - 1 && j_1319 <= i_1316
    then
      k_update21_5808 x_1318
    else
      a_1317 j_1319 k_update21_5808
  in
  let rec init_1320 (i_1321:int) (n_1322:int) 
                   (a_1323:(int -> (int -> X) -> X)) 
                   (k_init_5841:((int -> (int -> X) -> X) -> X)) =
    if i_1321 >= n_1322
    then
      k_init_5841 a_1323
    else
      init_1320
        (i_1321 + 1) n_1322 (update21_1315 i_1321 a_1323 1) k_init_5841
  in
  let m21_1324 (k_1325:int) (n_1326:int) (i_1327:int) 
              (k_m21_5908:(unit -> X)) =
    if k_1325 >= 0 && k_1325 <= 0
    then
      init_1320
        k_1325 n_1326 (make_array21_1312 n_1326) 
        (fun (x_5980:(int -> (int -> X) -> X)) ->
           if 0 <= i_1327 && i_1327 < n_1326
           then
             x_5980
               i_1327 
               (fun (x_5950:int) ->
                  if x_5950 >= 1
                  then
                    k_m21_5908 ()
                  else
                    <|fail|> () k_m21_5908)
           else
             k_m21_5908 ())
    else
      k_m21_5908 ()
  in
  let make_array23_1329 (n_1330:int) (i_1331:int) 
                       (k_make_array23_5993:(int -> X)) =
    k_make_array23_5993 (n_1330 - i_1331)
  in
  let rec array_max23_1332 (x_2665:int) (i_1334:int) 
                          (x_2672:(int -> (int -> X) -> X)) 
                          (m_1336:int) (k_array_max23_6004:(int -> X)) =
    if i_1334 >= x_2665
    then
      k_array_max23_6004 m_1336
    else
      x_2672
        i_1334 
        (fun (x_6043:int) ->
           let z_1338 (k_array_max23_z_6020:(int -> X)) =
             if x_6043 > m_1336
             then
               k_array_max23_z_6020 x_6043
             else
               k_array_max23_z_6020 m_1336
           in
           z_1338
             (fun (z_6042:int) ->
                array_max23_1332
                  x_2665 (i_1334 + 1) x_2672 z_6042 k_array_max23_6004))
  in
  let m23_1339 (n_1340:int) (i_1341:int) (k_m23_6060:(unit -> X)) =
    if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
    then
      array_max23_1332
        n_1340 i_1341 (make_array23_1329 n_1340) (-1) 
        (fun (m_6094:int) ->
           if m_6094 >= n_1340
           then
             k_m23_6060 ()
           else
             <|fail|> () k_m23_6060)
    else
      k_m23_6060 ()
  in
  let main_1343 (n_1344:int) (m_1345:int) (k_main_6106:(unit -> X)) =
    if n_1344 = 7
    then
      zip_1199
        m_1345 m_1345 
        (fun (x_4489:int) ->
           map_1202
             x_4489 
             (fun (x_4467:int) ->
                if x_4467 = m_1345
                then
                  k_main_6106 ()
                else
                  <|fail|> () k_main_6106))
    else
      if n_1344 = 9
      then
        f9_1211
          m_1345 m_1345 
          (fun (x_4537:int) ->
             f9_1211
               x_4537 m_1345 
               (fun (m_4620:int) ->
                  f9_1211
                    m_1345 m_4620 
                    (fun (x_4596:int) ->
                       if x_4596 = m_4620
                       then
                         k_main_6106 ()
                       else
                         <|fail|> () k_main_6106)))
      else
        if n_1344 = 11
        then
          mult_1231
            m_1345 m_1345 
            (fun (x_4814:int) ->
               if m_1345 <= x_4814
               then
                 k_main_6106 ()
               else
                 <|fail|> () k_main_6106)
        else
          if n_1344 = 12
          then
            m12_1263 m_1345 k_main_6106
          else
            if n_1344 = 13
            then
              f13_1271
                m_1345 0 
                (fun (x_5367:int) ->
                   g13_1274
                     m_1345 x_5367 
                     (fun (x_5344:int) ->
                        if x_5344 = 0
                        then
                          k_main_6106 ()
                        else
                          <|fail|> () k_main_6106))
            else
              if n_1344 = 14
              then
                sum_1279
                  m_1345 
                  (fun (x_5414:int) ->
                     if m_1345 <= x_5414
                     then
                       k_main_6106 ()
                     else
                       <|fail|> () k_main_6106)
              else
                if n_1344 = 15
                then
                  mult_1283
                    m_1345 m_1345 
                    (fun (x_5473:int) ->
                       if m_1345 + 1 <= x_5473
                       then
                         k_main_6106 ()
                       else
                         <|fail|> () k_main_6106)
                else
                  if n_1344 = 16
                  then
                    repeat_1290
                      succ_1288 m_1345 0 
                      (fun (x_5559:int) ->
                         if x_5559 > m_1345
                         then
                           k_main_6106 ()
                         else
                           <|fail|> () k_main_6106)
                  else
                    if n_1344 = 17
                    then
                      f17_1300
                        m_1345 0 
                        (fun (x_5708:int) ->
                           g17_1303
                             m_1345 x_5708 
                             (fun (x_5685:int) ->
                                if x_5685 = 0
                                then
                                  k_main_6106 ()
                                else
                                  <|fail|> () k_main_6106))
                    else
                      if n_1344 = 18
                      then
                        sum_1308
                          m_1345 
                          (fun (x_5755:int) ->
                             if m_1345 + 1 <= x_5755
                             then
                               k_main_6106 ()
                             else
                               <|fail|> () k_main_6106)
                      else
                        if n_1344 = 21
                        then
                          m21_1324 m_1345 m_1345 m_1345 k_main_6106
                        else
                          m23_1339 m_1345 m_1345 k_main_6106
  in
  let main_2762 (k_main_6283:(unit -> X)) =
    let arg1_2758 (k_main_arg1_6288:(int -> X)) =
      rand_int_cps () k_main_arg1_6288
    in
    arg1_2758
      (fun (arg1_6318:int) ->
         let arg2_2760 (k_main_arg2_6300:(int -> X)) =
           rand_int_cps () k_main_arg2_6300
         in
         arg2_2760
           (fun (arg2_6317:int) ->
              main_1343 arg1_6318 arg2_6317 k_main_6283))
  in
  main_2762 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec zip_1199 (x_1200:int) (y_1201:int) (k_zip_4380:(int -> X)) =
    if x_1200 = 0
    then
      if y_1201 = 0 then k_zip_4380 x_1200 else <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1201 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1199 (x_1200 - 1) (y_1201 - 1) (fun (x_4412:int) -> k_zip_4380 (1 + x_4412))
  in
  let rec map_1202 (x_1203:int) (k_map_4439:(int -> X)) =
    if x_1203 = 0
    then
      k_map_4439 x_1203
    else
      map_1202 (x_1203 - 1) (fun (x_4443:int) -> k_map_4439 (1 + x_4443))
  in
  let f9_1211 (x_1212:int) (y_1213:int) (k_f9_4558:(int -> X)) =
    if x_1212 >= y_1213 then k_f9_4558 x_1212 else k_f9_4558 y_1213
  in
  let f8_1219 (g_1220:(int -> int -> (int -> X) -> X)) (x_1221:int) (y_1222:int) (k_f8_4633:(int -> X)) =
    g_1220 (x_1221 + 1) (y_1222 + 1) k_f8_4633
  in
  let rec unzip8_1223 (x_1224:int) (k_1225:(int -> int -> (int -> X) -> X)) (k_unzip8_4661:(int -> X)) =
    if x_1224 = 0
    then
      k_1225 0 0 k_unzip8_4661
    else
      unzip8_1223 (x_1224 - 1) (f8_1219 k_1225) k_unzip8_4661
  in
  let rec zip8_1226 (x_1227:int) (y_1228:int) (k_zip8_4724:(int -> X)) =
    if x_1227 = 0
    then
      if y_1228 = 0 then k_zip8_4724 0 else <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1228 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip8_1226 (x_1227 - 1) (y_1228 - 1) (fun (x_4756:int) -> k_zip8_4724 (1 + x_4756))
  in
  let rec mult_1231 (n_1232:int) (m_1233:int) (k_mult_4783:(int -> X)) =
    if n_1232 <= 0 || m_1233 <= 0
    then
      k_mult_4783 0
    else
      mult_1231 n_1232 (m_1233 - 1) (fun (x_4787:int) -> k_mult_4783 (n_1232 + x_4787))
  in
  let make_array_1236 (n_1237:int) (i_1238:int) (k_make_array_4843:(int -> X)) =
    let u_2207 (k_make_array_u_4854:(unit -> X)) =
      if 0 <= i_1238 && i_1238 < n_1237
      then
        k_make_array_u_4854 ()
      else
        <|fail|> () k_make_array_u_4854
    in
    u_2207 (fun (():unit) -> k_make_array_4843 0)
  in
  let f20_1248 (x_2253:int) (src_1250:(int -> (int -> X) -> X)) 
              (des_1251:(int -> (int -> X) -> X)) (k_f20_4938:(unit -> X)) =
    let rec bcopy_1252 (des_1255:(int -> (int -> X) -> X)) (i_1256:int) 
                      (k_f20_bcopy_4948:((int -> (int -> X) -> X) -> X)) =
      if i_1256 >= x_2253
      then
        k_f20_bcopy_4948 des_1255
      else
        src_1250
          i_1256 
          (fun (x_4994:int) ->
             des_1255
               i_1256 
               (fun (_:int) ->
                  (fun (des_5027:(int -> (int -> X) -> X)) ->
                     bcopy_1252 des_5027 (i_1256 + 1) k_f20_bcopy_4948)
                    (let a_1244 (j_1245:int) (k_update_a_4891:(int -> X)) =
                       if i_1256 = j_1245
                       then
                         k_update_a_4891 x_4994
                       else
                         des_1255 i_1256 k_update_a_4891
                     in
                     a_1244)))
    in
    let rec print_array_1258 (x_2326:(int -> (int -> X) -> X)) (i_1261:int) 
                            (k_f20_print_array_5051:(unit -> X)) =
      if i_1261 >= x_2253
      then
        k_f20_print_array_5051 ()
      else
        des_1251
          i_1261 (fun (_:int) -> print_array_1258 x_2326 (i_1261 + 1) k_f20_print_array_5051)
    in
    bcopy_1252
      des_1251 0 
      (fun (array_5154:(int -> (int -> X) -> X)) -> print_array_1258 array_5154 0 k_f20_4938)
  in
  let m12_1263 (n_1264:int) (k_m12_5188:(unit -> X)) =
    if n_1264 > 0
    then
      f20_1248 n_1264 (make_array_1236 n_1264) (make_array_1236 n_1264) k_m12_5188
    else
      k_m12_5188 ()
  in
  let lock_1267 (st_1268:int) (k_lock_5255:(int -> X)) =
    let u_2383 (k_lock_u_5266:(unit -> X)) =
      if st_1268 = 0 then k_lock_u_5266 () else <|fail|> () k_lock_u_5266
    in
    u_2383 (fun (():unit) -> k_lock_5255 1)
  in
  let unlock_1269 (st_1270:int) (k_unlock_5276:(int -> X)) =
    let u_2388 (k_unlock_u_5287:(unit -> X)) =
      if st_1270 = 1 then k_unlock_u_5287 () else <|fail|> () k_unlock_u_5287
    in
    u_2388 (fun (():unit) -> k_unlock_5276 0)
  in
  let f13_1271 (n_1272:int) (st_1273:int) (k_f13_5297:(int -> X)) =
    if n_1272 > 0 then lock_1267 st_1273 k_f13_5297 else k_f13_5297 st_1273
  in
  let g13_1274 (n_1275:int) (st_1276:int) (k_g13_5319:(int -> X)) =
    if n_1275 > 0
    then
      unlock_1269 st_1276 k_g13_5319
    else
      k_g13_5319 st_1276
  in
  let rec sum_1279 (n_1280:int) (k_sum_5385:(int -> X)) =
    if n_1280 <= 0
    then
      k_sum_5385 0
    else
      sum_1279
        (n_1280 - 1) (fun (x_5389:int) -> k_sum_5385 (n_1280 + x_5389))
  in
  let rec mult_1283 (n_1284:int) (m_1285:int) (k_mult_5442:(int -> X)) =
    if n_1284 <= 0 || m_1285 <= 0
    then
      k_mult_5442 0
    else
      mult_1283
        n_1284 (m_1285 - 1) 
        (fun (x_5446:int) -> k_mult_5442 (n_1284 + x_5446))
  in
  let succ_1288 (x_1289:int) (k_succ_5502:(int -> X)) =
    k_succ_5502 (x_1289 + 1)
  in
  let rec repeat_1290 (x_2463:(int -> (int -> X) -> X)) (n_1292:int) 
                     (s_1293:int) (k_repeat_5512:(int -> X)) =
    if n_1292 = 0
    then
      k_repeat_5512 s_1293
    else
      repeat_1290
        x_2463 (n_1292 - 1) s_1293 
        (fun (x_5540:int) -> x_2463 x_5540 k_repeat_5512)
  in
  let lock_1296 (st_1297:int) (k_lock_5596:(int -> X)) =
    let u_2492 (k_lock_u_5607:(unit -> X)) =
      if st_1297 = 0
      then
        k_lock_u_5607 ()
      else
        <|fail|> () k_lock_u_5607
    in
    u_2492 (fun (():unit) -> k_lock_5596 1)
  in
  let unlock_1298 (st_1299:int) (k_unlock_5617:(int -> X)) =
    let u_2497 (k_unlock_u_5628:(unit -> X)) =
      if st_1299 = 1
      then
        k_unlock_u_5628 ()
      else
        <|fail|> () k_unlock_u_5628
    in
    u_2497 (fun (():unit) -> k_unlock_5617 0)
  in
  let f17_1300 (n_1301:int) (st_1302:int) (k_f17_5638:(int -> X)) =
    if n_1301 > 0
    then
      lock_1296 st_1302 k_f17_5638
    else
      k_f17_5638 st_1302
  in
  let g17_1303 (n_1304:int) (st_1305:int) (k_g17_5660:(int -> X)) =
    if n_1304 >= 0
    then
      unlock_1298 st_1305 k_g17_5660
    else
      k_g17_5660 st_1305
  in
  let rec sum_1308 (n_1309:int) (k_sum_5726:(int -> X)) =
    if n_1309 <= 0
    then
      k_sum_5726 0
    else
      sum_1308
        (n_1309 - 1) (fun (x_5730:int) -> k_sum_5726 (n_1309 + x_5730))
  in
  let make_array21_1312 (n_1313:int) (i_1314:int) 
                       (k_make_array21_5783:(int -> X)) =
    let u_2549 (k_make_array21_u_5794:(unit -> X)) =
      if 0 <= i_1314 && i_1314 < n_1313
      then
        k_make_array21_u_5794 ()
      else
        <|fail|> () k_make_array21_u_5794
    in
    u_2549 (fun (():unit) -> k_make_array21_5783 0)
  in
  let update21_1315 (i_1316:int) (a_1317:(int -> (int -> X) -> X)) 
                   (x_1318:int) (j_1319:int) 
                   (k_update21_5808:(int -> X)) =
    if j_1319 > i_1316 - 1 && j_1319 <= i_1316
    then
      k_update21_5808 x_1318
    else
      a_1317 j_1319 k_update21_5808
  in
  let rec init_1320 (i_1321:int) (n_1322:int) 
                   (a_1323:(int -> (int -> X) -> X)) 
                   (k_init_5841:((int -> (int -> X) -> X) -> X)) =
    if i_1321 >= n_1322
    then
      k_init_5841 a_1323
    else
      init_1320
        (i_1321 + 1) n_1322 (update21_1315 i_1321 a_1323 1) k_init_5841
  in
  let m21_1324 (k_1325:int) (n_1326:int) (i_1327:int) 
              (k_m21_5908:(unit -> X)) =
    if k_1325 >= 0 && k_1325 <= 0
    then
      init_1320
        k_1325 n_1326 (make_array21_1312 n_1326) 
        (fun (x_5980:(int -> (int -> X) -> X)) ->
           if 0 <= i_1327 && i_1327 < n_1326
           then
             x_5980
               i_1327 
               (fun (x_5950:int) ->
                  if x_5950 >= 1
                  then
                    k_m21_5908 ()
                  else
                    <|fail|> () k_m21_5908)
           else
             k_m21_5908 ())
    else
      k_m21_5908 ()
  in
  let make_array23_1329 (n_1330:int) (i_1331:int) 
                       (k_make_array23_5993:(int -> X)) =
    k_make_array23_5993 (n_1330 - i_1331)
  in
  let rec array_max23_1332 (x_2665:int) (i_1334:int) 
                          (x_2672:(int -> (int -> X) -> X)) 
                          (m_1336:int) (k_array_max23_6004:(int -> X)) =
    if i_1334 >= x_2665
    then
      k_array_max23_6004 m_1336
    else
      x_2672
        i_1334 
        (fun (x_6043:int) ->
           let z_1338 (k_array_max23_z_6020:(int -> X)) =
             if x_6043 > m_1336
             then
               k_array_max23_z_6020 x_6043
             else
               k_array_max23_z_6020 m_1336
           in
           z_1338
             (fun (z_6042:int) ->
                array_max23_1332
                  x_2665 (i_1334 + 1) x_2672 z_6042 k_array_max23_6004))
  in
  let m23_1339 (n_1340:int) (i_1341:int) (k_m23_6060:(unit -> X)) =
    if n_1340 > 0 && (i_1341 >= 0 && i_1341 <= 0)
    then
      array_max23_1332
        n_1340 i_1341 (make_array23_1329 n_1340) (-1) 
        (fun (m_6094:int) ->
           if m_6094 >= n_1340
           then
             k_m23_6060 ()
           else
             <|fail|> () k_m23_6060)
    else
      k_m23_6060 ()
  in
  let main_1343 (n_1344:int) (m_1345:int) (k_main_6106:(unit -> X)) =
    if n_1344 = 7
    then
      zip_1199
        m_1345 m_1345 
        (fun (x_4489:int) ->
           map_1202
             x_4489 
             (fun (x_4467:int) ->
                if x_4467 = m_1345
                then
                  k_main_6106 ()
                else
                  <|fail|> () k_main_6106))
    else
      if n_1344 = 9
      then
        f9_1211
          m_1345 m_1345 
          (fun (x_4537:int) ->
             f9_1211
               x_4537 m_1345 
               (fun (m_4620:int) ->
                  f9_1211
                    m_1345 m_4620 
                    (fun (x_4596:int) ->
                       if x_4596 = m_4620
                       then
                         k_main_6106 ()
                       else
                         <|fail|> () k_main_6106)))
      else
        if n_1344 = 11
        then
          mult_1231
            m_1345 m_1345 
            (fun (x_4814:int) ->
               if m_1345 <= x_4814
               then
                 k_main_6106 ()
               else
                 <|fail|> () k_main_6106)
        else
          if n_1344 = 12
          then
            m12_1263 m_1345 k_main_6106
          else
            if n_1344 = 13
            then
              f13_1271
                m_1345 0 
                (fun (x_5367:int) ->
                   g13_1274
                     m_1345 x_5367 
                     (fun (x_5344:int) ->
                        if x_5344 = 0
                        then
                          k_main_6106 ()
                        else
                          <|fail|> () k_main_6106))
            else
              if n_1344 = 14
              then
                sum_1279
                  m_1345 
                  (fun (x_5414:int) ->
                     if m_1345 <= x_5414
                     then
                       k_main_6106 ()
                     else
                       <|fail|> () k_main_6106)
              else
                if n_1344 = 15
                then
                  mult_1283
                    m_1345 m_1345 
                    (fun (x_5473:int) ->
                       if m_1345 + 1 <= x_5473
                       then
                         k_main_6106 ()
                       else
                         <|fail|> () k_main_6106)
                else
                  if n_1344 = 16
                  then
                    repeat_1290
                      succ_1288 m_1345 0 
                      (fun (x_5559:int) ->
                         if x_5559 > m_1345
                         then
                           k_main_6106 ()
                         else
                           <|fail|> () k_main_6106)
                  else
                    if n_1344 = 17
                    then
                      f17_1300
                        m_1345 0 
                        (fun (x_5708:int) ->
                           g17_1303
                             m_1345 x_5708 
                             (fun (x_5685:int) ->
                                if x_5685 = 0
                                then
                                  k_main_6106 ()
                                else
                                  <|fail|> () k_main_6106))
                    else
                      if n_1344 = 18
                      then
                        sum_1308
                          m_1345 
                          (fun (x_5755:int) ->
                             if m_1345 + 1 <= x_5755
                             then
                               k_main_6106 ()
                             else
                               <|fail|> () k_main_6106)
                      else
                        if n_1344 = 21
                        then
                          m21_1324 m_1345 m_1345 m_1345 k_main_6106
                        else
                          m23_1339 m_1345 m_1345 k_main_6106
  in
  let main_2762 (k_main_6283:(unit -> X)) =
    let arg1_2758 (k_main_arg1_6288:(int -> X)) =
      rand_int_cps () k_main_arg1_6288
    in
    arg1_2758
      (fun (arg1_6318:int) ->
         let arg2_2760 (k_main_arg2_6300:(int -> X)) =
           rand_int_cps () k_main_arg2_6300
         in
         arg2_2760
           (fun (arg2_6317:int) ->
              main_1343 arg1_6318 arg2_6317 k_main_6283))
  in
  main_2762 (fun (():unit) -> {end}) # [ACPS])


Fatal error: out of memory.
107.363

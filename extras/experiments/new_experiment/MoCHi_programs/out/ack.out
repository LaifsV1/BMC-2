/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 ack.ml

parsed:
 let rec ackermann_1199 m_1200 n_1201 =
   if m_1200 = 0
   then
     n_1201 + 1
   else
     if n_1201 = 0
     then
       ackermann_1199 (m_1200 - 1) 1
     else
       ackermann_1199 (m_1200 - 1) (ackermann_1199 m_1200 (n_1201 - 1))
 in
 let main_1202 m_1203 n_1204 = if m_1203 >= 0 && n_1204 >= 0 then assert (ackermann_1199 m_1203 n_1204 >= n_1204) in
 ()


###set_main:
 let rec ackermann_1199 (m_1200:int) (n_1201:int) =
   if m_1200 = 0
   then
     n_1201 + 1
   else
     if n_1201 = 0
     then
       ackermann_1199 (m_1200 - 1) 1
     else
       ackermann_1199 (m_1200 - 1) (ackermann_1199 m_1200 (n_1201 - 1))
 in
 let main_1202 (m_1203:int) (n_1204:int) =
   if m_1203 >= 0 && n_1204 >= 0 then assert (ackermann_1199 m_1203 n_1204 >= n_1204)
 in
 (let arg1_2040 = rand_int () in
  let arg2_2042 = rand_int () in
  main_1202 arg1_2040 arg2_2042); ()

###CPS:
 (let rec ackermann_1199 (m_1200:int) (n_1201:int) (k_ackermann_2227:(int -> X)) =
    if m_1200 = 0
    then
      k_ackermann_2227 (n_1201 + 1)
    else
      if n_1201 = 0
      then
        ackermann_1199 (m_1200 - 1) 1 k_ackermann_2227
      else
        ackermann_1199 m_1200 (n_1201 - 1) (fun (x_2260:int) -> ackermann_1199 (m_1200 - 1) x_2260 k_ackermann_2227)
  in
  let main_1202 (m_1203:int) (n_1204:int) (k_main_2276:(unit -> X)) =
    if m_1203 >= 0 && n_1204 >= 0
    then
      ackermann_1199
        m_1203 n_1204 (fun (x_2279:int) -> if x_2279 >= n_1204 then k_main_2276 () else <|fail|> () k_main_2276)
    else
      k_main_2276 ()
  in
  let main_2044 (k_main_2314:(unit -> X)) =
    let arg1_2040 (k_main_arg1_2319:(int -> X)) = rand_int_cps () k_main_arg1_2319 in
    arg1_2040
      (fun (arg1_2349:int) ->
         let arg2_2042 (k_main_arg2_2331:(int -> X)) = rand_int_cps () k_main_arg2_2331 in
         arg2_2042 (fun (arg2_2348:int) -> main_1202 arg1_2349 arg2_2348 k_main_2314))
  in
  main_2044 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec ackermann_1199 (m_1200:int) (n_1201:int) (k_ackermann_2227:(int -> X)) =
    if m_1200 = 0
    then
      k_ackermann_2227 (n_1201 + 1)
    else
      if n_1201 = 0
      then
        ackermann_1199 (m_1200 - 1) 1 k_ackermann_2227
      else
        ackermann_1199 m_1200 (n_1201 - 1) (fun (x_2260:int) -> ackermann_1199 (m_1200 - 1) x_2260 k_ackermann_2227)
  in
  let main_1202 (m_1203:int) (n_1204:int) (k_main_2276:(unit -> X)) =
    if m_1203 >= 0 && n_1204 >= 0
    then
      ackermann_1199
        m_1203 n_1204 (fun (x_2279:int) -> if x_2279 >= n_1204 then k_main_2276 () else <|fail|> () k_main_2276)
    else
      k_main_2276 ()
  in
  let main_2044 (k_main_2314:(unit -> X)) =
    let arg1_2040 (k_main_arg1_2319:(int -> X)) = rand_int_cps () k_main_arg1_2319 in
    arg1_2040
      (fun (arg1_2349:int) ->
         let arg2_2042 (k_main_arg2_2331:(int -> X)) = rand_int_cps () k_main_arg2_2331 in
         arg2_2042 (fun (arg2_2348:int) -> main_1202 arg1_2349 arg2_2348 k_main_2314))
  in
  main_2044 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2541
  main_2541 -> (main_2044 f_2546).
  ackermann_1199 m_1200 n_1201 k_ackermann_2227 when (m_1200 = 0) -> (k_ackermann_2227 (n_1201 + 1)).
  ackermann_1199 m_1200 n_1201 k_ackermann_2227 when (not (m_1200 = 0)) ->
      (br_ackermann_2547 (n_1201 = 0) m_1200 n_1201 k_ackermann_2227).
  arg1_2040 k_main_arg1_2319 -> (rand_int k_main_arg1_2319).
  arg2_2042 arg1_2349 k_main_arg2_2331 -> (rand_int k_main_arg2_2331).
  br_ackermann_2547 b_2548 m_1200 n_1201 k_ackermann_2227 when b_2548 ->
      (ackermann_1199 (m_1200 - 1) 1 k_ackermann_2227).
  br_ackermann_2547 b_2548 m_1200 n_1201 k_ackermann_2227 when (not b_2548) ->
      (ackermann_1199 m_1200 (n_1201 - 1) (f_ackermann_2542 m_1200 n_1201 k_ackermann_2227)).
  f_2546 main_2350 -> end.
  f_ackermann_2542 m_1200 n_1201 k_ackermann_2227 x_2260 -> (ackermann_1199 (m_1200 - 1) x_2260 k_ackermann_2227).
  f_f_main_2545 arg1_2349 k_main_2314 arg2_2348 -> (main_1202 arg1_2349 arg2_2348 k_main_2314).
  f_main_2543 m_1203 n_1204 k_main_2276 x_2279 when (x_2279 >= n_1204) -> (k_main_2276 ()).
  f_main_2543 m_1203 n_1204 k_main_2276 x_2279 when (not (x_2279 >= n_1204)) -> (fail_2549 true k_main_2276).
  f_main_2544 k_main_2314 arg1_2349 -> (arg2_2042 arg1_2349 (f_f_main_2545 arg1_2349 k_main_2314)).
  fail_2549 b k -> {fail} => (k ()).
  main_1202 m_1203 n_1204 k_main_2276 when ((m_1203 >= 0) && (n_1204 >= 0)) ->
      (ackermann_1199 m_1203 n_1204 (f_main_2543 m_1203 n_1204 k_main_2276)).
  main_1202 m_1203 n_1204 k_main_2276 when (not ((m_1203 >= 0) && (n_1204 >= 0))) -> (k_main_2276 ()).
  main_2044 k_main_2314 -> (arg1_2040 (f_main_2544 k_main_2314)).
Types:
  main_2541 : X
  ackermann_1199 : (int -> int -> (int -> X) -> X)
  fail_2549 : (x_2:bool[x_2] -> (unit -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2541 ... --> 
  main_2044 ... --> 
  arg1_2040 ... --> 
  f_main_2544 ... --> 
  arg2_2042 ... --> 
  f_f_main_2545 ... --> 
  main_1202 [1/2] ... --> 
  ackermann_1199 [1/2] ... --> 
  f_main_2543 [2/2] ... --> 
  fail_2549 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!

(1-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_2541
  main_2541 -> (main_2044 f_2546).
  ackermann_1199 m_1200 n_1201 k_ackermann_2227 when (m_1200 = 0) -> (k_ackermann_2227 (n_1201 + 1)).
  ackermann_1199 m_1200 n_1201 k_ackermann_2227 when (not (m_1200 = 0)) ->
      (br_ackermann_2547 (n_1201 = 0) m_1200 n_1201 k_ackermann_2227).
  arg1_2040 k_main_arg1_2319 -> (rand_int k_main_arg1_2319).
  arg2_2042 arg1_2349 k_main_arg2_2331 -> (rand_int k_main_arg2_2331).
  br_ackermann_2547 b_2548 m_1200 n_1201 k_ackermann_2227 when b_2548 ->
      (ackermann_1199 (m_1200 - 1) 1 k_ackermann_2227).
  br_ackermann_2547 b_2548 m_1200 n_1201 k_ackermann_2227 when (not b_2548) ->
      (ackermann_1199 m_1200 (n_1201 - 1) (f_ackermann_2542 m_1200 n_1201 k_ackermann_2227)).
  f_2546 main_2350 -> end.
  f_ackermann_2542 m_1200 n_1201 k_ackermann_2227 x_2260 -> (ackermann_1199 (m_1200 - 1) x_2260 k_ackermann_2227).
  f_f_main_2545 arg1_2349 k_main_2314 arg2_2348 -> (main_1202 arg1_2349 arg2_2348 k_main_2314).
  f_main_2543 m_1203 n_1204 k_main_2276 x_2279 when (x_2279 >= n_1204) -> (k_main_2276 ()).
  f_main_2543 m_1203 n_1204 k_main_2276 x_2279 when (not (x_2279 >= n_1204)) -> (fail_2549 true k_main_2276).
  f_main_2544 k_main_2314 arg1_2349 -> (arg2_2042 arg1_2349 (f_f_main_2545 arg1_2349 k_main_2314)).
  fail_2549 b k -> {fail} => (k ()).
  main_1202 m_1203 n_1204 k_main_2276 when ((m_1203 >= 0) && (n_1204 >= 0)) ->
      (ackermann_1199 m_1203 n_1204 (f_main_2543 m_1203 n_1204 k_main_2276)).
  main_1202 m_1203 n_1204 k_main_2276 when (not ((m_1203 >= 0) && (n_1204 >= 0))) -> (k_main_2276 ()).
  main_2044 k_main_2314 -> (arg1_2040 (f_main_2544 k_main_2314)).
Types:
  main_2541 : X
  ackermann_1199 : (int -> x_3:int -> (x_5:int[1 <= -x_3 + x_5] -> X) -> X)
  fail_2549 : (x_2:bool[x_2] -> (unit -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!


========================================================================================================================

Safe!

Refinement Types:
  ackermann: (int -> x_7:int -> {x_8:int | 1 <= -x_7 + x_8})

CEGAR-cycles: 2
total: 0.521 sec
  abst: 0.260 sec
  mc: 0.008 sec
  refine: 0.133 sec
0.525

/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 mult-e.ml

parsed:
 let rec mult_1199 n_1200 m_1201 = if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1) in
 let main_1202 n_1203 = assert (n_1203 + 1 <= mult_1199 n_1203 n_1203) in
 ()


###set_main:
 let rec mult_1199 (n_1200:int) (m_1201:int) =
   if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1)
 in
 let main_1202 (n_1203:int) = assert (n_1203 + 1 <= mult_1199 n_1203 n_1203) in
 (let arg1_2027 = rand_int () in
  main_1202 arg1_2027); ()

###Eliminate_redundant_arguments:
 let rec mult_1199 (n_1200:int) (m_1201:int) =
   if n_1200 <= 0 || m_1201 <= 0 then 0 else n_1200 + mult_1199 n_1200 (m_1201 - 1)
 in
 let main_1202 (n_1203:int) = assert (n_1203 + 1 <= mult_1199 n_1203 n_1203) in
 (let arg1_2027 = rand_int () in
  main_1202 arg1_2027); ()

###CPS:
 (let rec mult_1199 (n_1200:int) (m_1201:int) (k_mult_2145:(int -> X)) =
    if n_1200 <= 0 || m_1201 <= 0
    then
      k_mult_2145 0
    else
      mult_1199 n_1200 (m_1201 - 1) (fun (x_2149:int) -> k_mult_2145 (n_1200 + x_2149))
  in
  let main_2029 (k_main_2205:(unit -> X)) =
    let arg1_2027 (k_main_arg1_2210:(int -> X)) = rand_int_cps () k_main_arg1_2210 in
    arg1_2027
      (fun (arg1_2226:int) ->
         mult_1199
           arg1_2226 arg1_2226 
           (fun (x_2176:int) -> if arg1_2226 + 1 <= x_2176 then k_main_2205 () else <|fail|> () k_main_2205))
  in
  main_2029 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec mult_1199 (n_1200:int) (m_1201:int) (k_mult_2145:(int -> X)) =
    if n_1200 <= 0 || m_1201 <= 0
    then
      k_mult_2145 0
    else
      mult_1199 n_1200 (m_1201 - 1) (fun (x_2149:int) -> k_mult_2145 (n_1200 + x_2149))
  in
  let main_2029 (k_main_2205:(unit -> X)) =
    let arg1_2027 (k_main_arg1_2210:(int -> X)) = rand_int_cps () k_main_arg1_2210 in
    arg1_2027
      (fun (arg1_2226:int) ->
         mult_1199
           arg1_2226 arg1_2226 
           (fun (x_2176:int) -> if arg1_2226 + 1 <= x_2176 then k_main_2205 () else <|fail|> () k_main_2205))
  in
  main_2029 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2345
  main_2345 -> (main_2029 f_2349).
  arg1_2027 k_main_arg1_2210 -> (rand_int k_main_arg1_2210).
  f_2349 main_2227 -> end.
  f_f_main_2348 arg1_2226 k_main_2205 x_2176 when ((arg1_2226 + 1) <= x_2176) -> (k_main_2205 ()).
  f_f_main_2348 arg1_2226 k_main_2205 x_2176 when (not ((arg1_2226 + 1) <= x_2176)) -> (fail_2350 true k_main_2205).
  f_main_2347 k_main_2205 arg1_2226 -> (mult_1199 arg1_2226 arg1_2226 (f_f_main_2348 arg1_2226 k_main_2205)).
  f_mult_2346 m_1201 n_1200 k_mult_2145 x_2149 -> (k_mult_2145 (n_1200 + x_2149)).
  fail_2350 b k -> {fail} => (k ()).
  main_2029 k_main_2205 -> (arg1_2027 (f_main_2347 k_main_2205)).
  mult_1199 n_1200 m_1201 k_mult_2145 when ((n_1200 <= 0) || (m_1201 <= 0)) -> (k_mult_2145 0).
  mult_1199 n_1200 m_1201 k_mult_2145 when (not ((n_1200 <= 0) || (m_1201 <= 0))) ->
      (mult_1199 n_1200 (m_1201 - 1) (f_mult_2346 m_1201 n_1200 k_mult_2145)).
Types:
  main_2345 : X
  fail_2350 : (x_2:bool[x_2] -> (unit -> X) -> X)
  mult_1199 : (int -> int -> (int -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2345 ... --> 
  main_2029 ... --> 
  arg1_2027 ... --> 
  f_main_2347 ... --> 
  mult_1199 [1/2] ... --> 
  f_f_main_2348 [2/2] ... --> 
  fail_2350 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!


========================================================================================================================

Unsafe!

Input for main:
  0
Error trace:
  main 0 ->
    mult 0 0 ->
      if true then ... ->
    if false then ... ->
  FAIL!

CEGAR-cycles: 1
total: 0.152 sec
  abst: 0.044 sec
  mc: 0.001 sec
  refine: 0.032 sec
0.152

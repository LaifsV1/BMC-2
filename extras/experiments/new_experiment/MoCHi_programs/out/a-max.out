/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 a-max.ml

parsed:
 let make_array_1199 n_1200 i_1201 = n_1200 - i_1201 in
 let rec array_max_1202 x_2018 i_1204 x_2025 m_1206 =
   if i_1204 >= x_2018
   then
     m_1206
   else
     let x_1207 = x_2025 i_1204 in
     let z_1208 = if x_1207 > m_1206 then x_1207 else m_1206 in
     array_max_1202 x_2018 (i_1204 + 1) x_2025 z_1208
 in
 let main_1209 n_1210 i_1211 =
   if n_1210 > 0 && (i_1211 >= 0 && i_1211 <= 0)
   then
     let m_1212 = array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) in
     assert (m_1212 >= n_1210)
 in
 ()


###set_main:
 let make_array_1199 (n_1200:int) (i_1201:int) = n_1200 - i_1201 in
 let rec array_max_1202 (x_2018:int) (i_1204:int) (x_2025:(int -> int)) (m_1206:int) =
   if i_1204 >= x_2018
   then
     m_1206
   else
     let x_1207 = x_2025 i_1204 in
     let z_1208 = if x_1207 > m_1206 then x_1207 else m_1206 in
     array_max_1202 x_2018 (i_1204 + 1) x_2025 z_1208
 in
 let main_1209 (n_1210:int) (i_1211:int) =
   if n_1210 > 0 && (i_1211 >= 0 && i_1211 <= 0)
   then
     let m_1212 = array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) in
     assert (m_1212 >= n_1210)
 in
 (let arg1_2067 = rand_int () in
  let arg2_2069 = rand_int () in
  main_1209 arg1_2067 arg2_2069); ()

###Eliminate_redundant_arguments:
 let make_array_1199 (n_1200:int) (i_1201:int) = n_1200 - i_1201 in
 let rec array_max_1202 (x_2018:int) (i_1204:int) (x_2025:(int -> int)) (m_1206:int) =
   if i_1204 >= x_2018
   then
     m_1206
   else
     let x_1207 = x_2025 i_1204 in
     let z_1208 = if x_1207 > m_1206 then x_1207 else m_1206 in
     array_max_1202 x_2018 (i_1204 + 1) x_2025 z_1208
 in
 let main_1209 (n_1210:int) (i_1211:int) =
   if n_1210 > 0 && (i_1211 >= 0 && i_1211 <= 0)
   then
     let m_1212 = array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) in
     assert (m_1212 >= n_1210)
 in
 (let arg1_2067 = rand_int () in
  let arg2_2069 = rand_int () in
  main_1209 arg1_2067 arg2_2069); ()

###CPS:
 (let make_array_1199 (n_1200:int) (i_1201:int) (k_make_array_2276:(int -> X)) = k_make_array_2276 (n_1200 - i_1201) in
  let rec array_max_1202 (x_2018:int) (i_1204:int) (x_2025:(int -> (int -> X) -> X)) 
                        (m_1206:int) (k_array_max_2287:(int -> X)) =
    if i_1204 >= x_2018
    then
      k_array_max_2287 m_1206
    else
      x_2025
        i_1204 
        (fun (x_2326:int) ->
           let z_1208 (k_array_max_z_2303:(int -> X)) =
             if x_2326 > m_1206 then k_array_max_z_2303 x_2326 else k_array_max_z_2303 m_1206
           in
           z_1208 (fun (z_2325:int) -> array_max_1202 x_2018 (i_1204 + 1) x_2025 z_2325 k_array_max_2287))
  in
  let main_1209 (n_1210:int) (i_1211:int) (k_main_2343:(unit -> X)) =
    if n_1210 > 0 && (i_1211 >= 0 && i_1211 <= 0)
    then
      array_max_1202
        n_1210 i_1211 (make_array_1199 n_1210) (-1) 
        (fun (m_2377:int) -> if m_2377 >= n_1210 then k_main_2343 () else <|fail|> () k_main_2343)
    else
      k_main_2343 ()
  in
  let main_2071 (k_main_2389:(unit -> X)) =
    let arg1_2067 (k_main_arg1_2394:(int -> X)) = rand_int_cps () k_main_arg1_2394 in
    arg1_2067
      (fun (arg1_2424:int) ->
         let arg2_2069 (k_main_arg2_2406:(int -> X)) = rand_int_cps () k_main_arg2_2406 in
         arg2_2069 (fun (arg2_2423:int) -> main_1209 arg1_2424 arg2_2423 k_main_2389))
  in
  main_2071 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let make_array_1199 (n_1200:int) (i_1201:int) (k_make_array_2276:(int -> X)) = k_make_array_2276 (n_1200 - i_1201) in
  let rec array_max_1202 (x_2018:int) (i_1204:int) (x_2025:(int -> (int -> X) -> X)) 
                        (m_1206:int) (k_array_max_2287:(int -> X)) =
    if i_1204 >= x_2018
    then
      k_array_max_2287 m_1206
    else
      x_2025
        i_1204 
        (fun (x_2326:int) ->
           let z_1208 (k_array_max_z_2303:(int -> X)) =
             if x_2326 > m_1206 then k_array_max_z_2303 x_2326 else k_array_max_z_2303 m_1206
           in
           z_1208 (fun (z_2325:int) -> array_max_1202 x_2018 (i_1204 + 1) x_2025 z_2325 k_array_max_2287))
  in
  let main_1209 (n_1210:int) (i_1211:int) (k_main_2343:(unit -> X)) =
    if n_1210 > 0 && (i_1211 >= 0 && i_1211 <= 0)
    then
      array_max_1202
        n_1210 i_1211 (make_array_1199 n_1210) (-1) 
        (fun (m_2377:int) -> if m_2377 >= n_1210 then k_main_2343 () else <|fail|> () k_main_2343)
    else
      k_main_2343 ()
  in
  let main_2071 (k_main_2389:(unit -> X)) =
    let arg1_2067 (k_main_arg1_2394:(int -> X)) = rand_int_cps () k_main_arg1_2394 in
    arg1_2067
      (fun (arg1_2424:int) ->
         let arg2_2069 (k_main_arg2_2406:(int -> X)) = rand_int_cps () k_main_arg2_2406 in
         arg2_2069 (fun (arg2_2423:int) -> main_1209 arg1_2424 arg2_2423 k_main_2389))
  in
  main_2071 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2660
  main_2660 -> (main_2071 f_2666).
  arg1_2067 k_main_arg1_2394 -> (rand_int k_main_arg1_2394).
  arg2_2069 arg1_2424 k_main_arg2_2406 -> (rand_int k_main_arg2_2406).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (i_1204 >= x_2018) -> (k_array_max_2287 m_1206).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (not (i_1204 >= x_2018)) ->
      (x_2025 i_1204 (f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025)).
  f_2666 main_2425 -> end.
  f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025 x_2326 ->
      (z_1208 i_1204 m_1206 x_2018 x_2326 (f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025)).
  f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025 z_2325 ->
      (array_max_1202 x_2018 (i_1204 + 1) x_2025 z_2325 k_array_max_2287).
  f_f_main_2665 arg1_2424 k_main_2389 arg2_2423 -> (main_1209 arg1_2424 arg2_2423 k_main_2389).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (m_2377 >= n_1210) -> (k_main_2343 ()).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (not (m_2377 >= n_1210)) -> (fail_2667 true k_main_2343).
  f_main_2664 k_main_2389 arg1_2424 -> (arg2_2069 arg1_2424 (f_f_main_2665 arg1_2424 k_main_2389)).
  fail_2667 b k -> {fail} => (k ()).
  main_1209 n_1210 i_1211 k_main_2343 when ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0))) ->
      (array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) (f_main_2663 i_1211 n_1210 k_main_2343)).
  main_1209 n_1210 i_1211 k_main_2343 when (not ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0)))) ->
      (k_main_2343 ()).
  main_2071 k_main_2389 -> (arg1_2067 (f_main_2664 k_main_2389)).
  make_array_1199 n_1200 i_1201 k_make_array_2276 -> (k_make_array_2276 (n_1200 - i_1201)).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (x_2326 > m_1206) -> (k_array_max_z_2303 x_2326).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (not (x_2326 > m_1206)) -> (k_array_max_z_2303 m_1206).
Types:
  main_2660 : X
  array_max_1202 : (int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  fail_2667 : (x_2:bool[x_2] -> (unit -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2660 ... --> 
  main_2071 ... --> 
  arg1_2067 ... --> 
  f_main_2664 ... --> 
  arg2_2069 ... --> 
  f_f_main_2665 ... --> 
  main_1209 [1/2] ... --> 
  array_max_1202 [1/2] ... --> 
  f_main_2663 [2/2] ... --> 
  fail_2667 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!

(1-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_2660
  main_2660 -> (main_2071 f_2666).
  arg1_2067 k_main_arg1_2394 -> (rand_int k_main_arg1_2394).
  arg2_2069 arg1_2424 k_main_arg2_2406 -> (rand_int k_main_arg2_2406).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (i_1204 >= x_2018) -> (k_array_max_2287 m_1206).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (not (i_1204 >= x_2018)) ->
      (x_2025 i_1204 (f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025)).
  f_2666 main_2425 -> end.
  f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025 x_2326 ->
      (z_1208 i_1204 m_1206 x_2018 x_2326 (f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025)).
  f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025 z_2325 ->
      (array_max_1202 x_2018 (i_1204 + 1) x_2025 z_2325 k_array_max_2287).
  f_f_main_2665 arg1_2424 k_main_2389 arg2_2423 -> (main_1209 arg1_2424 arg2_2423 k_main_2389).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (m_2377 >= n_1210) -> (k_main_2343 ()).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (not (m_2377 >= n_1210)) -> (fail_2667 true k_main_2343).
  f_main_2664 k_main_2389 arg1_2424 -> (arg2_2069 arg1_2424 (f_f_main_2665 arg1_2424 k_main_2389)).
  fail_2667 b k -> {fail} => (k ()).
  main_1209 n_1210 i_1211 k_main_2343 when ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0))) ->
      (array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) (f_main_2663 i_1211 n_1210 k_main_2343)).
  main_1209 n_1210 i_1211 k_main_2343 when (not ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0)))) ->
      (k_main_2343 ()).
  main_2071 k_main_2389 -> (arg1_2067 (f_main_2664 k_main_2389)).
  make_array_1199 n_1200 i_1201 k_make_array_2276 -> (k_make_array_2276 (n_1200 - i_1201)).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (x_2326 > m_1206) -> (k_array_max_z_2303 x_2326).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (not (x_2326 > m_1206)) -> (k_array_max_z_2303 m_1206).
Types:
  main_2660 : X
  array_max_1202 : (x_2:int -> x_3:int -> (int -> (int -> X) -> X) -> int[1 <= x_2 - x_3] -> (int -> X) -> X)
  fail_2667 : (x_2:bool[x_2] -> (unit -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_2660 ... --> 
  main_2071 ... --> 
  arg1_2067 ... --> 
  f_main_2664 ... --> 
  arg2_2069 ... --> 
  f_f_main_2665 ... --> 
  main_1209 [1/2] ... --> 
  array_max_1202 [2/2] ... --> 
  make_array_1199 ... --> 
  f_array_max_2661 ... --> 
  z_1208 [1/2] ... --> 
  f_f_array_max_2662 ... --> 
  array_max_1202 [1/2] ... --> 
  f_main_2663 [2/2] ... --> 
  fail_2667 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counterexample ... DONE!

(2-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_2660
  main_2660 -> (main_2071 f_2666).
  arg1_2067 k_main_arg1_2394 -> (rand_int k_main_arg1_2394).
  arg2_2069 arg1_2424 k_main_arg2_2406 -> (rand_int k_main_arg2_2406).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (i_1204 >= x_2018) -> (k_array_max_2287 m_1206).
  array_max_1202 x_2018 i_1204 x_2025 m_1206 k_array_max_2287 when (not (i_1204 >= x_2018)) ->
      (x_2025 i_1204 (f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025)).
  f_2666 main_2425 -> end.
  f_array_max_2661 i_1204 m_1206 x_2018 k_array_max_2287 x_2025 x_2326 ->
      (z_1208 i_1204 m_1206 x_2018 x_2326 (f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025)).
  f_f_array_max_2662 i_1204 m_1206 x_2018 x_2326 k_array_max_2287 x_2025 z_2325 ->
      (array_max_1202 x_2018 (i_1204 + 1) x_2025 z_2325 k_array_max_2287).
  f_f_main_2665 arg1_2424 k_main_2389 arg2_2423 -> (main_1209 arg1_2424 arg2_2423 k_main_2389).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (m_2377 >= n_1210) -> (k_main_2343 ()).
  f_main_2663 i_1211 n_1210 k_main_2343 m_2377 when (not (m_2377 >= n_1210)) -> (fail_2667 true k_main_2343).
  f_main_2664 k_main_2389 arg1_2424 -> (arg2_2069 arg1_2424 (f_f_main_2665 arg1_2424 k_main_2389)).
  fail_2667 b k -> {fail} => (k ()).
  main_1209 n_1210 i_1211 k_main_2343 when ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0))) ->
      (array_max_1202 n_1210 i_1211 (make_array_1199 n_1210) (-1) (f_main_2663 i_1211 n_1210 k_main_2343)).
  main_1209 n_1210 i_1211 k_main_2343 when (not ((n_1210 > 0) && ((i_1211 >= 0) && (i_1211 <= 0)))) ->
      (k_main_2343 ()).
  main_2071 k_main_2389 -> (arg1_2067 (f_main_2664 k_main_2389)).
  make_array_1199 n_1200 i_1201 k_make_array_2276 -> (k_make_array_2276 (n_1200 - i_1201)).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (x_2326 > m_1206) -> (k_array_max_z_2303 x_2326).
  z_1208 i_1204 m_1206 x_2018 x_2326 k_array_max_z_2303 when (not (x_2326 > m_1206)) -> (k_array_max_z_2303 m_1206).
Types:
  main_2660 : X
  array_max_1202 : (x_2:int ->
                    x_3:int ->
                    (x_5:int[x_5 <= 0] -> (x_7:int[x_7 >= x_2] -> X) -> X) ->
                    x_10:int[x_10 >= x_2; x_3 <= 0; 1 <= x_2 - x_3] -> (x_12:int[x_12 >= x_2] -> X) -> X)
  fail_2667 : (x_2:bool[x_2] -> (unit -> X) -> X)

(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!


========================================================================================================================

Safe!

Refinement Types:
  array_max: (x_95:int ->
                x_12:int ->
                  (({x_104:int | x_104 > 0} -> int) /\ ({x_101:int | x_101 <= 0} -> {x_102:int | x_102 >= x_95})) ->
                    (({x_14:int | x_12 <= 0 && x_14 >= x_95} -> {x_15:int | x_15 >= x_95}) /\ 
                     ({x_56:int | x_12 > 0 && x_56 >= x_95} -> {x_57:int | x_57 >= x_95}) /\ 
                     ({x_98:int | (x_12 <= 0 && 1 <= x_95 - x_12) && x_98 < x_95} -> {x_99:int | x_99 >= x_95})))

CEGAR-cycles: 3
total: 5.346 sec
  abst: 2.350 sec
  mc: 0.120 sec
  refine: 0.602 sec
5.348

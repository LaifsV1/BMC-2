/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 repeat-e.ml

parsed:
 let succ_1199 x_1200 = x_1200 + 1 in
 let rec repeat_1201 x_2013 n_1203 s_1204 =
   if n_1203 = 0 then s_1204 else x_2013 (repeat_1201 x_2013 (n_1203 - 1) s_1204)
 in
 let main_1205 n_1206 = assert (repeat_1201 succ_1199 n_1206 0 > n_1206) in
 ()


###set_main:
 let succ_1199 (x_1200:int) = x_1200 + 1 in
 let rec repeat_1201 (x_2013:(int -> int)) (n_1203:int) (s_1204:int) =
   if n_1203 = 0 then s_1204 else x_2013 (repeat_1201 x_2013 (n_1203 - 1) s_1204)
 in
 let main_1205 (n_1206:int) = assert (repeat_1201 succ_1199 n_1206 0 > n_1206) in
 (let arg1_2038 = rand_int () in
  main_1205 arg1_2038); ()

###Eliminate_redundant_arguments:
 let succ_1199 (x_1200:int) = x_1200 + 1 in
 let rec repeat_1201 (x_2013:(int -> int)) (n_1203:int) (s_1204:int) =
   if n_1203 = 0 then s_1204 else x_2013 (repeat_1201 x_2013 (n_1203 - 1) s_1204)
 in
 let main_1205 (n_1206:int) = assert (repeat_1201 succ_1199 n_1206 0 > n_1206) in
 (let arg1_2038 = rand_int () in
  main_1205 arg1_2038); ()

###CPS:
 (let succ_1199 (x_1200:int) (k_succ_2189:(int -> X)) = k_succ_2189 (x_1200 + 1) in
  let rec repeat_1201 (x_2013:(int -> (int -> X) -> X)) (n_1203:int) (s_1204:int) (k_repeat_2199:(int -> X)) =
    if n_1203 = 0
    then
      k_repeat_2199 s_1204
    else
      repeat_1201 x_2013 (n_1203 - 1) s_1204 (fun (x_2227:int) -> x_2013 x_2227 k_repeat_2199)
  in
  let main_2040 (k_main_2283:(unit -> X)) =
    let arg1_2038 (k_main_arg1_2288:(int -> X)) = rand_int_cps () k_main_arg1_2288 in
    arg1_2038
      (fun (arg1_2304:int) ->
         repeat_1201
           succ_1199 arg1_2304 0 
           (fun (x_2246:int) -> if x_2246 > arg1_2304 then k_main_2283 () else <|fail|> () k_main_2283))
  in
  main_2040 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let succ_1199 (x_1200:int) (k_succ_2189:(int -> X)) = k_succ_2189 (x_1200 + 1) in
  let rec repeat_1201 (x_2013:(int -> (int -> X) -> X)) (n_1203:int) (s_1204:int) (k_repeat_2199:(int -> X)) =
    if n_1203 = 0
    then
      k_repeat_2199 s_1204
    else
      repeat_1201 x_2013 (n_1203 - 1) s_1204 (fun (x_2227:int) -> x_2013 x_2227 k_repeat_2199)
  in
  let main_2040 (k_main_2283:(unit -> X)) =
    let arg1_2038 (k_main_arg1_2288:(int -> X)) = rand_int_cps () k_main_arg1_2288 in
    arg1_2038
      (fun (arg1_2304:int) ->
         repeat_1201
           succ_1199 arg1_2304 0 
           (fun (x_2246:int) -> if x_2246 > arg1_2304 then k_main_2283 () else <|fail|> () k_main_2283))
  in
  main_2040 (fun (():unit) -> {end}) # [ACPS])


Program with abstraction types (CEGAR-cycle 1)::
Main: main_2455
  main_2455 -> (main_2040 f_2459).
  arg1_2038 k_main_arg1_2288 -> (rand_int k_main_arg1_2288).
  f_2459 main_2305 -> end.
  f_f_main_2458 arg1_2304 k_main_2283 x_2246 when (x_2246 > arg1_2304) -> (k_main_2283 ()).
  f_f_main_2458 arg1_2304 k_main_2283 x_2246 when (not (x_2246 > arg1_2304)) -> (fail_2460 true k_main_2283).
  f_main_2457 k_main_2283 arg1_2304 -> (repeat_1201 succ_1199 arg1_2304 0 (f_f_main_2458 arg1_2304 k_main_2283)).
  f_repeat_2456 n_1203 s_1204 k_repeat_2199 x_2013 x_2227 -> (x_2013 x_2227 k_repeat_2199).
  fail_2460 b k -> {fail} => (k ()).
  main_2040 k_main_2283 -> (arg1_2038 (f_main_2457 k_main_2283)).
  repeat_1201 x_2013 n_1203 s_1204 k_repeat_2199 when (n_1203 = 0) -> (k_repeat_2199 s_1204).
  repeat_1201 x_2013 n_1203 s_1204 k_repeat_2199 when (not (n_1203 = 0)) ->
      (repeat_1201 x_2013 (n_1203 - 1) s_1204 (f_repeat_2456 n_1203 s_1204 k_repeat_2199 x_2013)).
  succ_1199 x_1200 k_succ_2189 -> (k_succ_2189 (x_1200 + 1)).
Types:
  main_2455 : X
  fail_2460 : (x_2:bool[x_2] -> (unit -> X) -> X)
  repeat_1201 : ((int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2455 ... --> 
  main_2040 ... --> 
  arg1_2038 ... --> 
  f_main_2457 ... --> 
  repeat_1201 [2/2] ... --> 
  repeat_1201 [1/2] ... --> 
  f_repeat_2456 ... --> 
  succ_1199 ... --> 
  f_f_main_2458 [2/2] ... --> 
  fail_2460 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counterexample ... DONE!


========================================================================================================================

Unsafe!

Input for main:
  1
Error trace:
  main 1 ->
    repeat <fun> 1 0 ->
      if false then ... ->
      repeat <fun> 0 0 ->
        if true then ... ->
      succ 0 ->
    if false then ... ->
  FAIL!

CEGAR-cycles: 1
total: 0.188 sec
  abst: 0.036 sec
  mc: 0.003 sec
  refine: 0.053 sec
0.189

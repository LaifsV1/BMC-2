/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
/bin/sh: 1: no: not found
MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.35
  OCaml version: 4.03.0
  Command: bin/mochi.opt -limit 180 200_2-e.ml

parsed:
 let rec copy_1199 x_1200 = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 n_1202 = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 n_1204 exn_1205 =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 n_1207 = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_1208 _ = assert false; 1 in
 let m2_1210 n_1211 = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_1208 in
                                       () in
 let f3_1213 n_1214 k_1215 = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 n_1217 = assert (n_1217 = 0) in
 let m3_1218 n_1219 = f3_1213 n_1219 g3_1216 in
 let c4_1220 _ = () in
 let b4_1222 x_1223 _ = x_1223 1 in
 let a4_1225 x_2096 x_2100 q_1228 =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 n_1230 x_1231 q_1232 =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 n_1234 q_1235 = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 n_1237 = s4_1233 n_1237 0 in
 let f5_1238 x_1239 g_1240 = g_1240 (x_1239 + 1) in
 let h5_1241 y_1242 = assert (y_1242 > 0) in
 let m5_1243 n_1244 = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 x_1246 g_1247 = g_1247 (x_1246 + 1) in
 let h6_1248 z_1249 y_1250 = assert (y_1250 > z_1249) in
 let m6_1251 n_1252 = if n_1252 >= 0 then f6_1245 n_1252 (h6_1248 n_1252) in
 let rec zip_1253 x_1254 y_1255 =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 x_1257 =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 n_1259 =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 n_1261 i_1262 =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 i_1264 a_1265 x_1266 j_1267 =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 i_1269 n_1270 a_1271 =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 k_1273 n_1274 i_1275 =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 x_1278 =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 n_1280 =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 n_1282 i_1283 = n_1282 - i_1283 in
 let rec array_max23_1284 x_2393 i_1286 x_2400 m_1288 =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 n_1292 i_1293 =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 n_1296 i_1297 =
   n_1296 - i_1297
 in
 let rec array_max24_1298 x_2458 i_1300 x_2465 
                         m_1302 =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 n_1306 i_1307 =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 n_1310 m_1311 =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 n_1313 m_1314 =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 n_1316 m_1317 =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 n_1319 m_1320 =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 n_1322 i_1323 =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 i_1325 a_1326 x_1327 j_1328 =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 i_1330 n_1331 a_1332 =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 k_1334 n_1335 i_1336 =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 n_1339 m_1340 =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 n_1342 m_1343 =
   if n_1342 <= 0
   then
     0
   else
     if Pervasives.== n_1342 1
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let m28_1344 n_1345 m_1346 =
   assert (Pervasives.==
            (mult_sum_1341 n_1345 m_1346) 
            (n_1345 * m_1346))
 in
 let main_1347 n_1348 m_1349 =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 ()


###set_main:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_1208 (_:!!!) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_1208 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_1248 (z_1249:!!!) (y_1250:!!!) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_1248 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 (n_1261:int) (i_1262:int) =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 (i_1264:int) (a_1265:(int -> int)) 
                  (x_1266:int) (j_1267:int) =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 (i_1269:int) (n_1270:int) 
                  (a_1271:(int -> int)) =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 (x_1278:int) =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 (n_1280:int) =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 (n_1282:int) (i_1283:int) =
   n_1282 - i_1283
 in
 let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                         (x_2400:(int -> int)) 
                         (m_1288:int) =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 (n_1292:int) (i_1293:int) =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 (n_1296:int) 
                      (i_1297:int) =
   n_1296 - i_1297
 in
 let rec array_max24_1298 (x_2458:int) 
                         (i_1300:int) 
                         (x_2465:(int -> int)) 
                         (m_1302:int) =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 (n_1306:int) (i_1307:int) =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 (n_1310:int) (m_1311:int) =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 (n_1313:int) (m_1314:int) =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 (n_1316:int) (m_1317:int) =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 (n_1319:int) (m_1320:int) =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 (n_1322:int) 
                      (i_1323:int) =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 (i_1325:int) 
                  (a_1326:(int -> int)) 
                  (x_1327:int) (j_1328:int) =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 (i_1330:int) (n_1331:int) 
                    (a_1332:(int -> int)) =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 (k_1334:int) (n_1335:int) 
             (i_1336:int) =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 (n_1339:int) (m_1340:int) =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 (n_1342:int) 
                      (m_1343:int) =
   if n_1342 <= 0
   then
     0
   else
     if Pervasives.== n_1342 1
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let m28_1344 (n_1345:int) (m_1346:int) =
   assert (Pervasives.==
            (mult_sum_1341 n_1345 m_1346) 
            (n_1345 * m_1346))
 in
 let main_1347 (n_1348:int) (m_1349:int) =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 (let arg1_2767 = rand_int () in
  let arg2_2769 = rand_int () in
  main_1347 arg1_2767 arg2_2769);
 ()

###Copy_poly:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2773 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2773 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2772 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2772 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 (n_1261:int) (i_1262:int) =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 (i_1264:int) (a_1265:(int -> int)) 
                  (x_1266:int) (j_1267:int) =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 (i_1269:int) (n_1270:int) 
                  (a_1271:(int -> int)) =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 (x_1278:int) =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 (n_1280:int) =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 (n_1282:int) (i_1283:int) =
   n_1282 - i_1283
 in
 let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                         (x_2400:(int -> int)) 
                         (m_1288:int) =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 (n_1292:int) (i_1293:int) =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 (n_1296:int) 
                      (i_1297:int) =
   n_1296 - i_1297
 in
 let rec array_max24_1298 (x_2458:int) 
                         (i_1300:int) 
                         (x_2465:(int -> int)) 
                         (m_1302:int) =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 (n_1306:int) (i_1307:int) =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 (n_1310:int) (m_1311:int) =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 (n_1313:int) (m_1314:int) =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 (n_1316:int) (m_1317:int) =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 (n_1319:int) (m_1320:int) =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 (n_1322:int) 
                      (i_1323:int) =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 (i_1325:int) 
                  (a_1326:(int -> int)) 
                  (x_1327:int) (j_1328:int) =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 (i_1330:int) (n_1331:int) 
                    (a_1332:(int -> int)) =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 (k_1334:int) (n_1335:int) 
             (i_1336:int) =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 (n_1339:int) (m_1340:int) =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 (n_1342:int) 
                      (m_1343:int) =
   if n_1342 <= 0
   then
     0
   else
     if Pervasives.== n_1342 1
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let m28_1344 (n_1345:int) (m_1346:int) =
   assert (Pervasives.==
            (mult_sum_1341 n_1345 m_1346) 
            (n_1345 * m_1346))
 in
 let main_1347 (n_1348:int) (m_1349:int) =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 (let arg1_2767 = rand_int () in
  let arg2_2769 = rand_int () in
  main_1347 arg1_2767 arg2_2769);
 ()

###Make_ext_funs:
 let Pervasives.==_3084 (_:int) (_:int) = rand_bool () in
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2773 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2773 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2772 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2772 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 (n_1261:int) (i_1262:int) =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 (i_1264:int) (a_1265:(int -> int)) 
                  (x_1266:int) (j_1267:int) =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 (i_1269:int) (n_1270:int) 
                  (a_1271:(int -> int)) =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 (x_1278:int) =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 (n_1280:int) =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 (n_1282:int) (i_1283:int) =
   n_1282 - i_1283
 in
 let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                         (x_2400:(int -> int)) 
                         (m_1288:int) =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 (n_1292:int) (i_1293:int) =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 (n_1296:int) 
                      (i_1297:int) =
   n_1296 - i_1297
 in
 let rec array_max24_1298 (x_2458:int) 
                         (i_1300:int) 
                         (x_2465:(int -> int)) 
                         (m_1302:int) =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 (n_1306:int) (i_1307:int) =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 (n_1310:int) (m_1311:int) =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 (n_1313:int) (m_1314:int) =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 (n_1316:int) (m_1317:int) =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 (n_1319:int) (m_1320:int) =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 (n_1322:int) 
                      (i_1323:int) =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 (i_1325:int) 
                  (a_1326:(int -> int)) 
                  (x_1327:int) (j_1328:int) =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 (i_1330:int) (n_1331:int) 
                    (a_1332:(int -> int)) =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 (k_1334:int) (n_1335:int) 
             (i_1336:int) =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 (n_1339:int) (m_1340:int) =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 (n_1342:int) 
                      (m_1343:int) =
   if n_1342 <= 0
   then
     0
   else
     if Pervasives.==_3084 n_1342 1
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let m28_1344 (n_1345:int) (m_1346:int) =
   assert (Pervasives.==_3084
            (mult_sum_1341 n_1345 m_1346) 
            (n_1345 * m_1346))
 in
 let main_1347 (n_1348:int) (m_1349:int) =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 (let arg1_2767 = rand_int () in
  let arg2_2769 = rand_int () in
  main_1347 arg1_2767 arg2_2769);
 ()

###Beta_reduce_trivial:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2773 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2773 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2772 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2772 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 (n_1261:int) (i_1262:int) =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 (i_1264:int) (a_1265:(int -> int)) 
                  (x_1266:int) (j_1267:int) =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 (i_1269:int) (n_1270:int) 
                  (a_1271:(int -> int)) =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 (x_1278:int) =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 (n_1280:int) =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 (n_1282:int) (i_1283:int) =
   n_1282 - i_1283
 in
 let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                         (x_2400:(int -> int)) 
                         (m_1288:int) =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 (n_1292:int) (i_1293:int) =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 (n_1296:int) 
                      (i_1297:int) =
   n_1296 - i_1297
 in
 let rec array_max24_1298 (x_2458:int) 
                         (i_1300:int) 
                         (x_2465:(int -> int)) 
                         (m_1302:int) =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 (n_1306:int) (i_1307:int) =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 (n_1310:int) (m_1311:int) =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 (n_1313:int) (m_1314:int) =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 (n_1316:int) (m_1317:int) =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 (n_1319:int) (m_1320:int) =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 (n_1322:int) 
                      (i_1323:int) =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 (i_1325:int) 
                  (a_1326:(int -> int)) 
                  (x_1327:int) (j_1328:int) =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 (i_1330:int) (n_1331:int) 
                    (a_1332:(int -> int)) =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 (k_1334:int) (n_1335:int) 
             (i_1336:int) =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 (n_1339:int) (m_1340:int) =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 (n_1342:int) 
                      (m_1343:int) =
   if n_1342 <= 0
   then
     0
   else
     if (rand_bool ())
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let main_1347 (n_1348:int) (m_1349:int) =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 (let arg1_2767 = rand_int () in
  let arg2_2769 = rand_int () in
  main_1347 arg1_2767 arg2_2769);
 ()

###Eliminate_redundant_arguments:
 let rec copy_1199 (x_1200:int) = if x_1200 = 0 then 0 else 1 + copy_1199 (x_1200 - 1) in
 let m1_1201 (n_1202:int) = assert (copy_1199 (copy_1199 n_1202) = n_1202) in
 let rec fact_1203 (n_1204:int) (exn_1205:(int -> int)) =
   if n_1204 <= 0
   then
     exn_1205 0
   else
     let exn_1206 (n_1207:int) = if n_1207 = 0 then 1 else exn_1205 n_1207 in
     n_1204 * fact_1203 (n_1204 - 1) exn_1206
 in
 let exn_2773 (_:int) = assert false; 1 in
 let m2_1210 (n_1211:int) = if n_1211 > 0 then let x_1212 = fact_1203 n_1211 exn_2773 in
                                             () in
 let f3_1213 (n_1214:int) (k_1215:(int -> unit)) = if n_1214 >= 0 then () else k_1215 0 in
 let g3_1216 (n_1217:int) = assert (n_1217 = 0) in
 let m3_1218 (n_1219:int) = f3_1213 n_1219 g3_1216 in
 let c4_1220 (_:int) = () in
 let b4_1222 (x_1223:(int -> unit)) (_:int) = x_1223 1 in
 let a4_1225 (x_2096:(int -> unit)) (x_2100:(int -> unit)) (q_1228:int) =
   if q_1228 = 0 then x_2096 0; x_2100 0 else assert false
 in
 let rec f_1229 (n_1230:int) (x_1231:(int -> unit)) (q_1232:int) =
   if n_1230 <= 0
   then
     x_1231 q_1232
   else
     a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232
 in
 let s4_1233 (n_1234:int) (q_1235:int) = f_1229 n_1234 c4_1220 q_1235 in
 let m4_1236 (n_1237:int) = s4_1233 n_1237 0 in
 let f5_1238 (x_1239:int) (g_1240:(int -> unit)) = g_1240 (x_1239 + 1) in
 let h5_1241 (y_1242:int) = assert (y_1242 > 0) in
 let m5_1243 (n_1244:int) = if n_1244 > 0 then f5_1238 n_1244 h5_1241 in
 let f6_1245 (x_1246:int) (g_1247:(int -> unit)) = g_1247 (x_1246 + 1) in
 let h6_2772 (z_1249:int) (y_1250:int) = assert (y_1250 > z_1249) in
 let m6_1251 (n_1252:int) =
   if n_1252 >= 0 then f6_1245 n_1252 (h6_2772 n_1252)
 in
 let rec zip_1253 (x_1254:int) (y_1255:int) =
   if x_1254 = 0
   then
     if y_1255 = 0 then x_1254 else assert false
   else
     if y_1255 = 0
     then
       assert false
     else
       1 + zip_1253 (x_1254 - 1) (y_1255 - 1)
 in
 let rec map_1256 (x_1257:int) =
   if x_1257 = 0 then x_1257 else 1 + map_1256 (x_1257 - 1)
 in
 let m7_1258 (n_1259:int) =
   assert (map_1256 (zip_1253 n_1259 n_1259) = n_1259)
 in
 let make_array21_1260 (n_1261:int) (i_1262:int) =
   assert (0 <= i_1262 && i_1262 < n_1261); 0
 in
 let update21_1263 (i_1264:int) (a_1265:(int -> int)) 
                  (x_1266:int) (j_1267:int) =
   if j_1267 > i_1264 - 1 && j_1267 <= i_1264
   then
     x_1266
   else
     a_1265 j_1267
 in
 let rec init_1268 (i_1269:int) (n_1270:int) 
                  (a_1271:(int -> int)) =
   if i_1269 >= n_1270
   then
     a_1271
   else
     init_1268
       (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1)
 in
 let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) =
   if k_1273 >= 0 && k_1273 <= 0
   then
     let x_1276 =
       init_1268 k_1273 n_1274 (make_array21_1260 n_1274)
     in
     if 0 <= i_1275 && i_1275 < n_1274
     then
       assert (x_1276 i_1275 >= 1)
 in
 let rec mc91_1277 (x_1278:int) =
   if x_1278 > 100
   then
     x_1278 - 10
   else
     mc91_1277 (mc91_1277 (x_1278 + 11))
 in
 let m22_1279 (n_1280:int) =
   if n_1280 <= 102 then assert (mc91_1277 n_1280 = 91)
 in
 let make_array23_1281 (n_1282:int) (i_1283:int) =
   n_1282 - i_1283
 in
 let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                         (x_2400:(int -> int)) 
                         (m_1288:int) =
   if i_1286 >= x_2393
   then
     m_1288
   else
     let x_1289 = x_2400 i_1286 in
     let z_1290 =
       if x_1289 > m_1288 then x_1289 else m_1288
     in
     array_max23_1284
       x_2393 (i_1286 + 1) x_2400 z_1290
 in
 let m23_1291 (n_1292:int) (i_1293:int) =
   if
     n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
   then
     let m_1294 =
       array_max23_1284
         n_1292 i_1293 
         (make_array23_1281 n_1292) (-1)
     in
     assert (m_1294 >= n_1292)
 in
 let make_array24_1295 (n_1296:int) 
                      (i_1297:int) =
   n_1296 - i_1297
 in
 let rec array_max24_1298 (x_2458:int) 
                         (i_1300:int) 
                         (x_2465:(int -> int)) 
                         (m_1302:int) =
   if i_1300 >= x_2458
   then
     m_1302
   else
     let x_1303 = x_2465 i_1300 in
     let z_1304 =
       if x_1303 > m_1302
       then
         x_1303
       else
         m_1302
     in
     array_max24_1298
       x_2458 (i_1300 + 1) x_2465 z_1304
 in
 let m24_1305 (n_1306:int) (i_1307:int) =
   if
     n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
   then
     let m_1308 =
       array_max24_1298
         n_1306 i_1307 
         (make_array24_1295 n_1306) (-1)
     in
     assert (m_1308 <> n_1306)
 in
 let rec mult25_1309 (n_1310:int) (m_1311:int) =
   if n_1310 <= 0 || m_1311 <= 0
   then
     0
   else
     n_1310 + mult25_1309 n_1310 (m_1311 - 1)
 in
 let m25_1312 (n_1313:int) (m_1314:int) =
   assert (mult25_1309 m_1314 m_1314 <=
           mult25_1309 n_1313 n_1313)
 in
 let rec mult26_1315 (n_1316:int) (m_1317:int) =
   if n_1316 <= 0 || m_1317 <= 0
   then
     0
   else
     n_1316 + mult26_1315 n_1316 (m_1317 - 1)
 in
 let m26_1318 (n_1319:int) (m_1320:int) =
   assert (n_1319 * 2 <=
           mult26_1315 n_1319 m_1320)
 in
 let make_array27_1321 (n_1322:int) 
                      (i_1323:int) =
   assert (0 <= i_1323 && i_1323 < n_1322); 0
 in
 let update27_1324 (i_1325:int) 
                  (a_1326:(int -> int)) 
                  (x_1327:int) (j_1328:int) =
   if j_1328 > i_1325 - 1 && j_1328 <= i_1325
   then
     x_1327
   else
     a_1326 j_1328
 in
 let rec init27_1329 (i_1330:int) (n_1331:int) 
                    (a_1332:(int -> int)) =
   if i_1330 >= n_1331
   then
     a_1332
   else
     init27_1329
       (i_1330 + 1) n_1331 
       (update27_1324 i_1330 a_1332 1)
 in
 let m27_1333 (k_1334:int) (n_1335:int) 
             (i_1336:int) =
   if k_1334 >= 0 && k_1334 <= 0
   then
     let x_1337 =
       init27_1329
         k_1334 n_1335 
         (make_array27_1321 n_1335)
     in
     if 0 <= i_1336 && i_1336 < n_1335
     then
       assert (x_1337 i_1336 = 1)
 in
 let rec sum28_1338 (n_1339:int) (m_1340:int) =
   if n_1339 <= 0
   then
     m_1340
   else
     1 + sum28_1338 (n_1339 - 1) m_1340
 in
 let rec mult_sum_1341 (n_1342:int) 
                      (m_1343:int) =
   if n_1342 <= 0
   then
     0
   else
     if (rand_bool ())
     then
       m_1343
     else
       sum28_1338
         m_1343 
         (mult_sum_1341 (n_1342 - 1) m_1343)
 in
 let main_1347 (n_1348:int) (m_1349:int) =
   if n_1348 = 1
   then
     m1_1201 m_1349
   else
     if n_1348 = 2
     then
       m2_1210 m_1349
     else
       if n_1348 = 3
       then
         m3_1218 m_1349
       else
         if n_1348 = 4
         then
           m4_1236 m_1349
         else
           if n_1348 = 5
           then
             m5_1243 m_1349
           else
             if n_1348 = 6
             then
               m6_1251 m_1349
             else
               if n_1348 = 7
               then
                 m7_1258 m_1349
               else
                 if n_1348 = 21
                 then
                   m21_1272
                     m_1349 m_1349 m_1349
                 else
                   if n_1348 = 22
                   then
                     m22_1279 m_1349
                   else
                     if n_1348 = 23
                     then
                       m23_1291 m_1349 m_1349
                     else
                       if n_1348 = 24
                       then
                         m24_1305 m_1349 m_1349
                       else
                         if n_1348 = 25
                         then
                           m25_1312
                             m_1349 m_1349
                         else
                           if n_1348 = 26
                           then
                             m26_1318
                               m_1349 m_1349
                           else
                             m27_1333
                               m_1349 m_1349 
                               m_1349
 in
 (let arg1_2767 = rand_int () in
  let arg2_2769 = rand_int () in
  main_1347 arg1_2767 arg2_2769);
 ()

###CPS:
 (let rec copy_1199 (x_1200:int) (k_copy_4459:(int -> X)) =
    if x_1200 = 0 then k_copy_4459 0 else copy_1199 (x_1200 - 1) (fun (x_4463:int) -> k_copy_4459 (1 + x_4463))
  in
  let rec fact_1203 (n_1204:int) (exn_1205:(int -> (int -> X) -> X)) (k_fact_4529:(int -> X)) =
    if n_1204 <= 0
    then
      exn_1205 0 k_fact_4529
    else
      let exn_1206 (n_1207:int) (k_fact_exn_4543:(int -> X)) =
        if n_1207 = 0 then k_fact_exn_4543 1 else exn_1205 n_1207 k_fact_exn_4543
      in
      fact_1203 (n_1204 - 1) exn_1206 (fun (x_4564:int) -> k_fact_4529 (n_1204 * x_4564))
  in
  let exn_2773 (_:int) (_:(int -> X)) = <|fail|> () (fun (():unit) -> _|_) in
  let m2_1210 (n_1211:int) (k_m2_4628:(unit -> X)) =
    if n_1211 > 0 then fact_1203 n_1211 exn_2773 (fun (_:int) -> k_m2_4628 ()) else k_m2_4628 ()
  in
  let f3_1213 (n_1214:int) (k_1215:(int -> (unit -> X) -> X)) (k_f3_4668:(unit -> X)) =
    if n_1214 >= 0 then k_f3_4668 () else k_1215 0 k_f3_4668
  in
  let g3_1216 (n_1217:int) (k_g3_4693:(unit -> X)) =
    if n_1217 = 0 then k_g3_4693 () else <|fail|> () k_g3_4693
  in
  let c4_1220 (_:int) (k_c4_4741:(unit -> X)) = k_c4_4741 () in
  let b4_1222 (x_1223:(int -> (unit -> X) -> X)) (_:int) 
             (k_b4_4751:(unit -> X)) = x_1223 1 k_b4_4751
  in
  let a4_1225 (x_2096:(int -> (unit -> X) -> X)) 
             (x_2100:(int -> (unit -> X) -> X)) (q_1228:int) 
             (k_a4_4778:(unit -> X)) =
    if q_1228 = 0
    then
      x_2096 0 (fun (():unit) -> x_2100 0 k_a4_4778)
    else
      <|fail|> () (fun (():unit) -> _|_)
  in
  let rec f_1229 (n_1230:int) (x_1231:(int -> (unit -> X) -> X)) (q_1232:int) 
                (k_f_4835:(unit -> X)) =
    if n_1230 <= 0
    then
      x_1231 q_1232 k_f_4835
    else
      a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232 k_f_4835
  in
  let h5_1241 (y_1242:int) (k_h5_4968:(unit -> X)) =
    if y_1242 > 0 then k_h5_4968 () else <|fail|> () k_h5_4968
  in
  let m5_1243 (n_1244:int) (k_m5_4986:(unit -> X)) =
    if n_1244 > 0
    then
      h5_1241 (n_1244 + 1) k_m5_4986
    else
      k_m5_4986 ()
  in
  let h6_2772 (z_1249:int) (y_1250:int) (k_h6_5044:(unit -> X)) =
    if y_1250 > z_1249 then k_h6_5044 () else <|fail|> () k_h6_5044
  in
  let m6_1251 (n_1252:int) (k_m6_5063:(unit -> X)) =
    if n_1252 >= 0
    then
      (h6_2772 n_1252) (n_1252 + 1) k_m6_5063
    else
      k_m6_5063 ()
  in
  let rec zip_1253 (x_1254:int) (y_1255:int) 
                  (k_zip_5098:(int -> X)) =
    if x_1254 = 0
    then
      if y_1255 = 0
      then
        k_zip_5098 x_1254
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1255 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1253
          (x_1254 - 1) (y_1255 - 1) 
          (fun (x_5130:int) -> k_zip_5098 (1 + x_5130))
  in
  let rec map_1256 (x_1257:int) (k_map_5157:(int -> X)) =
    if x_1257 = 0
    then
      k_map_5157 x_1257
    else
      map_1256
        (x_1257 - 1) 
        (fun (x_5161:int) -> k_map_5157 (1 + x_5161))
  in
  let make_array21_1260 (n_1261:int) (i_1262:int) 
                       (k_make_array21_5225:(int -> X)) =
    let u_2260 (k_make_array21_u_5236:(unit -> X)) =
      if 0 <= i_1262 && i_1262 < n_1261
      then
        k_make_array21_u_5236 ()
      else
        <|fail|> () k_make_array21_u_5236
    in
    u_2260 (fun (():unit) -> k_make_array21_5225 0)
  in
  let update21_1263 (i_1264:int) 
                   (a_1265:(int -> (int -> X) -> X)) 
                   (x_1266:int) (j_1267:int) 
                   (k_update21_5250:(int -> X)) =
    if j_1267 > i_1264 - 1 && j_1267 <= i_1264
    then
      k_update21_5250 x_1266
    else
      a_1265 j_1267 k_update21_5250
  in
  let rec init_1268 (i_1269:int) (n_1270:int) 
                   (a_1271:(int -> (int -> X) -> X)) 
                   (k_init_5283:((int -> (int -> X) -> X) -> X)) =
    if i_1269 >= n_1270
    then
      k_init_5283 a_1271
    else
      init_1268
        (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1) 
        k_init_5283
  in
  let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) 
              (k_m21_5350:(unit -> X)) =
    if k_1273 >= 0 && k_1273 <= 0
    then
      init_1268
        k_1273 n_1274 (make_array21_1260 n_1274) 
        (fun (x_5422:(int -> (int -> X) -> X)) ->
           if 0 <= i_1275 && i_1275 < n_1274
           then
             x_5422
               i_1275 
               (fun (x_5392:int) ->
                  if x_5392 >= 1
                  then
                    k_m21_5350 ()
                  else
                    <|fail|> () k_m21_5350)
           else
             k_m21_5350 ())
    else
      k_m21_5350 ()
  in
  let rec mc91_1277 (x_1278:int) (k_mc91_5435:(int -> X)) =
    if x_1278 > 100
    then
      k_mc91_5435 (x_1278 - 10)
    else
      mc91_1277
        (x_1278 + 11) 
        (fun (x_5455:int) -> mc91_1277 x_5455 k_mc91_5435)
  in
  let m22_1279 (n_1280:int) (k_m22_5466:(unit -> X)) =
    if n_1280 <= 102
    then
      mc91_1277
        n_1280 
        (fun (x_5469:int) ->
           if x_5469 = 91
           then
             k_m22_5466 ()
           else
             <|fail|> () k_m22_5466)
    else
      k_m22_5466 ()
  in
  let make_array23_1281 (n_1282:int) (i_1283:int) 
                       (k_make_array23_5502:(int -> X)) =
    k_make_array23_5502 (n_1282 - i_1283)
  in
  let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                          (x_2400:(int -> (int -> X) -> X)) 
                          (m_1288:int) 
                          (k_array_max23_5513:(int -> X)) =
    if i_1286 >= x_2393
    then
      k_array_max23_5513 m_1288
    else
      x_2400
        i_1286 
        (fun (x_5552:int) ->
           let z_1290 (k_array_max23_z_5529:(int -> X)) =
             if x_5552 > m_1288
             then
               k_array_max23_z_5529 x_5552
             else
               k_array_max23_z_5529 m_1288
           in
           z_1290
             (fun (z_5551:int) ->
                array_max23_1284
                  x_2393 (i_1286 + 1) x_2400 z_5551 
                  k_array_max23_5513))
  in
  let m23_1291 (n_1292:int) (i_1293:int) 
              (k_m23_5569:(unit -> X)) =
    if n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
    then
      array_max23_1284
        n_1292 i_1293 (make_array23_1281 n_1292) (-1) 
        (fun (m_5603:int) ->
           if m_5603 >= n_1292
           then
             k_m23_5569 ()
           else
             <|fail|> () k_m23_5569)
    else
      k_m23_5569 ()
  in
  let make_array24_1295 (n_1296:int) (i_1297:int) 
                       (k_make_array24_5615:(int -> X)) =
    k_make_array24_5615 (n_1296 - i_1297)
  in
  let rec array_max24_1298 (x_2458:int) (i_1300:int) 
                          (x_2465:(int -> (int -> X) -> X)) 
                          (m_1302:int) 
                          (k_array_max24_5626:(int -> X)) =
    if i_1300 >= x_2458
    then
      k_array_max24_5626 m_1302
    else
      x_2465
        i_1300 
        (fun (x_5665:int) ->
           let z_1304 (k_array_max24_z_5642:(int -> X)) =
             if x_5665 > m_1302
             then
               k_array_max24_z_5642 x_5665
             else
               k_array_max24_z_5642 m_1302
           in
           z_1304
             (fun (z_5664:int) ->
                array_max24_1298
                  x_2458 (i_1300 + 1) x_2465 z_5664 
                  k_array_max24_5626))
  in
  let m24_1305 (n_1306:int) (i_1307:int) 
              (k_m24_5682:(unit -> X)) =
    if n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
    then
      array_max24_1298
        n_1306 i_1307 (make_array24_1295 n_1306) (-1) 
        (fun (m_5716:int) ->
           if m_5716 <> n_1306
           then
             k_m24_5682 ()
           else
             <|fail|> () k_m24_5682)
    else
      k_m24_5682 ()
  in
  let rec mult25_1309 (n_1310:int) (m_1311:int) 
                     (k_mult25_5728:(int -> X)) =
    if n_1310 <= 0 || m_1311 <= 0
    then
      k_mult25_5728 0
    else
      mult25_1309
        n_1310 (m_1311 - 1) 
        (fun (x_5732:int) -> k_mult25_5728 (n_1310 + x_5732))
  in
  let rec mult26_1315 (n_1316:int) (m_1317:int) 
                     (k_mult26_5800:(int -> X)) =
    if n_1316 <= 0 || m_1317 <= 0
    then
      k_mult26_5800 0
    else
      mult26_1315
        n_1316 (m_1317 - 1) 
        (fun (x_5804:int) -> k_mult26_5800 (n_1316 + x_5804))
  in
  let make_array27_1321 (n_1322:int) (i_1323:int) 
                       (k_make_array27_5861:(int -> X)) =
    let u_2575 (k_make_array27_u_5872:(unit -> X)) =
      if 0 <= i_1323 && i_1323 < n_1322
      then
        k_make_array27_u_5872 ()
      else
        <|fail|> () k_make_array27_u_5872
    in
    u_2575 (fun (():unit) -> k_make_array27_5861 0)
  in
  let update27_1324 (i_1325:int) 
                   (a_1326:(int -> (int -> X) -> X)) 
                   (x_1327:int) (j_1328:int) 
                   (k_update27_5886:(int -> X)) =
    if j_1328 > i_1325 - 1 && j_1328 <= i_1325
    then
      k_update27_5886 x_1327
    else
      a_1326 j_1328 k_update27_5886
  in
  let rec init27_1329 (i_1330:int) (n_1331:int) 
                     (a_1332:(int -> (int -> X) -> X)) 
                     (k_init27_5919:((int -> (int -> X) -> X) ->
                                       X)) =
    if i_1330 >= n_1331
    then
      k_init27_5919 a_1332
    else
      init27_1329
        (i_1330 + 1) n_1331 (update27_1324 i_1330 a_1332 1) 
        k_init27_5919
  in
  let m27_1333 (k_1334:int) (n_1335:int) (i_1336:int) 
              (k_m27_5986:(unit -> X)) =
    if k_1334 >= 0 && k_1334 <= 0
    then
      init27_1329
        k_1334 n_1335 (make_array27_1321 n_1335) 
        (fun (x_6058:(int -> (int -> X) -> X)) ->
           if 0 <= i_1336 && i_1336 < n_1335
           then
             x_6058
               i_1336 
               (fun (x_6028:int) ->
                  if x_6028 = 1
                  then
                    k_m27_5986 ()
                  else
                    <|fail|> () k_m27_5986)
           else
             k_m27_5986 ())
    else
      k_m27_5986 ()
  in
  let rec sum28_1338 (n_1339:int) (m_1340:int) 
                    (k_sum28_6071:(int -> X)) =
    if n_1339 <= 0
    then
      k_sum28_6071 m_1340
    else
      sum28_1338
        (n_1339 - 1) m_1340 
        (fun (x_6075:int) -> k_sum28_6071 (1 + x_6075))
  in
  let rec mult_sum_1341 (n_1342:int) (m_1343:int) 
                       (k_mult_sum_6098:(int -> X)) =
    if n_1342 <= 0
    then
      k_mult_sum_6098 0
    else
      rand_int_cps
        () 
        (fun (x_6101:int) ->
           if x_6101 = 0
           then
             k_mult_sum_6098 m_1343
           else
             mult_sum_1341
               (n_1342 - 1) m_1343 
               (fun (x_6134:int) ->
                  sum28_1338 m_1343 x_6134 k_mult_sum_6098))
  in
  let main_1347 (n_1348:int) (m_1349:int) 
               (k_main_6150:(unit -> X)) =
    if n_1348 = 1
    then
      copy_1199
        m_1349 
        (fun (x_4508:int) ->
           copy_1199
             x_4508 
             (fun (x_4487:int) ->
                if x_4487 = m_1349
                then
                  k_main_6150 ()
                else
                  <|fail|> () k_main_6150))
    else
      if n_1348 = 2
      then
        m2_1210 m_1349 k_main_6150
      else
        if n_1348 = 3
        then
          f3_1213 m_1349 g3_1216 k_main_6150
        else
          if n_1348 = 4
          then
            f_1229 m_1349 c4_1220 0 k_main_6150
          else
            if n_1348 = 5
            then
              m5_1243 m_1349 k_main_6150
            else
              if n_1348 = 6
              then
                m6_1251 m_1349 k_main_6150
              else
                if n_1348 = 7
                then
                  zip_1253
                    m_1349 m_1349 
                    (fun (x_5207:int) ->
                       map_1256
                         x_5207 
                         (fun (x_5185:int) ->
                            if x_5185 = m_1349
                            then
                              k_main_6150 ()
                            else
                              <|fail|> () k_main_6150))
                else
                  if n_1348 = 21
                  then
                    m21_1272 m_1349 m_1349 m_1349 k_main_6150
                  else
                    if n_1348 = 22
                    then
                      m22_1279 m_1349 k_main_6150
                    else
                      if n_1348 = 23
                      then
                        m23_1291 m_1349 m_1349 k_main_6150
                      else
                        if n_1348 = 24
                        then
                          m24_1305 m_1349 m_1349 k_main_6150
                        else
                          if n_1348 = 25
                          then
                            mult25_1309
                              m_1349 m_1349 
                              (fun (x_5758:int) ->
                                 mult25_1309
                                   m_1349 m_1349 
                                   (fun (x_5759:int) ->
                                      if x_5758 <= x_5759
                                      then
                                        k_main_6150 ()
                                      else
                                        <|fail|> () k_main_6150))
                          else
                            if n_1348 = 26
                            then
                              mult26_1315
                                m_1349 m_1349 
                                (fun (x_5831:int) ->
                                   if m_1349 * 2 <= x_5831
                                   then
                                     k_main_6150 ()
                                   else
                                     <|fail|> () k_main_6150)
                            else
                              m27_1333
                                m_1349 m_1349 m_1349 
                                k_main_6150
  in
  let main_2771 (k_main_6358:(unit -> X)) =
    let arg1_2767 (k_main_arg1_6363:(int -> X)) =
      rand_int_cps () k_main_arg1_6363
    in
    arg1_2767
      (fun (arg1_6393:int) ->
         let arg2_2769 (k_main_arg2_6375:(int -> X)) =
           rand_int_cps () k_main_arg2_6375
         in
         arg2_2769
           (fun (arg2_6392:int) ->
              main_1347 arg1_6393 arg2_6392 k_main_6358))
  in
  main_2771 (fun (():unit) -> {end}) # [ACPS])

###Remove_pair:
 (let rec copy_1199 (x_1200:int) (k_copy_4459:(int -> X)) =
    if x_1200 = 0 then k_copy_4459 0 else copy_1199 (x_1200 - 1) (fun (x_4463:int) -> k_copy_4459 (1 + x_4463))
  in
  let rec fact_1203 (n_1204:int) (exn_1205:(int -> (int -> X) -> X)) (k_fact_4529:(int -> X)) =
    if n_1204 <= 0
    then
      exn_1205 0 k_fact_4529
    else
      let exn_1206 (n_1207:int) (k_fact_exn_4543:(int -> X)) =
        if n_1207 = 0 then k_fact_exn_4543 1 else exn_1205 n_1207 k_fact_exn_4543
      in
      fact_1203 (n_1204 - 1) exn_1206 (fun (x_4564:int) -> k_fact_4529 (n_1204 * x_4564))
  in
  let exn_2773 (_:int) (_:(int -> X)) = <|fail|> () (fun (():unit) -> _|_) in
  let m2_1210 (n_1211:int) (k_m2_4628:(unit -> X)) =
    if n_1211 > 0 then fact_1203 n_1211 exn_2773 (fun (_:int) -> k_m2_4628 ()) else k_m2_4628 ()
  in
  let f3_1213 (n_1214:int) (k_1215:(int -> (unit -> X) -> X)) (k_f3_4668:(unit -> X)) =
    if n_1214 >= 0 then k_f3_4668 () else k_1215 0 k_f3_4668
  in
  let g3_1216 (n_1217:int) (k_g3_4693:(unit -> X)) =
    if n_1217 = 0 then k_g3_4693 () else <|fail|> () k_g3_4693
  in
  let c4_1220 (_:int) (k_c4_4741:(unit -> X)) = k_c4_4741 () in
  let b4_1222 (x_1223:(int -> (unit -> X) -> X)) (_:int) 
             (k_b4_4751:(unit -> X)) = x_1223 1 k_b4_4751
  in
  let a4_1225 (x_2096:(int -> (unit -> X) -> X)) 
             (x_2100:(int -> (unit -> X) -> X)) (q_1228:int) 
             (k_a4_4778:(unit -> X)) =
    if q_1228 = 0
    then
      x_2096 0 (fun (():unit) -> x_2100 0 k_a4_4778)
    else
      <|fail|> () (fun (():unit) -> _|_)
  in
  let rec f_1229 (n_1230:int) (x_1231:(int -> (unit -> X) -> X)) (q_1232:int) 
                (k_f_4835:(unit -> X)) =
    if n_1230 <= 0
    then
      x_1231 q_1232 k_f_4835
    else
      a4_1225 x_1231 (f_1229 (n_1230 - 1) (b4_1222 x_1231)) q_1232 k_f_4835
  in
  let h5_1241 (y_1242:int) (k_h5_4968:(unit -> X)) =
    if y_1242 > 0 then k_h5_4968 () else <|fail|> () k_h5_4968
  in
  let m5_1243 (n_1244:int) (k_m5_4986:(unit -> X)) =
    if n_1244 > 0
    then
      h5_1241 (n_1244 + 1) k_m5_4986
    else
      k_m5_4986 ()
  in
  let h6_2772 (z_1249:int) (y_1250:int) (k_h6_5044:(unit -> X)) =
    if y_1250 > z_1249 then k_h6_5044 () else <|fail|> () k_h6_5044
  in
  let m6_1251 (n_1252:int) (k_m6_5063:(unit -> X)) =
    if n_1252 >= 0
    then
      h6_2772 n_1252 (n_1252 + 1) k_m6_5063
    else
      k_m6_5063 ()
  in
  let rec zip_1253 (x_1254:int) (y_1255:int) 
                  (k_zip_5098:(int -> X)) =
    if x_1254 = 0
    then
      if y_1255 = 0
      then
        k_zip_5098 x_1254
      else
        <|fail|> () (fun (():unit) -> _|_)
    else
      if y_1255 = 0
      then
        <|fail|> () (fun (():unit) -> _|_)
      else
        zip_1253
          (x_1254 - 1) (y_1255 - 1) 
          (fun (x_5130:int) -> k_zip_5098 (1 + x_5130))
  in
  let rec map_1256 (x_1257:int) (k_map_5157:(int -> X)) =
    if x_1257 = 0
    then
      k_map_5157 x_1257
    else
      map_1256
        (x_1257 - 1) 
        (fun (x_5161:int) -> k_map_5157 (1 + x_5161))
  in
  let make_array21_1260 (n_1261:int) (i_1262:int) 
                       (k_make_array21_5225:(int -> X)) =
    let u_2260 (k_make_array21_u_5236:(unit -> X)) =
      if 0 <= i_1262 && i_1262 < n_1261
      then
        k_make_array21_u_5236 ()
      else
        <|fail|> () k_make_array21_u_5236
    in
    u_2260 (fun (():unit) -> k_make_array21_5225 0)
  in
  let update21_1263 (i_1264:int) 
                   (a_1265:(int -> (int -> X) -> X)) 
                   (x_1266:int) (j_1267:int) 
                   (k_update21_5250:(int -> X)) =
    if j_1267 > i_1264 - 1 && j_1267 <= i_1264
    then
      k_update21_5250 x_1266
    else
      a_1265 j_1267 k_update21_5250
  in
  let rec init_1268 (i_1269:int) (n_1270:int) 
                   (a_1271:(int -> (int -> X) -> X)) 
                   (k_init_5283:((int -> (int -> X) -> X) -> X)) =
    if i_1269 >= n_1270
    then
      k_init_5283 a_1271
    else
      init_1268
        (i_1269 + 1) n_1270 (update21_1263 i_1269 a_1271 1) 
        k_init_5283
  in
  let m21_1272 (k_1273:int) (n_1274:int) (i_1275:int) 
              (k_m21_5350:(unit -> X)) =
    if k_1273 >= 0 && k_1273 <= 0
    then
      init_1268
        k_1273 n_1274 (make_array21_1260 n_1274) 
        (fun (x_5422:(int -> (int -> X) -> X)) ->
           if 0 <= i_1275 && i_1275 < n_1274
           then
             x_5422
               i_1275 
               (fun (x_5392:int) ->
                  if x_5392 >= 1
                  then
                    k_m21_5350 ()
                  else
                    <|fail|> () k_m21_5350)
           else
             k_m21_5350 ())
    else
      k_m21_5350 ()
  in
  let rec mc91_1277 (x_1278:int) (k_mc91_5435:(int -> X)) =
    if x_1278 > 100
    then
      k_mc91_5435 (x_1278 - 10)
    else
      mc91_1277
        (x_1278 + 11) 
        (fun (x_5455:int) -> mc91_1277 x_5455 k_mc91_5435)
  in
  let m22_1279 (n_1280:int) (k_m22_5466:(unit -> X)) =
    if n_1280 <= 102
    then
      mc91_1277
        n_1280 
        (fun (x_5469:int) ->
           if x_5469 = 91
           then
             k_m22_5466 ()
           else
             <|fail|> () k_m22_5466)
    else
      k_m22_5466 ()
  in
  let make_array23_1281 (n_1282:int) (i_1283:int) 
                       (k_make_array23_5502:(int -> X)) =
    k_make_array23_5502 (n_1282 - i_1283)
  in
  let rec array_max23_1284 (x_2393:int) (i_1286:int) 
                          (x_2400:(int -> (int -> X) -> X)) 
                          (m_1288:int) 
                          (k_array_max23_5513:(int -> X)) =
    if i_1286 >= x_2393
    then
      k_array_max23_5513 m_1288
    else
      x_2400
        i_1286 
        (fun (x_5552:int) ->
           let z_1290 (k_array_max23_z_5529:(int -> X)) =
             if x_5552 > m_1288
             then
               k_array_max23_z_5529 x_5552
             else
               k_array_max23_z_5529 m_1288
           in
           z_1290
             (fun (z_5551:int) ->
                array_max23_1284
                  x_2393 (i_1286 + 1) x_2400 z_5551 
                  k_array_max23_5513))
  in
  let m23_1291 (n_1292:int) (i_1293:int) 
              (k_m23_5569:(unit -> X)) =
    if n_1292 > 0 && (i_1293 >= 0 && i_1293 <= 0)
    then
      array_max23_1284
        n_1292 i_1293 (make_array23_1281 n_1292) (-1) 
        (fun (m_5603:int) ->
           if m_5603 >= n_1292
           then
             k_m23_5569 ()
           else
             <|fail|> () k_m23_5569)
    else
      k_m23_5569 ()
  in
  let make_array24_1295 (n_1296:int) (i_1297:int) 
                       (k_make_array24_5615:(int -> X)) =
    k_make_array24_5615 (n_1296 - i_1297)
  in
  let rec array_max24_1298 (x_2458:int) (i_1300:int) 
                          (x_2465:(int -> (int -> X) -> X)) 
                          (m_1302:int) 
                          (k_array_max24_5626:(int -> X)) =
    if i_1300 >= x_2458
    then
      k_array_max24_5626 m_1302
    else
      x_2465
        i_1300 
        (fun (x_5665:int) ->
           let z_1304 (k_array_max24_z_5642:(int -> X)) =
             if x_5665 > m_1302
             then
               k_array_max24_z_5642 x_5665
             else
               k_array_max24_z_5642 m_1302
           in
           z_1304
             (fun (z_5664:int) ->
                array_max24_1298
                  x_2458 (i_1300 + 1) x_2465 z_5664 
                  k_array_max24_5626))
  in
  let m24_1305 (n_1306:int) (i_1307:int) 
              (k_m24_5682:(unit -> X)) =
    if n_1306 > 0 && (i_1307 >= 0 && i_1307 <= 0)
    then
      array_max24_1298
        n_1306 i_1307 (make_array24_1295 n_1306) (-1) 
        (fun (m_5716:int) ->
           if m_5716 <> n_1306
           then
             k_m24_5682 ()
           else
             <|fail|> () k_m24_5682)
    else
      k_m24_5682 ()
  in
  let rec mult25_1309 (n_1310:int) (m_1311:int) 
                     (k_mult25_5728:(int -> X)) =
    if n_1310 <= 0 || m_1311 <= 0
    then
      k_mult25_5728 0
    else
      mult25_1309
        n_1310 (m_1311 - 1) 
        (fun (x_5732:int) -> k_mult25_5728 (n_1310 + x_5732))
  in
  let rec mult26_1315 (n_1316:int) (m_1317:int) 
                     (k_mult26_5800:(int -> X)) =
    if n_1316 <= 0 || m_1317 <= 0
    then
      k_mult26_5800 0
    else
      mult26_1315
        n_1316 (m_1317 - 1) 
        (fun (x_5804:int) -> k_mult26_5800 (n_1316 + x_5804))
  in
  let make_array27_1321 (n_1322:int) (i_1323:int) 
                       (k_make_array27_5861:(int -> X)) =
    let u_2575 (k_make_array27_u_5872:(unit -> X)) =
      if 0 <= i_1323 && i_1323 < n_1322
      then
        k_make_array27_u_5872 ()
      else
        <|fail|> () k_make_array27_u_5872
    in
    u_2575 (fun (():unit) -> k_make_array27_5861 0)
  in
  let update27_1324 (i_1325:int) 
                   (a_1326:(int -> (int -> X) -> X)) 
                   (x_1327:int) (j_1328:int) 
                   (k_update27_5886:(int -> X)) =
    if j_1328 > i_1325 - 1 && j_1328 <= i_1325
    then
      k_update27_5886 x_1327
    else
      a_1326 j_1328 k_update27_5886
  in
  let rec init27_1329 (i_1330:int) (n_1331:int) 
                     (a_1332:(int -> (int -> X) -> X)) 
                     (k_init27_5919:((int -> (int -> X) -> X) ->
                                       X)) =
    if i_1330 >= n_1331
    then
      k_init27_5919 a_1332
    else
      init27_1329
        (i_1330 + 1) n_1331 (update27_1324 i_1330 a_1332 1) 
        k_init27_5919
  in
  let m27_1333 (k_1334:int) (n_1335:int) (i_1336:int) 
              (k_m27_5986:(unit -> X)) =
    if k_1334 >= 0 && k_1334 <= 0
    then
      init27_1329
        k_1334 n_1335 (make_array27_1321 n_1335) 
        (fun (x_6058:(int -> (int -> X) -> X)) ->
           if 0 <= i_1336 && i_1336 < n_1335
           then
             x_6058
               i_1336 
               (fun (x_6028:int) ->
                  if x_6028 = 1
                  then
                    k_m27_5986 ()
                  else
                    <|fail|> () k_m27_5986)
           else
             k_m27_5986 ())
    else
      k_m27_5986 ()
  in
  let rec sum28_1338 (n_1339:int) (m_1340:int) 
                    (k_sum28_6071:(int -> X)) =
    if n_1339 <= 0
    then
      k_sum28_6071 m_1340
    else
      sum28_1338
        (n_1339 - 1) m_1340 
        (fun (x_6075:int) -> k_sum28_6071 (1 + x_6075))
  in
  let rec mult_sum_1341 (n_1342:int) (m_1343:int) 
                       (k_mult_sum_6098:(int -> X)) =
    if n_1342 <= 0
    then
      k_mult_sum_6098 0
    else
      rand_int_cps
        () 
        (fun (x_6101:int) ->
           if x_6101 = 0
           then
             k_mult_sum_6098 m_1343
           else
             mult_sum_1341
               (n_1342 - 1) m_1343 
               (fun (x_6134:int) ->
                  sum28_1338 m_1343 x_6134 k_mult_sum_6098))
  in
  let main_1347 (n_1348:int) (m_1349:int) 
               (k_main_6150:(unit -> X)) =
    if n_1348 = 1
    then
      copy_1199
        m_1349 
        (fun (x_4508:int) ->
           copy_1199
             x_4508 
             (fun (x_4487:int) ->
                if x_4487 = m_1349
                then
                  k_main_6150 ()
                else
                  <|fail|> () k_main_6150))
    else
      if n_1348 = 2
      then
        m2_1210 m_1349 k_main_6150
      else
        if n_1348 = 3
        then
          f3_1213 m_1349 g3_1216 k_main_6150
        else
          if n_1348 = 4
          then
            f_1229 m_1349 c4_1220 0 k_main_6150
          else
            if n_1348 = 5
            then
              m5_1243 m_1349 k_main_6150
            else
              if n_1348 = 6
              then
                m6_1251 m_1349 k_main_6150
              else
                if n_1348 = 7
                then
                  zip_1253
                    m_1349 m_1349 
                    (fun (x_5207:int) ->
                       map_1256
                         x_5207 
                         (fun (x_5185:int) ->
                            if x_5185 = m_1349
                            then
                              k_main_6150 ()
                            else
                              <|fail|> () k_main_6150))
                else
                  if n_1348 = 21
                  then
                    m21_1272 m_1349 m_1349 m_1349 k_main_6150
                  else
                    if n_1348 = 22
                    then
                      m22_1279 m_1349 k_main_6150
                    else
                      if n_1348 = 23
                      then
                        m23_1291 m_1349 m_1349 k_main_6150
                      else
                        if n_1348 = 24
                        then
                          m24_1305 m_1349 m_1349 k_main_6150
                        else
                          if n_1348 = 25
                          then
                            mult25_1309
                              m_1349 m_1349 
                              (fun (x_5758:int) ->
                                 mult25_1309
                                   m_1349 m_1349 
                                   (fun (x_5759:int) ->
                                      if x_5758 <= x_5759
                                      then
                                        k_main_6150 ()
                                      else
                                        <|fail|> () k_main_6150))
                          else
                            if n_1348 = 26
                            then
                              mult26_1315
                                m_1349 m_1349 
                                (fun (x_5831:int) ->
                                   if m_1349 * 2 <= x_5831
                                   then
                                     k_main_6150 ()
                                   else
                                     <|fail|> () k_main_6150)
                            else
                              m27_1333
                                m_1349 m_1349 m_1349 
                                k_main_6150
  in
  let main_2771 (k_main_6358:(unit -> X)) =
    let arg1_2767 (k_main_arg1_6363:(int -> X)) =
      rand_int_cps () k_main_arg1_6363
    in
    arg1_2767
      (fun (arg1_6393:int) ->
         let arg2_2769 (k_main_arg2_6375:(int -> X)) =
           rand_int_cps () k_main_arg2_6375
         in
         arg2_2769
           (fun (arg2_6392:int) ->
              main_1347 arg1_6393 arg2_6392 k_main_6358))
  in
  main_2771 (fun (():unit) -> {end}) # [ACPS])


176.863

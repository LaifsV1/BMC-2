#lang rosette

; bmc.rkt must be in the same folder as bench.rkt
(require "bmc.rkt")

(define (sec1 n)
 (let* ([f (λ (x g h) (if (<= x 0) g h))]
 [r (f n (λ (x) (- x 1)) (λ (x) (+ x 1)))])
 (assert (>= (r n) n))))
(define (sec2 r)
 (letrec
 ([f
 (λ (x)
 (if (not (= x 0))
 (begin (set! r (+ r 1))
 (f (- x 1)))
 (λ (y) (assert (= y (+ r x))))))])
 (let ([g (f 5)])
 (g 5))))
(define (sec3 r n)
 (define-k (f x)
 (if (not (= x 0))
 (begin (set! r (+ r 1))
 (f (- x 1)))
 (λ (y) (assert (= y (+ r x))))))
 (define g (f n))
 (g n))
(define (sec5 n)
 (define-k (f x)
 (if (<= x 0)
 0
 (begin
 (define (g y) (+ x y))
 (g (f (- x 1))))))
 (define-k (fp x)
 (if (<= x 0)
 0
 (+ x (fp (- x 1)))))
 (assert (= (f n) (fp n))))
(define (mc91-e n) ; mc91-e.txt
 (define-k (mc91 x)
 (if (>= x 101)
 (+ x -10)
 (mc91 (mc91 (+ x 11)))))
 (when (<= n 102)
 (assert (= (mc91 n) 91))))
(define (multi-e n) ; multi-e.txt
 (define-k (mult n m)
 (if (or (<= n 0) (<= m ))
 0
 (+ n (mult n (+ m -1)))))
 (if (<= (+ n 1) (mult n n))
 (void)
 (assert #f)))
(define (repeat-e n) ; repeat-e.txt
 (define-k (repeat f n s)
 (if (= n 0) s (f (repeat f (+ n -1) s))))
 (define (succ x) (+ x 1))
 (if (<= (repeat succ n 0) n)
 (assert #f)
 (void)))
(define (r-lock-e n) ; r-lock-e.txt
 (define (lock st)
 (if (= st 0) 1 (assert #f)))
 (define (unlock st)
 (if (= st 1) 0 (assert #f)))
 (define (f n st) (if (>= n 1) (lock st) st))
 (define (g n st) (if (>= n 0) (unlock st) st))
 (if (= 0 (g n (f n 0)))
 (void)
 (assert #f)))
(define (r-lock n) ; r-lock.txt
 (define (lock st)
 (if (= st 0) 1 (assert #f)))
 (define (unlock st)
 (if (= st 1) 0 (assert #f)))
 (define (f n st) (if (>= n 1) (lock st) st))
 (define (g n st) (if (>= n 1) (unlock st) st))
 (if (= 0 (g n (f n 0)))
 (void)
 (assert #f)))
(define (sum-e n) ; sum-e.txt
 (define-k (sum n)
 (if (<= n 0)
 0
 (+ n (sum (+ n -1)))))
 (if (<= (+ n 1) (sum n))
 (void)
 (assert #f)))
(define (hrec n) ; hrec.txt
 (define-k (f g)
 (begin
 (define-k (ret x)
 (if (>= x 0)
 (g x)
 (let ([fp (f (f g))])
 (fp (g x)))))
 ret))
 (define (succ x) (+ x 1))
 (let ([fp (f succ)])
 (if (>= (fp n) 0)
 (void)
 (assert #f))))
(define (ack m n) ; ack.txt
 (define-k (ackermann m n)
 (cond [(= m 0) (+ n 1)]
 [(= n 0) (ackermann (+ m -1) 1)]
 [else (ackermann (+ m -1) (ackermann m (+ n -1)))]))
 (if (and (>= m 0) (>= n 0))
 (assert (>= (ackermann m n) n))
 (void)))
(current-bitwidth #f) ; use the theory of integers

(time (bmc mc91-e 1))
(time (bmc mc91-e 2))
(time (bmc mc91-e 3))
(time (bmc mc91-e 4))
(time (bmc mc91-e 5))
(time (bmc mc91-e 6))
(time (bmc mc91-e 7))
(time (bmc mc91-e 8))
(time (bmc mc91-e 9))
(time (bmc mc91-e 10))
(time (bmc mc91-e 11))
(time (bmc mc91-e 12))
(time (bmc multi-e 1))
(time (bmc multi-e 2))
(time (bmc multi-e 3))
(time (bmc multi-e 4))
(time (bmc multi-e 5))
(time (bmc multi-e 6))
(time (bmc multi-e 7))
(time (bmc multi-e 8))
(time (bmc multi-e 9))
(time (bmc multi-e 10))
(time (bmc multi-e 11))
(time (bmc multi-e 12))
(time (bmc multi-e 13))
(time (bmc multi-e 14))
(time (bmc multi-e 15))
(time (bmc repeat-e 1))
(time (bmc repeat-e 2))
(time (bmc repeat-e 3))
(time (bmc repeat-e 4))
(time (bmc repeat-e 5))
(time (bmc repeat-e 6))
(time (bmc repeat-e 7))
(time (bmc repeat-e 8))
(time (bmc repeat-e 9))
(time (bmc repeat-e 10))
(time (bmc repeat-e 11))
(time (bmc repeat-e 12))
(time (bmc repeat-e 13))
(time (bmc repeat-e 14))
(time (bmc repeat-e 15))
(time (bmc r-lock-e 1))
(time (bmc r-lock-e 2))
(time (bmc r-lock-e 3))
(time (bmc r-lock-e 4))
(time (bmc r-lock-e 5))
(time (bmc r-lock-e 6))
(time (bmc r-lock-e 7))
(time (bmc r-lock-e 8))
(time (bmc r-lock-e 9))
(time (bmc r-lock-e 10))
(time (bmc r-lock-e 11))
(time (bmc r-lock-e 12))
(time (bmc r-lock-e 13))
(time (bmc r-lock-e 14))
(time (bmc r-lock-e 15))
(time (bmc r-lock 1))
(time (bmc r-lock 2))
(time (bmc r-lock 3))
(time (bmc r-lock 4))
(time (bmc r-lock 5))
(time (bmc r-lock 6))
(time (bmc r-lock 7))
(time (bmc r-lock 8))
(time (bmc r-lock 9))
(time (bmc r-lock 10))
(time (bmc r-lock 11))
(time (bmc r-lock 12))
(time (bmc r-lock 13))
(time (bmc r-lock 14))
(time (bmc r-lock 15))
(time (bmc sum-e 1))
(time (bmc sum-e 2))
(time (bmc sum-e 3))
(time (bmc sum-e 4))
(time (bmc sum-e 5))
(time (bmc sum-e 6))
(time (bmc sum-e 7))
(time (bmc sum-e 8))
(time (bmc sum-e 9))
(time (bmc sum-e 10))
(time (bmc sum-e 11))
(time (bmc sum-e 12))
(time (bmc sum-e 13))
(time (bmc sum-e 14))
(time (bmc sum-e 15))
(time (bmc hrec 1))
(time (bmc hrec 2))
(time (bmc hrec 3))
(time (bmc hrec 4))
(time (bmc hrec 5))
(time (bmc hrec 6))
(time (bmc hrec 7))
(time (bmc hrec 8))
(time (bmc hrec 9))
(time (bmc hrec 10))
(time (bmc hrec 11))
(time (bmc hrec 12))
(time (bmc ack 1))
(time (bmc ack 2))
(time (bmc ack 3))
(time (bmc ack 4))
(time (bmc ack 5))
(time (bmc ack 6))
(time (bmc ack 7))
(time (bmc ack 8))
(time (bmc ack 9))
(time (bmc ack 10))
(time (bmc ack 11))


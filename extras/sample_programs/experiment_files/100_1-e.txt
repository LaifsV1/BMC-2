(* copy_intro, e-fact, e-simple, hors, intro_1, intro_3, zipmap, max, mc91-e*)
Methods:
copy (x:Int) :(Int) = if x==0 then 0 else 1 + (copy (x + -1));

m1 (n:Int) :(Unit) = 
assert( (copy (copy n)) == n );

fact (n:Int , exn:(Int->Int)) :(Int) =
  if n <= 0
  then
    exn 0
  else
    let (f:Int->Int) = fun (i:Int) :(Int) -> if i==0 then 1 else exn i in
    n * (fact (n + -1,f));
exn (n:Int) :(Int) = let (x:Unit) = (assert 0) in 1;

m2 (n:Int) :(Unit) = 
if n >= 1 then
   let (x:Int) = fact (n,exn) in skip
else skip;

f3 (n:Int , k:Int->Unit) :(Unit) = if n >= 0 then skip else k 0;
g3 (n:Int) :(Unit) = assert( n==0 );

m3 (n:Int) :(Unit) = 
f3 (n,g3);

c (q:Int) :(Unit) = skip;
b (x:Int->Unit) :(Int->Unit) = fun (q:Int) :(Unit) -> x 1;
a (x:Int->Unit , y:Int->Unit , q:Int) :(Unit) =
  if q == 0 then let (a:Unit) = x 0 in y 0 else assert(0);
f4 (n:Int , x:Int->Unit) :(Int->Unit) =
  fun (q:Int) :(Unit) -> if n<=0 then x q else a (x,f4 (n + -1,b x),q);
s (n:Int , q:Int) :(Unit) = let (f':Int->Unit) = f4 (n,c) in f' q;

m4 (n:Int) :(Unit) = 
s (n,0);

f5 (x:Int,g:Int->Unit) :(Unit) = g(x+1);
h5 (y:Int) :(Unit) = assert( y >= 1 );

m5 (n:Int) :(Unit) = 
if n >= 1 then f5 (n,h5) else skip;

f6 (x:Int,g6:Int->Unit) :(Unit) = g6 (x+1);
h6 (z:Int) :(Int->Unit) = fun (y:Int) :(Unit) -> if y <= z then assert(0) else skip;

m6 (n:Int) :(Unit) =
if n>=0 then f6(n,h6 n) else skip;

zip (x:Int,y:Int) :(Int) =
  if x==0 then
    if y==0 then
      x
    else
      let (z:Unit) = assert 0 in 1
  else
    if y==0 then
      let (z:Unit) = assert 0 in 1
    else
      1 + (zip (x + -1,y + -1));
map (x:Int) :(Int) =
  if x==0 then x else 1 + (map (x + -1));

m7 (n:Int) :Unit =
assert( (map (zip (n,n)))==n );

max (max2:(Int,Int)->Int , x:Int) :((Int,Int)->Int) = fun (y:Int,z:Int) :(Int) -> max2(max2(x,y),z);
f9 (x:Int, y:Int) :(Int) = if x >= y then x else y;

m9 (x:Int,y:Int,z:Int) :Unit =
let (m:(Int,Int)->Int) = max (f9,x) in
let (m':Int) = m (y,z) in
assert( (f9(x,m')) == m' );

mc91 (x:Int) :(Int) =
  if x >= 101 then
    x + -10
  else
    mc91 (mc91 (x + 11));

m10 (n:Int) :Unit =
if n <= 102 then
  assert ((mc91 n) == 91)
else skip;

Main (n:Int, m:Int) :Unit:
if n == 1 then (m1 m)
else
if n == 2 then (m2 m)
else
if n == 3 then (m3 m)
else
if n == 4 then (m4 m)
else
if n == 5 then (m5 m)
else
if n == 6 then (m6 m)
else
if n == 7 then (m7 m)
else
if n == 9 then (m9(m,m,m))
else
(m10 m)

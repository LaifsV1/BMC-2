(* e-fact, e-simple, intro_1, intro_3, zipmap, sum, mult, zipunzip *)
Methods:

fact (n:Int , exn:(Int->Int)) :(Int) =
  if n <= 0
  then
    exn 0
  else
    let (f:Int->Int) = fun (i:Int) :(Int) -> if i==0 then 1 else exn i in
    n * (fact (n + -1,f));
exn (n:Int) :(Int) = let (x:Unit) = (assert 0) in 1;

m2 (n:Int) :(Unit) = 
if n >= 1 then
   let (x:Int) = fact (n,exn) in skip
else skip;

f3 (n:Int , k:Int->Unit) :(Unit) = if n >= 0 then skip else k 0;
g3 (n:Int) :(Unit) = assert( n==0 );

m3 (n:Int) :(Unit) = 
f3 (n,g3);

f5 (x:Int,g:Int->Unit) :(Unit) = g(x+1);
h5 (y:Int) :(Unit) = assert( y >= 1 );

m5 (n:Int) :(Unit) = 
if n >= 1 then f5 (n,h5) else skip;

f6 (x:Int,g6:Int->Unit) :(Unit) = g6 (x+1);
h6 (z:Int) :(Int->Unit) = fun (y:Int) :(Unit) -> if y <= z then assert(0) else skip;

m6 (n:Int) :(Unit) =
if n>=0 then f6(n,h6 n) else skip;

zip (x:Int,y:Int) :(Int) =
  if x==0 then
    if y==0 then
      x
    else
      let (z:Unit) = assert 0 in 1
  else
    if y==0 then
      let (z:Unit) = assert 0 in 1
    else
      1 + (zip (x + -1,y + -1));
map (x:Int) :(Int) =
  if x==0 then x else 1 + (map (x + -1));

m7 (n:Int) :Unit =
assert( (map (zip (n,n)))==n );

sum (n:Int) :(Int) =
  if n <= 0 then
    0
  else
    n + (sum (n + -1));

m16 (n:Int) :Unit = 
assert( n <= (sum n) );

mult (n:Int,m:Int) :(Int) =
  if (n <= 0) || (m <= 0) then
    0
  else
    n + (mult (n,m + -1));

m11 (n:Int) :Unit =
assert( n <= (mult(n,n)) );

fu (gu:(Int,Int)->Int) :((Int,Int)->Int) = fun (x:Int,y:Int) :(Int) -> gu (x+1, y+1);
unzip (x:Int, k:(Int,Int)->Int) :(Int) =
  if x==0 then
    k (0,0)
  else
    unzip (x + -1, fu k);
zipu (x:Int, y:Int) :(Int) =
  if x==0 then
    if y==0 then
      0
    else
      let (z:Unit) = (assert(0)) in 1
  else
    if y==0 then
      let (z:Unit) = (assert(0)) in 1
    else
      1 + (zipu (x + -1, y + -1));

m18 (n:Int) :(Unit) =
let (u:Int) = unzip (n,zipu) in skip;

mc91 (x:Int) :(Int) =
  if x >= 101 then
    x + -10
  else
    mc91 (mc91 (x + 11));

m133 (n:Int) :Unit =
if n <= 102 then
  assert ((mc91 n) == 91)
else skip;

Main (n:Int, m:Int) :Unit:
if n == 2 then (m2 m)
else
if n == 3 then (m133 m)
else
if n == 5 then (m18 m)
else
if n == 6 then (m6 m)
else
if n == 7 then (m7 m)
else
if n == 16 then (m16 m)
else
(m3 m)

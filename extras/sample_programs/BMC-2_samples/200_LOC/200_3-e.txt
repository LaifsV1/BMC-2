Methods:

succ3 (x:Int) :Int = x + 1;
repeat2 (f2:(Int->Int),n:Int,s4:Int) :(Int) =
  if n==0 then
    s4
  else
    f2 (repeat2 (f2,n + -1,s4));

m16 (n:Int) :(Unit) =
if ((repeat2(succ3,n,0)) <= n) then assert(0) else skip;

lock (st:Int) :Int = let (u:Unit) = assert(st==0) in 1;
unlock (st:Int) :Int = let (u:Unit) = assert(st==0) in 0;
f17 (n:Int,st:Int) :Int = if n >= 1 then lock st else st;
g17 (n:Int,st:Int) :Int = if n >= 0 then unlock st else st;

m17 (n:Int) :Unit = 
assert( (g17(n,f17(n,0)))==0 );

sum (n:Int) :(Int) =
  if n <= 0 then
    0
  else
    n + (sum (n + -1));

m18 (n:Int) :Unit =
assert( (n+1) <= (sum n) );

f19 (g19:Int->Int) :(Int->Int) =
  fun (x:Int) :(Int) ->
    if x>=0 then
      g19 x
    else
      let (f':Int->Int) = f19 (f19 g19) in
      f' (g19 x);

succ4 (x:Int) :(Int) = x + 1;

m19 (n:Int) :(Unit) =
let (f':Int->Int) = f19 succ4 in
assert( (f' n) >= 0 );

ackermann (m:Int , n:Int) :(Int) =
  if m==0 then
    n+1
  else if n==0 then
    ackermann (m + -1,1)
  else
    ackermann (m + -1,(ackermann (m,n + -1)));

m20 (m:Int , n:Int) :(Unit) =
if (m >= 0) && (n >= 0) then
  assert((ackermann (m,n)) >= n)
else skip;

make_array21 (n:Int) :(Int->Int) =
  fun (i:Int) :(Int) ->
  let (u:Unit) = assert ((0 <= i) && (i <= (n + -1))) in 0;

update21 (i:Int, a2:Int->Int, x:Int) :(Int -> Int) =
  fun (j:Int) :(Int) ->
  if (j == i) then x else a2 (j);

init21 (i:Int,n:Int,a2:Int->Int) :(Int->Int) =
  if (i >= n) then a2
  else init21((i + 1),n,update21(i,a2,1));

m21 (k:Int,n:Int,i:Int) :(Unit) =
  if (k == 0) then
    let (x:Int->Int) = init21(k,n,make_array21 (n)) in
      if ((0 <= i) && (i <= (n + -1))) then
        assert ((x i) >= 1)
      else skip
  else skip;

mc91_2 (x:Int) :(Int) =
  if x >= 101 then
    x + -10
  else
    mc91_2 (mc91_2 (x + 11));

m22 (n:Int) :Unit =
if n <= 101 then
  assert( (mc91_2 n) == 91 )
else skip;

make_array23 (n:Int) :(Int->Int) =
  fun (i:Int) :(Int) -> (n +(i*(-1)));

array_max23 (n:Int, i:Int, a23:Int->Int,m:Int) :(Int) =
  if (i >= n) then
    m
  else
    let (x:Int) = a23 i in
    let (z:Int) = if x >= (m + 1) then x else m in
    array_max23(n,i+1,a23,z);

m23 (n:Int,i:Int) :(Unit) =
  if ((n >= 1) && (i == 0)) then
    let (m:Int) = array_max23(n,i,make_array23 n,-1) in
    assert(m>=n)
  else skip;

make_array24 (n:Int) :(Int->Int) =
  fun (i:Int) :(Int) -> (n +(i*(-1)));

array_max24 (n:Int, i:Int, a24:Int->Int,m:Int) :(Int) =
  if (i >= n) then
    m
  else
    let (x:Int) = a24 i in
    let (z:Int) = if x >= (m + 1) then x else m in
    array_max24(n,i+1,a24,z);

m24 (n:Int,i:Int) :(Unit) =
  if ((n >= 1) && (i == 0)) then
    let (m:Int) = array_max24(n,i,make_array24 n,-1) in
    if n==m then assert(0) else skip
  else skip;

mult25 (n:Int,m:Int) :(Int) =
  if (n <= 0) || (m <= 0) then
    0
  else
    n + (mult25 (n,m + -1));

m25 (n:Int,m:Int) :Unit =
assert ((n*2) <= (mult25(n,m)));

mult26 (n:Int,m:Int) :(Int) =
  if (n <= 0) || (m <= 0) then
    0
  else
    n + (mult26 (n,m + -1));

m26 (n:Int,m:Int) :Unit =
assert ((mult26(m,m)) <= (mult26(n,n)));

make_array27 (n:Int) :(Int->Int) =
  fun (i:Int) :(Int) ->
  let (u:Unit) = assert ((0 <= i) && (i <= (n + -1))) in 0;

update27 (i:Int, a27:Int->Int, x:Int) :(Int -> Int) =
  fun (j:Int) :(Int) ->
  if (j == i) then x else a27 (j);

init27 (i:Int,n27:Int,a27:Int->Int) :(Int->Int) =
  if (i >= n27) then a27
  else init27((i + 1),n27,update27(i,a27,1) );

m27 (k27:Int,n27:Int,i:Int) :(Unit) =
  if (k27 == 0) then
    let (x27:Int->Int) = init27(k27,n27,make_array27(n27)) in
      if ((0 <= i) && (i <= (n27 + -1))) then
        assert ((x27 i) == 0)
      else skip
  else skip;

sum28 (n:Int, m:Int) :(Int) =
  if n <= 0 then
    m
  else
    1 + (sum28 (n + -1, m));

mult_sum (n:Int, m:Int) :(Int) =
  if n <= 0 then
    0
  else if n == 1 then
         m
       else
         sum28(m,(mult_sum (n + -1, m)));
  
m28 (n:Int,m:Int) :Unit =
assert( mult_sum(n,m) == (n*m) );

Main (n:Int, m:Int) :Unit:
if n == 16 then (m16 m)
else
if n == 17 then (m17 m)
else
if n == 18 then (m18 m)
else
if n == 19 then (m19 m)
else
if n == 20 then (m20 (m,m))
else
if n == 21 then (m21 (m,m,m))
else
if n == 22 then (m22 m)
else
if n == 23 then (m23 (m,m))
else
if n == 24 then (m24 (m,m))
else
if n == 25 then (m25 (m,m))
else
if n == 26 then (m26 (m,m))
else
if n == 27 then (m27 (m,m,m))
else
m28 (m,m)

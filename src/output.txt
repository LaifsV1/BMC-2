
;;    ***Opening file: ../extras/sample_programs/MoCHI_samples/hrec.txt.....[done]***

;;    PARSER: 0.000074s
;;    ***Lexing and Parsing file........[done]*** 
;;    ***Building initial variables........[done]*** 

;;    BOUNDED TRANSLATION: 0.000056s
;;    ***Running bounded translation........[done]*** 

;;    PARSED TERM: (let (f':(Int, -> Int)) = (f (succ)) in (if ((f' (n)) gte 0) then skip else fail))

;;    SMT-LIB FILE:
(declare-sort Unit)
(declare-datatypes (T1 T2) ((Pair (mk-pair (left T1) (right T2)))))
(define-fun gte ((x Int) (y Int)) Int (if (>= x y) 1 0))
(define-fun lte ((x Int) (y Int)) Int (if (<= x y) 1 0))
(define-fun eq ((x Int) (y Int)) Int (if (= x y) 1 0))
(define-fun and_int ((x Int) (y Int)) Int (if (or (= x 0) (= y 0)) 0 1))
(define-fun or_int ((x Int) (y Int)) Int (if (or (not (= x 0)) (not (= y 0))) 1 0))

(declare-const n Int)
(declare-const _ret_1_ Unit)
(declare-const _ret_2_ String)
(declare-const _ret_3_ String)
(declare-const _ret_4_ String)
(declare-const _ret_5_ Unit)
(declare-const _ret_6_ Int)
(declare-const _ret_7_ Int)
(declare-const _ret_8_ Int)
(declare-const _ret_9_ Int)
(declare-const _ret_10_ Int)
(declare-const _ret_11_ Unit)
(declare-const _ret_12_ Unit)
(declare-const skip Unit)
(declare-const nil_unit Unit)
(declare-const fail_unit Unit)
(declare-const nil_int Int)
(declare-const fail_int Int)

;;    GENERATING TYPE DECLARATIONS: 0.000001s

(assert 
(and (not (= n fail_int)) (not (= n nil_int))))

(assert (not (= fail_int nil_int)))
(assert (not (= fail_unit nil_unit)))
(assert (not (= "fail_meth" "nil_meth")))


;;    GENERATING ASSERTIONS FOR COMPLEX TYPES: 0.000001s

(assert

(and 
(and (=> (= _ret_2_ "fail_meth") (= _ret_1_ nil_unit)) (or (= _ret_2_ "fail_meth") 
(and 
(and (=> (= _ret_5_ fail_unit) (= _ret_1_ fail_unit)) (=> (= _ret_5_ nil_unit) (= _ret_1_ nil_unit))) (or (or (= _ret_5_ fail_unit) (= _ret_5_ nil_unit)) (= _ret_1_ _ret_5_))))) 
(and 
(and 
(and (=> (= _ret_6_ fail_int) (= _ret_5_ fail_unit)) (=> (= _ret_6_ nil_int) (= _ret_5_ nil_unit))) (or (or (= _ret_6_ fail_int) (= _ret_6_ nil_int)) 
(and (=> (= _ret_6_ 0) 
(and (=> (= _ret_11_ fail_unit) (= _ret_5_ fail_unit)) (or (= _ret_11_ fail_unit) (= _ret_5_ _ret_11_)))) (=> (not (= _ret_6_ 0)) (= _ret_5_ _ret_12_))))) 
(and 
(and 
(and (= _ret_12_ skip) (not (= _ret_12_ fail_unit))) (not (= _ret_12_ nil_unit))) 
(and (= _ret_11_ fail_unit) 
(and 
(and 
(and (=> (= _ret_7_ fail_int) (= _ret_6_ fail_int)) (=> (= _ret_7_ nil_int) (= _ret_6_ nil_int))) (or (or (= _ret_7_ fail_int) (= _ret_7_ nil_int)) 
(and 
(and (= _ret_6_ (gte _ret_7_ _ret_10_)) (not (= _ret_6_ fail_int))) (not (= _ret_6_ nil_int))))) 
(and 
(and 
(and (= _ret_10_ 0) (not (= _ret_10_ fail_int))) (not (= _ret_10_ nil_int))) 
(and 
(and 
(and (=> (= n fail_int) (= _ret_7_ fail_int)) (=> (= n nil_int) (= _ret_7_ nil_int))) (or (or (= n fail_int) (= n nil_int)) (=> (= _ret_2_ "succ") 
(and 
(and (=> (= _ret_9_ fail_int) (= _ret_7_ fail_int)) (=> (= _ret_9_ nil_int) (= _ret_7_ nil_int))) (or (or (= _ret_9_ fail_int) (= _ret_9_ nil_int)) (= _ret_7_ _ret_9_)))))) 
(and (= _ret_9_ nil_int) 
(and 
(and (=> (= _ret_4_ "fail_meth") (= _ret_2_ "fail_meth")) (or (= _ret_4_ "fail_meth") (= _ret_2_ _ret_4_))) 
(and (= _ret_4_ "nil_meth") 
(and 
(and (= _ret_3_ "succ") (not (= _ret_3_ "fail_meth"))) (not (= _ret_3_ "nil_meth"))))))))))))))
;;    GENERATING PROGRAM FORMULA: 0.000113s
(assert (= _ret_1_ fail_unit))

(check-sat)
;;(get-model)
(get-value (n))


;;    TOTAL EXECUTION TIME: 0.000565s
